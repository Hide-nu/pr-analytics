{
  "week": "2025-W09",
  "repository": {
    "owner": "colinhacks",
    "name": "zod"
  },
  "prs": [
    {
      "id": 2366420443,
      "number": 4015,
      "state": "closed",
      "created_at": "2025-03-02T00:55:57Z",
      "merged_at": "2025-03-02T00:56:27Z",
      "title": "Update mintlify feature",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 6,
      "deletions": 6,
      "changed_files": 2,
      "comments": 2,
      "review_comments": 0,
      "commits": 2,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "netlify[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/13473?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2366370851,
      "number": 4014,
      "state": "closed",
      "created_at": "2025-03-01T22:23:05Z",
      "merged_at": "2025-03-01T22:27:52Z",
      "title": "Feature Mintlify",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 10,
      "deletions": 10,
      "changed_files": 2,
      "comments": 2,
      "review_comments": 0,
      "commits": 3,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "netlify[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/13473?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2366297755,
      "number": 4013,
      "state": "open",
      "created_at": "2025-03-01T19:12:58Z",
      "merged_at": null,
      "title": "chore: TypeScript Enhancements for Zod Types",
      "user": {
        "login": "valentinpolitov",
        "avatar_url": "https://avatars.githubusercontent.com/u/39585375?v=4"
      },
      "labels": [],
      "additions": 498,
      "deletions": 110,
      "changed_files": 8,
      "comments": 2,
      "review_comments": 1,
      "commits": 4,
      "reviews": [
        {
          "id": 2652564300,
          "node_id": "PRR_kwDODqUnoM6eGutM",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "**Actionable comments posted: 1**\n\n<details>\n<summary>🧹 Nitpick comments (7)</summary><blockquote>\n\n<details>\n<summary>deno/lib/README.md (1)</summary><blockquote>\n\n`1638-1644`: **Grammar and Clarity Improvement in the `.length()` Section**\n\nPlease update the phrase \"a exact‑length array\" to \"an exact‑length array\" to ensure correct English usage. The code example and description otherwise clearly demonstrate the intended tuple transformation behavior.\n  \n```diff\n-To enforce a exact-length array, use `.length()`.\n+To enforce an exact-length array, use `.length()`.\n```\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[misspelling] ~1640-~1640: Use “an” instead of ‘a’ if the following word starts with a vowel sound, e.g. ‘an article’, ‘an hour’.\nContext: ...y!\", }); ```  ### `.length`  To enforce a exact-length array, use `.length()`. Th...\n\n(EN_A_VS_AN)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>README.md (3)</summary><blockquote>\n\n`1638-1646`: **Grammar Enhancement in the `.length` Section**\n\nThe documentation currently reads “To enforce a exact-length array, use `.length()`.” For proper grammar, “exact” should be preceded by *an* rather than *a*.  \n\n\n```diff\n-To enforce a exact-length array, use `.length()`.\n+To enforce an exact-length array, use `.length()`.\n```\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[misspelling] ~1640-~1640: Use “an” instead of ‘a’ if the following word starts with a vowel sound, e.g. ‘an article’, ‘an hour’.\nContext: ...y!\", }); ```  ### `.length`  To enforce a exact-length array, use `.length()`. Th...\n\n(EN_A_VS_AN)\n\n</details>\n\n</details>\n\n---\n\n`1667-1684`: **Typo Correction in the TypeScript Limitations Section**\n\nThere appears to be a typo in the sentence: “If a generic `number` is passed to `.lenght()`, Zod will validate the length but lose the tuple inference…”  \nIt should be spelled as `.length()`.  \n\n\n```diff\n-If a generic `number` is passed to `.lenght()`, Zod will validate the length but lose the tuple inference, resulting in a simple array:\n+If a generic `number` is passed to `.length()`, Zod will validate the length but lose the tuple inference, resulting in a simple array:\n```\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[typographical] ~1684-~1684: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...-Infinity` cannot be checked because in TypeScript they are of type `number`.  <br/>  ## T...\n\n(IN_NNP_COMMA)\n\n</details>\n\n</details>\n\n---\n\n`1680-1685`: **Punctuation Improvement in Listing Special Numbers**\n\nFor clarity and consistency, consider adding a comma in the list of special numeric values. For example, change “`NaN`, `Infinity` and `-Infinity`” to “`NaN`, `Infinity`, and `-Infinity`”.  \n\n\n```diff\n- > ⚠️ `NaN`, `Infinity` and `-Infinity` cannot be checked because in TypeScript they are of type `number`.\n+ > ⚠️ `NaN`, `Infinity`, and `-Infinity` cannot be checked because in TypeScript they are of type `number`.\n```\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[typographical] ~1684-~1684: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...-Infinity` cannot be checked because in TypeScript they are of type `number`.  <br/>  ## T...\n\n(IN_NNP_COMMA)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>src/types.ts (1)</summary><blockquote>\n\n`1112-1112`: **Returning value as any**  \nCasting to `any` can reduce type safety. Consider maintaining stronger typing to avoid losing type information.\n\n</blockquote></details>\n<details>\n<summary>deno/lib/types.ts (2)</summary><blockquote>\n\n`1112-1112`: **Remove the `as any` to strengthen type safety.**\nWhile this works, it's safer to avoid `any` if possible.\n\nApply this diff to remove the unnecessary cast:\n\n```diff\n-    return { status: status.value, value: input.data } as any;\n+    return { status: status.value, value: input.data };\n```\n\n---\n\n`2354-2354`: **Consider adjusting the naming of “atleastone”.**\nRenaming to “atLeastOne” may improve clarity and consistency within codebases.\n\nSuggested update:\n\n```diff\n-export type ArrayCardinality = \"many\" | \"atleastone\" | \"exact\";\n+export type ArrayCardinality = \"many\" | \"atLeastOne\" | \"exact\";\n```\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>📜 Review details</summary>\n\n**Configuration used: CodeRabbit UI**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>📥 Commits</summary>\n\nReviewing files that changed from the base of the PR and between e2b9a5f9ac67d13ada61cd8e4b1385eb850c7592 and 07e34bf6fde73a8b6d1669d31ad51c5d3146af85.\n\n</details>\n\n<details>\n<summary>📒 Files selected for processing (8)</summary>\n\n* `README.md` (1 hunks)\n* `deno/lib/README.md` (1 hunks)\n* `deno/lib/__tests__/string.test.ts` (2 hunks)\n* `deno/lib/helpers/util.ts` (2 hunks)\n* `deno/lib/types.ts` (51 hunks)\n* `src/__tests__/string.test.ts` (2 hunks)\n* `src/helpers/util.ts` (2 hunks)\n* `src/types.ts` (51 hunks)\n\n</details>\n\n<details>\n<summary>🧰 Additional context used</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n<details>\n<summary>deno/lib/README.md</summary>\n\n[misspelling] ~1640-~1640: Use “an” instead of ‘a’ if the following word starts with a vowel sound, e.g. ‘an article’, ‘an hour’.\nContext: ...y!\", }); ```  ### `.length`  To enforce a exact-length array, use `.length()`. Th...\n\n(EN_A_VS_AN)\n\n---\n\n[typographical] ~1684-~1684: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...-Infinity` cannot be checked because in TypeScript they are of type `number`.  <br/>  ## T...\n\n(IN_NNP_COMMA)\n\n</details>\n<details>\n<summary>README.md</summary>\n\n[misspelling] ~1640-~1640: Use “an” instead of ‘a’ if the following word starts with a vowel sound, e.g. ‘an article’, ‘an hour’.\nContext: ...y!\", }); ```  ### `.length`  To enforce a exact-length array, use `.length()`. Th...\n\n(EN_A_VS_AN)\n\n---\n\n[typographical] ~1684-~1684: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...-Infinity` cannot be checked because in TypeScript they are of type `number`.  <br/>  ## T...\n\n(IN_NNP_COMMA)\n\n</details>\n\n</details>\n\n</details>\n\n<details>\n<summary>🔇 Additional comments (74)</summary><blockquote>\n\n<details>\n<summary>deno/lib/README.md (1)</summary>\n\n`1647-1657`: **Documentation Clarity for `.min()`/`.max()`**\n\nThe updated section clearly explains that the `.min()` and `.max()` methods enforce length constraints without altering the inferred type. The provided examples are concise and helpful. No further modifications are needed here.\n\n</details>\n<details>\n<summary>src/__tests__/string.test.ts (3)</summary>\n\n`41-47`: **Well-structured tests for string length validation.**\n\nThe new test case thoroughly validates the behavior of the string length validators (`min`, `max`, and `length`), ensuring that they enforce the correct constraints. This corresponds well to the TypeScript enhancements mentioned in the PR objectives.\n\n---\n\n`576-595`: **Excellent test coverage for case transformation type safety.**\n\nThe updated tests for `toLowerCase()` properly validate the TypeScript enhancements for case-sensitive methods. The tests check both the transformation behavior and the type-safety improvements:\n\n1. Basic case transformation is verified\n2. Method ordering is tested (e.g., `toLowerCase().startsWith(\"a\")` vs `startsWith(\"A\").toLowerCase()`)\n3. Type errors are correctly expected when case doesn't match the output type\n\nThis implementation directly supports the PR objective of improving generic case inference and ensuring that methods like `startsWith`, `endsWith`, and `includes` accept values that match the output case.\n\n---\n\n`597-617`: **Comprehensive test pattern for uppercase transformation.**\n\nThe `toUpperCase()` tests mirror the structure of the lowercase tests, creating a thorough and consistent test suite. These tests properly validate that:\n\n1. Uppercase transformations work correctly\n2. Method chaining order is respected\n3. Type errors occur when case-sensitive methods are called with the wrong case\n\nThe symmetrical implementation between lowercase and uppercase tests is a good practice for ensuring consistent behavior across similar functionality.\n\n</details>\n<details>\n<summary>deno/lib/__tests__/string.test.ts (3)</summary>\n\n`42-48`: **Good addition of comprehensive length validation tests!**\n\nThese tests properly validate that string length validators behave as expected:\n- `minFive` correctly accepts strings of exactly 5 characters or longer\n- `maxFive` correctly accepts strings of exactly 5 characters or shorter\n- `justFive` correctly enforces strings to be exactly 5 characters\n\n---\n\n`577-595`: **Enhanced case transformation tests with proper type-safety checks.**\n\nThe test has been improved to:\n1. Make the code more maintainable by using a variable for the transformed string\n2. Verify correct string conversion with `toLowerCase()`\n3. Test method chaining behavior where transformations are applied in the correct order\n4. Validate type-safety with appropriate error cases\n\n---\n\n`598-617`: **Good symmetrical testing for uppercase transformations.**\n\nThis mirrors the lowercase tests with the same quality improvements:\n1. Variable assignment for better readability\n2. Clear test cases for the `toUpperCase()` transformation\n3. Proper validation of method ordering in chains\n4. Type-safety checks that verify incompatible case operations throw errors\n\n</details>\n<details>\n<summary>src/helpers/util.ts (4)</summary>\n\n`20-22`: **Well-designed type constraint for non-negative numbers.**\n\nThe `NonNegative<T>` type elegantly uses template literal types to check for negative numbers, resolving to `never` when negative or `T` when not, providing strong guarantees for numeric parameters.\n\n---\n\n`24-24`: **Clean digit union type definition.**\n\nThe `digit` type creates a reusable union of all single-digit numbers, which improves readability when used in other type expressions.\n\n---\n\n`26-38`: **Sophisticated recursive type for exact-length arrays.**\n\nThe `ExactArray<T, N, R>` type is well-structured with:\n1. Special handling for non-literal numbers (`number extends N`)\n2. Rejection of negative lengths\n3. Optimization for small arrays (up to 100) with recursive building\n4. Fallback to a simpler constraint for larger arrays\n\nThis type powers the `.length()` array validation method to produce exact tuple types.\n\n---\n\n`95-99`: **Useful string case inference type.**\n\nThe `inferCase<T>` type elegantly detects whether a string type is lowercase, uppercase, or mixed case, enabling type-safe operations with case-sensitive string methods like `.startsWith()`, `.endsWith()`, and `.includes()`.\n\n</details>\n<details>\n<summary>deno/lib/helpers/util.ts (4)</summary>\n\n`20-22`: **Well-designed type constraint for non-negative numbers.**\n\nThe `NonNegative<T>` type elegantly uses template literal types to check for negative numbers, providing type-level guarantees for numeric parameters.\n\n---\n\n`24-24`: **Clean digit union type definition.**\n\nSimple but effective definition of digits as a union of literal numbers from 0 to 9.\n\n---\n\n`26-38`: **Sophisticated recursive type for exact-length arrays.**\n\nThe `ExactArray<T, N, R>` type is well-designed with appropriate special cases:\n1. Fallback to `T[]` for non-literal numbers\n2. Rejection of negative numbers\n3. Recursive construction for reasonable lengths (single/double digit and 100)\n4. Simple constraint for larger numbers\n\nThis type supports strong typing for the array length validation feature.\n\n---\n\n`95-99`: **Useful string case inference type.**\n\nThe `inferCase<T>` type intelligently determines the case characteristic of a string type, enabling type-safe operations with case-sensitive string methods, improving the developer experience when using string validators.\n\n</details>\n<details>\n<summary>src/types.ts (17)</summary>\n\n`191-217`: **Nice introduction of typed assertion method**  \nThis newly introduced `_assertParsedDataType` method is well-documented and provides a clear way to narrow input data types in TypeScript. It's a no-op at runtime, so there's minimal overhead.\n\n---\n\n`800-804`: **Additional generic type parameter for ZodString**  \nAllowing `Output extends string` enables more advanced transformations while preserving type safety.\n\n---\n\n`820-820`: **Runtime no-op for type assertion**  \nCalling `_assertParsedDataType<string>(input)` here ensures correct type-narrowing, consistent with the new generic approach.\n\n---\n\n`978-978`: **Includes check**  \nUtilizing `input.data.includes(check.value, check.position)` is correct; no issues found.\n\n---\n\n`992-992`: **startsWith check**  \nStraightforward usage of `startsWith`; no immediate concerns.\n\n---\n\n`1002-1002`: **endsWith check**  \nStraightforward usage of `endsWith`; no immediate concerns.\n\n---\n\n`1127-1128`: **Generic check addition**  \nThe `<CheckOutput extends string = Output>` approach for `_addCheck` helps preserve type information for custom checks.\n\n---\n\n`1254-1257`: **Improved includes signature**  \nAccepting `value: util.inferCase<Output>` enforces consistent case inference for string includes.\n\n---\n\n`1266-1266`: **startsWith with typed value**  \nUsing `util.inferCase<Output>` for the `value` parameter supports advanced type safety for string transformations.\n\n---\n\n`1274-1274`: **endsWith with typed value**  \nRetaining the consistent approach from `startsWith` and `includes`; looks good.\n\n---\n\n`1298-1302`: **Typed string length**  \nReturning `Output & { length: StringLength }` is an elegant way to carry length-specific type info through the chain.\n\n---\n\n`1317-1317`: **Trim check**  \nDefining a check with `kind: \"trim\"` is a clean extension and aligns with the new pattern.\n\n---\n\n`1321-1321`: **toLowerCase**  \nInferring `Lowercase<Output>` for advanced transformations; no issues identified.\n\n---\n\n`1325-1325`: **toUpperCase**  \nSimilarly inferring `Uppercase<Output>` provides symmetrical handling for uppercase transformations.\n\n---\n\n`1460-1460`: **Type assertion in ZodNumber**  \nConsistently ensures correct type after parsing a number.\n\n---\n\n`1744-1744`: **Type assertion in ZodBigInt**  \nAligns with the existing pattern of calling `_assertParsedDataType` after validating the parsed type.\n\n---\n\n`3894-3900`: **Enhanced parse path for Map**  \nSeparating key and value paths (e.g., `[index, \"key\"]`, `[index, \"value\"]`) improves error messaging for `ZodMap`.\n\n</details>\n<details>\n<summary>deno/lib/types.ts (42)</summary>\n\n`191-217`: **Introduce `_assertParsedDataType`: Great addition for type narrowing.**\nThis utility method clarifies the intended type post-checks and improves readability. Ensure it's always invoked after confirming the data's type to avoid incorrect narrowing.\n\n---\n\n`800-804`: **Refining `ZodString` with a generic output type.**\nLeveraging generics for the string output type more accurately handles transformations and advanced checks.\n\n---\n\n`820-820`: **Confirming `_assertParsedDataType<string>` after string check.**\nYou validate `parsedType` before asserting, which is consistent and safe for narrowing.\n\n---\n\n`978-978`: **`includes` check introduced.**\nUsing `String.prototype.includes` is clear and aligns with ES2015+ features.\n\n---\n\n`992-992`: **`startsWith` check introduced.**\nThe addition is straightforward and follows the same pattern as `includes`.\n\n---\n\n`1002-1002`: **`endsWith` check introduced.**\nAligns with the existing pattern for string validation methods.\n\n---\n\n`1127-1128`: **Generic `_addCheck` for string output improvements.**\nCleverly allows the output type to adjust based on transformations or checks.\n\n---\n\n`1254-1257`: **`includes` now inferring case.**\nThis is a neat way to ensure consistency with transformed string types.\n\n---\n\n`1266-1266`: **`startsWith` inferring output case.**\nThis extension elegantly supports generic string transformations.\n\n---\n\n`1274-1274`: **`endsWith` inferring output case.**\nContinues the consistent approach of tailoring checks to the string’s transformation.\n\n---\n\n`1298-1302`: **Generic `length` method for string schemas.**\nTying the length requirement into the output type is an excellent way to reflect exact lengths in the type system.\n\n---\n\n`1317-1317`: **`trim` check for string schemas.**\nStraightforward approach to strip whitespace in place. Ensure users are aware of the in-place data modification.\n\n---\n\n`1321-1321`: **`toLowerCase` returning `Lowercase<Output>`.**\nAccurately reflects the lowered case in the output type.\n\n---\n\n`1325-1325`: **`toUpperCase` returning `Uppercase<Output>`.**\nParallel approach to `toLowerCase`, preserving type correctness.\n\n---\n\n`2466-2469`: **Generic `min` method for arrays.**\nStrongly typed approach to constraining minimum length is well-implemented.\n\n---\n\n`2476-2479`: **Generic `max` method for arrays.**\nMatches the `min` pattern, maintaining consistent constraints.\n\n---\n\n`2486-2489`: **Exact `length` for arrays.**\nHelps define strictly sized arrays, a nice feature for robust schemas.\n\n---\n\n`2496-2496`: **`nonempty` for arrays.**\nConvenient helper for quickly ensuring at least one element is present.\n\n---\n\n`2515-2519`: **New array type aliases: `ZodNonEmptyArray` and `ZodExactArray`.**\nThese aliases neatly capture specific cardinalities for array validations.\n\n---\n\n`3160-3160`: **Ensuring union type correctness via `_assertParsedDataType`.**\nCalled after validating each subtype. This is consistent with the pattern used.\n\n---\n\n`3362-3362`: **Ensuring discriminated union type correctness.**\nThis explicit assertion aligns with the prior type checks on the discriminator field.\n\n---\n\n`3535-3535`: **Intersection type assertion.**\nMethodically placed after verifying left and right schemas in `_parse` logic.\n\n---\n\n`3663-3663`: **Tuple type assertion.**\nSimilarly consistent with the pattern of asserting post-parse.\n\n---\n\n`3788-3788`: **Object schema assertion.**\nMaintaining uniform usage of `_assertParsedDataType` across Zod data structures.\n\n---\n\n`3888-3888`: **Map type assertion.**\nChecks the parse context thoroughly before finalizing.\n\n---\n\n`3893-3899`: **Parsing key-value pairs for `ZodMap`.**\nNicely splits out key and value parsing with distinct lazy paths for clarity.\n\n---\n\n`3985-3985`: **Set type assertion.**\nConsistent with the rest of the library’s design, ensuring type correctness.\n\n---\n\n`4029-4031`: **Mapping set elements with spread and `_parse`.**\nEffective approach for iterating sets while preserving the parse context for each element.\n\n---\n\n`4124-4124`: **Function type assertion.**\nPermits refined type inference after verifying the input is a function.\n\n---\n\n`4303-4303`: **Lazy type assertion.**\nEnsures the lazily-evaluated schema is properly validated at runtime.\n\n---\n\n`4343-4343`: **Literal type assertion.**\nStraightforward check, verifying exact literal match and refining the type.\n\n---\n\n`4434-4434`: **Enum type assertion.**\nHelpful for guaranteeing the input matches one of the enumerated string options.\n\n---\n\n`4621-4621`: **Promise type assertion.**\nChecks that data is a genuine `Promise`, then awaits it to validate the resolved value.\n\n---\n\n`4629-4629`: **Parsing a promise via `.then` chain.**\nImplementation is clean, returning a validated async result.\n\n---\n\n`4705-4705`: **Effects type assertion.**\nEnsures that the data meets the underlying schema’s checks before applying transformations or refinements.\n\n---\n\n`4883-4883`: **Optional type assertion.**\nAppropriately short-circuits when data is `undefined` before continuing validation.\n\n---\n\n`4928-4928`: **Nullable type assertion.**\nLikewise short-circuits for `null`, closely paralleling the optional logic.\n\n---\n\n`5033-5033`: **Catch type assertion.**\nSeparates the context to avoid polluting the main parse flow with errors, then reasserts type correctness.\n\n---\n\n`5118-5118`: **NaN type assertion.**\nA specialized check distinguishing `NaN` from typical numeric values.\n\n---\n\n`5155-5155`: **Branded type assertion.**\nUseful for combining a standard schema with brand metadata at the type level.\n\n---\n\n`5190-5190`: **Pipeline type assertion.**\nEnsures the data from the “in” side is valid before passing to the “out” schema, with consistent usage of `_assertParsedDataType`.\n\n---\n\n`5286-5286`: **Readonly type assertion.**\nCompletes the final step by freezing the data after successful validation.\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4013#pullrequestreview-2652564300",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4013",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4013#pullrequestreview-2652564300"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4013"
            }
          },
          "submitted_at": "2025-03-01T19:19:07Z",
          "commit_id": "07e34bf6fde73a8b6d1669d31ad51c5d3146af85"
        },
        {
          "id": 2652570229,
          "node_id": "PRR_kwDODqUnoM6eGwJ1",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "**Actionable comments posted: 0**\n\n<details>\n<summary>🧹 Nitpick comments (5)</summary><blockquote>\n\n<details>\n<summary>deno/lib/README.md (1)</summary><blockquote>\n\n`1638-1645`: **Documentation Clarity & Grammar for `.length()` Method**\n\nThe new section for the `.length()` method is very clear: it explains that using `.length()` converts an array schema into a tuple type of exactly the specified length. The provided code snippet neatly demonstrates how a 5‑item array becomes a tuple with an enforced length of 5. \n\n**Suggestion:** Change “a exact‑length array” to “an exact‑length array” to improve grammatical correctness (since “exact” starts with a vowel sound). \n\n```diff\n-To enforce a exact-length array, use `.length()`.\n+To enforce an exact-length array, use `.length()`.\n```\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[misspelling] ~1640-~1640: Use “an” instead of ‘a’ if the following word starts with a vowel sound, e.g. ‘an article’, ‘an hour’.\nContext: ...y!\", }); ```  ### `.length`  To enforce a exact-length array, use `.length()`. Th...\n\n(EN_A_VS_AN)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>README.md (1)</summary><blockquote>\n\n`1683-1684`: **Minor Stylistic Suggestion for Special Numeric Values**\n\nThe warning that `NaN`, `Infinity`, and `-Infinity` cannot be checked is valuable. For clarity and style, consider adding a comma after “Infinity” to improve readability:\n\n```diff\n-> ⚠️ `NaN`, `Infinity` and `-Infinity` cannot be checked because in TypeScript they are of type `number`.\n+> ⚠️ `NaN`, `Infinity`, and `-Infinity` cannot be checked because in TypeScript they are of type `number`.\n```\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[typographical] ~1684-~1684: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...-Infinity` cannot be checked because in TypeScript they are of type `number`.  <br/>  ## T...\n\n(IN_NNP_COMMA)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>deno/lib/types.ts (3)</summary><blockquote>\n\n`4550-4551`: **Double _assertParsedDataType call is redundant**\n\nThere are two consecutive calls to _assertParsedDataType with different parameters (input and ctx).\n\n\nSince you're already calling the method with input on line 4550, the second call with ctx on line 4551 is redundant and could be removed:\n\n```diff\n-    this._assertParsedDataType(input);\n-    this._assertParsedDataType(ctx);\n+    this._assertParsedDataType(input);\n```\n\n---\n\n`4567-4567`: **Consider consistent return style**\n\nThe ZodNativeEnum._parse method returns OK(input.data) directly while most other implementations define the value in a variable first.\n\n\nFor consistency with other parsers, consider using the same style as most other implementations:\n\n```diff\n-    return OK(input.data);\n+    return { status: \"valid\", value: input.data };\n```\n\n---\n\n`4629-4629`: **Arrow function unnecessary wrapping parameter**\n\nThe arrow function in ZodPromise._parse unnecessarily wraps the `promisified.then` parameter.\n\n\nThe arrow function syntax could be simplified:\n\n```diff\n-      promisified.then((data) => {\n+      promisified.then(data => {\n```\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>📜 Review details</summary>\n\n**Configuration used: CodeRabbit UI**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>📥 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 07e34bf6fde73a8b6d1669d31ad51c5d3146af85 and 4ddf845bd3cfff7d5310e26cc3d3159a9260d8b8.\n\n</details>\n\n<details>\n<summary>📒 Files selected for processing (4)</summary>\n\n* `README.md` (1 hunks)\n* `deno/lib/README.md` (1 hunks)\n* `deno/lib/types.ts` (51 hunks)\n* `src/types.ts` (51 hunks)\n\n</details>\n\n<details>\n<summary>🧰 Additional context used</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n<details>\n<summary>deno/lib/README.md</summary>\n\n[misspelling] ~1640-~1640: Use “an” instead of ‘a’ if the following word starts with a vowel sound, e.g. ‘an article’, ‘an hour’.\nContext: ...y!\", }); ```  ### `.length`  To enforce a exact-length array, use `.length()`. Th...\n\n(EN_A_VS_AN)\n\n---\n\n[typographical] ~1684-~1684: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...-Infinity` cannot be checked because in TypeScript they are of type `number`.  <br/>  ## T...\n\n(IN_NNP_COMMA)\n\n</details>\n<details>\n<summary>README.md</summary>\n\n[misspelling] ~1640-~1640: Use “an” instead of ‘a’ if the following word starts with a vowel sound, e.g. ‘an article’, ‘an hour’.\nContext: ...y!\", }); ```  ### `.length`  To enforce a exact-length array, use `.length()`. Th...\n\n(EN_A_VS_AN)\n\n---\n\n[typographical] ~1684-~1684: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...-Infinity` cannot be checked because in TypeScript they are of type `number`.  <br/>  ## T...\n\n(IN_NNP_COMMA)\n\n</details>\n\n</details>\n\n</details>\n\n<details>\n<summary>🔇 Additional comments (42)</summary><blockquote>\n\n<details>\n<summary>deno/lib/README.md (2)</summary>\n\n`1647-1654`: **.min() and .max() Documentation Review**\n\nThe documentation for the `.min()` and `.max()` methods is concise and clear. It shows how to constrain arrays to have at least or at most a given number of items without changing the inferred type, which contrasts nicely with the tuple effect of `.length()`.\n\n---\n\n`1658-1685`: **TypeScript Limitations Section – Excellent Detail with Minor Observations**\n\nThis new “TypeScript Limitations” section is very useful. It clearly explains:\n- How passing a literal (e.g. 101) results in a tuple type, while a generic number argument loses tuple inference.\n- That negative numbers are disallowed for `.length()`, `.min()`, and `.max()` to avoid runtime errors.\n- The note on `NaN`, `Infinity`, and `-Infinity` is also valuable for setting the developer’s expectations.\n\nThe examples are well chosen and readable. One minor suggestion: if desired, you might consider a very brief summary statement at the end of this section to reiterate the safe usage practices—though it is optional given the thoroughness already present.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[typographical] ~1684-~1684: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...-Infinity` cannot be checked because in TypeScript they are of type `number`.  <br/>  ## T...\n\n(IN_NNP_COMMA)\n\n</details>\n\n</details>\n\n</details>\n<details>\n<summary>README.md (5)</summary>\n\n`1638-1645`: **Improve Article Usage & Clarity in `.length()` Section**\n\nThe documentation for the `.length()` method is very clear and the code snippet nicely illustrates that using `.length(5)` enforces an exact tuple type. However, note that the phrase “a exact‐length array” should use “an” rather than “a” since “exact” begins with a vowel sound.\n\n```diff\n-To enforce a exact-length array, use `.length()`.\n+To enforce an exact-length array, use `.length()`.\n```\n\n[refactor_suggestion_nitpick]\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[misspelling] ~1640-~1640: Use “an” instead of ‘a’ if the following word starts with a vowel sound, e.g. ‘an article’, ‘an hour’.\nContext: ...y!\", }); ```  ### `.length`  To enforce a exact-length array, use `.length()`. Th...\n\n(EN_A_VS_AN)\n\n</details>\n\n</details>\n\n---\n\n`1647-1651`: **Clear Explanation for `.min/.max` Methods**\n\nThe new “.min/.max” section clearly distinguishes these methods from `.length()` by explicitly noting that they do not alter the inferred type. The provided code snippets are concise and easy to follow.\n\n---\n\n`1658-1665`: **Detailed Explanation of Tuple Inference Limits**\n\nThe TypeScript Limitations section effectively explains that for `.length()`, the maximum inferred tuple length is capped at 100 and demonstrates what happens when a larger number is passed. This is very useful for users familiar with TypeScript’s limitations.\n\n---\n\n`1668-1673`: **Document Behavior When Using Generic Numbers for `.length()`**\n\nThe explanation making users aware that passing a generic `number` to `.length()` results in a simple array (losing tuple inference) is clear and helpful. Consider emphasizing this edge case so developers know to use explicit literals when tuple types are desired.\n\n---\n\n`1675-1680`: **Clarify Disallowing Negative Values**\n\nThe note and code example demonstrating that negative numbers are disallowed (with an appropriate TypeScript error) provide useful safety information. This addition will help prevent potential runtime errors.\n\n</details>\n<details>\n<summary>deno/lib/types.ts (14)</summary>\n\n`191-216`: **Excellent addition of type assertion helper!**\n\nThis protected method provides a clean way to narrow input/context data types after validations. The no-op implementation properly preserves runtime performance while providing valuable TypeScript type narrowing.\n\n\nThis is a sophisticated TypeScript technique that leverages TypeScript's type assertion capabilities without adding runtime overhead. It will help prevent type errors in downstream code that uses the parsed values.\n\n---\n\n`800-804`: **Great enhancement with generic ZodString class!**\n\nMaking `ZodString` generic over its output type is a significant improvement that allows for better type inference with string transformations.\n\n\nThis change enables the type system to track string case transformations and length constraints, which will improve developer experience when chaining string operations.\n\n---\n\n`805-821`: **Proper implementation of _assertParsedDataType in ZodString._parse**\n\nGood implementation of the new type assertion method to narrow the input data type after validation.\n\n---\n\n`1254-1257`: **Improved type safety for string operations with inferCase**\n\nUsing `util.inferCase<Output>` instead of just `string` ensures that case transformations are properly typed.\n\n\nThis will maintain case information when performing operations like `.includes()`, ensuring that the type system knows about any prior case transformations.\n\n---\n\n`1266-1266`: **Type-safe string comparison with inferCase**\n\nThe `startsWith` method now correctly uses the inferred case type.\n\n---\n\n`1274-1274`: **Type-safe string comparison with inferCase**\n\nThe `endsWith` method now correctly uses the inferred case type.\n\n---\n\n`1298-1302`: **Enhanced length method with string length constraint**\n\nThe length method now properly returns a type that includes the exact length constraint.\n\n\nThis will allow TypeScript to know the exact length of the string in the type system, improving type safety.\n\n---\n\n`1317-1318`: **Maintain generics with trim operation**\n\nThe trim operation properly maintains the output type.\n\n---\n\n`1321-1322`: **Properly typed case transformation**\n\nThe toLowerCase method now correctly returns `Lowercase<Output>` instead of just string.\n\n\nThis change enables the type system to track the lowercase transformation in the type.\n\n---\n\n`1325-1326`: **Properly typed case transformation**\n\nThe toUpperCase method now correctly returns `Uppercase<Output>` instead of just string.\n\n\nThis change enables the type system to track the uppercase transformation in the type.\n\n---\n\n`2354-2358`: **Enhanced array cardinality with exact length support**\n\nAdding the \"exact\" cardinality type extends ZodArray's capabilities to handle fixed-length arrays with proper typing.\n\n\nThis change enables the creation of arrays with exact length constraints that will be reflected in the TypeScript types, similar to tuples.\n\n---\n\n`2361-2366`: **Type-safe exact array length output**\n\nThe arrayOutputType now correctly handles the \"exact\" cardinality with proper tuple typing.\n\n\nThis ensures that arrays with exact length constraints are properly typed as tuples of that specific length.\n\n---\n\n`2486-2494`: **Enhanced array length method with tuple type**\n\nThe length method now returns a `ZodExactArray` type with the exact length constraint.\n\n\nThis allows for creating exact-length arrays that are typed as tuples in TypeScript, providing better type safety.\n\n---\n\n`2516-2519`: **New ZodExactArray type for fixed-length arrays**\n\nThe new ZodExactArray type provides a clean way to represent arrays with exact length constraints.\n\n\nThis type specialization helps maintain the distinction between regular arrays and fixed-length arrays in the type system.\n\n</details>\n<details>\n<summary>src/types.ts (21)</summary>\n\n`191-217`: **Improve clarity with usage examples.**\n\nThis block of JSDoc and overload declarations for `_assertParsedDataType` is clear about its purpose of narrowing types at compile time. Consider including a short code snippet in the documentation to illustrate how developers can use it in `_parse` methods, which would make it even more intuitive.\n\n---\n\n`800-804`: **Generic parameter for ZodString.**\n\nIntroducing `Output extends string = string` to ZodString is a solid enhancement, helping produce refined string types for case transformations and other checks.\n\n---\n\n`820-820`: **Asserting input data type in ZodString parse method.**\n\nCalling `_assertParsedDataType<string>(input)` consistently enforces compile-time type narrowing for string parsing without affecting runtime behavior.\n\n---\n\n`978-978`: **Check validity of position when calling .includes.**\n\n`includes(check.value, check.position)` works as intended, but ensure `check.position` is an integer and inform users how negative or large positions behave.\n\n---\n\n`992-992`: **startsWith usage looks correct.**\n\nNo logical issues spotted. This change properly uses `startsWith(check.value)`.\n\n---\n\n`1002-1002`: **endsWith usage looks correct.**\n\nNo logical issues spotted. This change properly uses `endsWith(check.value)`.\n\n---\n\n`1112-1112`: **Returning parse result in ZodString.**\n\nReturning `{ status: status.value, value: input.data }` aligns with the parsing flow.\n\n---\n\n`1127-1128`: **Introducing a generic parameter in _addCheck.**\n\nAllowing `<CheckOutput extends string = Output>` enables fine-grained transformations for future checks without breaking existing usage.\n\n---\n\n`1254-1257`: **Refined signature for .includes.**\n\nAccepting `util.inferCase<Output>` for the search string and an optional position is consistent with the rest of the case-centric API.\n\n---\n\n`1266-1266`: **Refined signature for .startsWith.**\n\nUsing `util.inferCase<Output>` for the prefix is consistent with the library’s new case inference design.\n\n---\n\n`1274-1274`: **Refined signature for .endsWith.**\n\nSimilarly, adopting `util.inferCase<Output>` for the suffix is consistent and maintains type safety.\n\n---\n\n`1298-1301`: **Generic .length method to encode string length.**\n\nThis change helps encode a compile-time string length constraint (`Output & { length: N }`). It’s a neat approach for advanced type inference.\n\n---\n\n`1317-1317`: **.trim check addition.**\n\nSimple addition that calls `_addCheck({ kind: \"trim\" })`. No functional issues identified.\n\n---\n\n`1321-1321`: **.toLowerCase returning Lowercase<Output>.**\n\nThis new approach ensures type-level knowledge that the resulting string is lowercase.\n\n---\n\n`1325-1325`: **.toUpperCase returning Uppercase<Output>.**\n\nLikewise, returning `Uppercase<Output>` helps advanced type inference for uppercase transformations.\n\n---\n\n`1460-1460`: **Type narrowing for ZodNumber.**\n\nUsing `_assertParsedDataType(input)` here is consistent with the new pattern for numeric parsing.\n\n---\n\n`1744-1744`: **Type narrowing for ZodBigInt.**\n\nSimilar to ZodNumber, this ensures the parse path is typed as bigint.\n\n---\n\n`1957-1957`: **Type narrowing for ZodBoolean.**\n\nNo concerns; consistent usage in boolean parsing.\n\n---\n\n`2191-2191`: **Type assertion within ZodNull parse.**\n\nEnsures the parse path is typed as `null`; consistent with the approach in other type classes.\n\n---\n\n`2211-2211`: **Redundant but harmless parse assertion in ZodNull.**\n\nA second call to `_assertParsedDataType(input)` is benign. If not required, consider removing to avoid confusion, but it won’t harm runtime.\n\n---\n\n`2262-2262`: **Type narrowing for ZodUnknown.**\n\nNo issues spotted; consistent with the library’s new pattern.\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4013#pullrequestreview-2652570229",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4013",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4013#pullrequestreview-2652570229"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4013"
            }
          },
          "submitted_at": "2025-03-01T19:59:07Z",
          "commit_id": "4ddf845bd3cfff7d5310e26cc3d3159a9260d8b8"
        },
        {
          "id": 2652571474,
          "node_id": "PRR_kwDODqUnoM6eGwdS",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "**Actionable comments posted: 0**\n\n<details>\n<summary>🧹 Nitpick comments (4)</summary><blockquote>\n\n<details>\n<summary>deno/lib/README.md (1)</summary><blockquote>\n\n`1656-1676`: **Detailed Explanation of TypeScript Limitations and Negative Value Handling**  \nThe \"TypeScript Limitations\" block is thorough and helpful. It clearly documents the inherent limitations with tuple inference (including the maximum tuple length of 100), the loss of tuple inference when a generic number is passed, and the decision to disallow negative values for `.length()`, `.min()`, and `.max()`. The code examples are well chosen to demonstrate these points.  \n\n*Minor nitpick:* While the technical content is excellent, consider reviewing the phrasing for any potential stylistic improvements (for example, ensuring that introductory phrases are punctuated consistently for optimal readability).\n\n</blockquote></details>\n<details>\n<summary>README.md (1)</summary><blockquote>\n\n`1656-1675`: **TypeScript Limitations Section – Informative with Minor Punctuation Suggestion**\n\nThe \"TypeScript Limitations\" section effectively documents critical constraints:\n- It clearly explains that `.length()` creates a tuple type (up to 100 elements) and that using a generic number parameter results in a simple array.\n- The examples handling negative values and the resulting TypeScript errors are very useful for users to anticipate potential issues.\n\n**Nitpick:** In the warning message, consider adding an Oxford comma for clarity. For example:\n\n```diff\n- > ⚠️ `NaN`, `Infinity` and `-Infinity` cannot be checked because in TypeScript they are of type `number`.\n+ > ⚠️ `NaN`, `Infinity`, and `-Infinity` cannot be checked because in TypeScript they are of type `number`.\n```\n\nThis minor change improves readability and conforms to common style guidelines.\n\n</blockquote></details>\n<details>\n<summary>deno/lib/types.ts (2)</summary><blockquote>\n\n`210-217`: **Introduce runtime clarifications for type-narrowing.**  \nThe `_assertParsedDataType` method serves as a no-op assertion for TypeScript but provides no runtime checks. If you require actual runtime validation, consider supplementing this with real checks or clarifying its TS-only usage.\n\n---\n\n`1127-1128`: **Cautious generic override in `_addCheck`.**  \nInferring `CheckOutput` is flexible, but ensure it doesn't inadvertently widen or conflict with the pre-declared `Output` type.\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>📜 Review details</summary>\n\n**Configuration used: CodeRabbit UI**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>📥 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 4ddf845bd3cfff7d5310e26cc3d3159a9260d8b8 and 4890cf9a913863cc5470dfb1007dcaabbf9c3665.\n\n</details>\n\n<details>\n<summary>📒 Files selected for processing (4)</summary>\n\n* `README.md` (1 hunks)\n* `deno/lib/README.md` (1 hunks)\n* `deno/lib/types.ts` (51 hunks)\n* `src/types.ts` (51 hunks)\n\n</details>\n\n<details>\n<summary>🧰 Additional context used</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n<details>\n<summary>README.md</summary>\n\n[typographical] ~1684-~1684: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...-Infinity` cannot be checked because in TypeScript they are of type `number`.  <br/>  ## T...\n\n(IN_NNP_COMMA)\n\n</details>\n<details>\n<summary>deno/lib/README.md</summary>\n\n[typographical] ~1684-~1684: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...-Infinity` cannot be checked because in TypeScript they are of type `number`.  <br/>  ## T...\n\n(IN_NNP_COMMA)\n\n</details>\n\n</details>\n\n</details>\n\n<details>\n<summary>🔇 Additional comments (50)</summary><blockquote>\n\n<details>\n<summary>deno/lib/README.md (2)</summary>\n\n`1638-1645`: **Clear and Concise Explanation of `.length()`**  \nThe new documentation for the `.length()` method is clear and informative. It succinctly explains that using `.length()` on an array schema forces the array to have an exact number of items and even shows the resulting inferred tuple type. This example effectively highlights the added type-safety benefit.\n\n---\n\n`1647-1654`: **Well-Documented `.min()` and `.max()` Behavior**  \nThe updated section on `.min()` and `.max()` clearly distinguishes these methods from `.length()` and `.nonempty()` by noting that their application does not alter the inferred type. The provided code examples are straightforward and serve to illustrate the expected behavior.\n\n</details>\n<details>\n<summary>README.md (2)</summary>\n\n`1638-1645`: **.length Section – Clear Explanation & Concise Code Example**\n\nThe new section explaining the `.length()` method is clear and concise. The text explains that using `.length()` enforces an exact-length array and changes the inferred type into a tuple. The code example is well chosen to illustrate this behavior.\n\n---\n\n`1646-1654`: **.min/.max Section – Effective and Straightforward**\n\nThis section neatly explains how to use `.min()` and `.max()` for array length constraints without altering the inferred type. The code snippet is straightforward and demonstrates the intended usage. Overall, it meets the objective of clarifying the behavior of these methods.\n\n</details>\n<details>\n<summary>deno/lib/types.ts (18)</summary>\n\n`191-191`: **Doc comment clarity.**  \nThis updated JSDoc header accurately captures the purpose of the new type-narrowing helper.\n\n---\n\n`800-804`: **Generic output parameter in ZodString.**  \nAdopting a generic `<Output extends string = string>` parameter broadens type inference without breaking existing usage.\n\n---\n\n`820-821`: **Type assertion for string inputs.**  \nThis confirms that `input.data` is treated as a string type in TypeScript, though it remains a no-op at runtime.\n\n---\n\n`978-978`: **Safe usage of `includes`.**  \nNo issues spotted. The precedential type assertion averts potential type errors in `includes()`.\n\n---\n\n`992-992`: **Safe usage of `startsWith`.**  \nCalling `startsWith` is straightforward here; no further concerns.\n\n---\n\n`1002-1002`: **Safe usage of `endsWith`.**  \nThis mirrors the logic of `startsWith` without evident concerns.\n\n---\n\n`1112-1112`: **Return statement correctness.**  \nReturning both parse status and the unmodified `input.data` looks consistent with the parsing flow.\n\n---\n\n`1254-1257`: **Case inference in `.includes()`.**  \nAccepting `util.inferCase<Output>` for the value parameter enhances type safety and alignment with transformations.\n\n---\n\n`1266-1266`: **Case inference in `.startsWith()`.**  \nMatches the `.includes()` approach for type-sound case handling.\n\n---\n\n`1282-1282`: **Case inference in `.endsWith()`.**  \nSeamless continuation of the new pattern for advanced type inference.\n\n---\n\n`1298-1302`: **Parametric `.length()`.**  \nThis generic returns an intersection type (`Output & { length: StringLength }`) for more precise type inference, which is a neat approach.\n\n---\n\n`1317-1317`: **Trim check.**  \nPerforming a `.trim()` with an added check is straightforward and consistent.\n\n---\n\n`1321-1321`: **Type-narrowing for `toLowerCase()`.**  \nThis properly narrows the string output to `Lowercase<Output>`.\n\n---\n\n`1325-1325`: **Type-narrowing for `toUpperCase()`.**  \nSimilarly extends type inference to `Uppercase<Output>`.\n\n---\n\n`1744-1744`: **Repeated `_assertParsedDataType` usage.**  \nNo further concerns beyond earlier comments on this no-op TS assertion.\n\n---\n\n`1957-1957`: **Repeated `_assertParsedDataType` usage.**  \nNo further concerns beyond earlier comments on this no-op TS assertion.\n\n---\n\n`2211-2211`: **Repeated `_assertParsedDataType` usage.**  \nNo further concerns beyond earlier comments on this no-op TS assertion.\n\n---\n\n`2262-2262`: **Repeated `_assertParsedDataType` usage.**  \nNo further concerns beyond earlier comments on this no-op TS assertion.\n\n</details>\n<details>\n<summary>src/types.ts (28)</summary>\n\n`191-217`: **Well-documented type-narrowing utility**  \nThis new `_assertParsedDataType` method introduction and its accompanying doc comment thoroughly explain its purpose for narrowing input data types from `any`. The overloads for `ParseInput` and `ParseContext` look consistent.\n\n---\n\n`800-805`: **Generic output type for ZodString**  \nAllowing `ZodString` to be generic over `Output extends string` is a valuable enhancement for typed string transformations (e.g., case conversions). This approach cleanly aligns with the PR’s objectives.\n\n---\n\n`820-820`: **Proper usage of `_assertParsedDataType`**  \nEnsuring the call to `_assertParsedDataType<string>(input)` after verifying `parsedType === ZodParsedType.string` solidifies type correctness at the TS level.\n\n---\n\n`978-978`: **Verify string containment**  \nThe new `includes` check logically uses `input.data.includes(check.value, check.position)`. Since `ZodParsedType.string` is already enforced, this is safe.\n\n---\n\n`992-992`: **Starts-with validation**  \nThe updated startsWith check properly uses `input.data.startsWith(check.value)`. Looks good.\n\n---\n\n`1002-1002`: **Ends-with validation**  \nSimilar to the startsWith approach, this is a straightforward endsWith validation.\n\n---\n\n`1112-1112`: **Returning final string result**  \nReturning `{ status: status.value, value: input.data }` ensures the parse result is correctly propagated as valid output.\n\n---\n\n`1127-1128`: **Chaining checks with type refinement**  \nThe `_addCheck<CheckOutput extends string = Output>` method returns a new `ZodString<CheckOutput>`, allowing the schema to refine the inferred output type.\n\n---\n\n`1254-1257`: **Enhanced `.includes()` signature**  \nAccepting `value: util.inferCase<Output>` helps maintain consistent casing in includes checks.\n\n---\n\n`1266-1266`: **Enhanced `.startsWith()` signature**  \nExpanding `startsWith` to accept `util.inferCase<Output>` further strengthens type correctness.\n\n---\n\n`1274-1274`: **Enhanced `.endsWith()` signature**  \nSimilarly, `endsWith` now infers the correct case from the generic `Output`.\n\n---\n\n`1298-1302`: **Typed `.length()` method**  \nThis implementation captures the exact length at the type level, returning `Output & { length: StringLength }`. It’s a powerful approach for structural string constraints.\n\n---\n\n`1317-1317`: **Trim check**  \nThe simple trim check is logically placed and well-structured.\n\n---\n\n`1321-1321`: **Lowercase transform**  \n`toLowerCase()` returning `Lowercase<Output>` ensures strong TypeScript guarantees post-transformation.\n\n---\n\n`1325-1325`: **Uppercase transform**  \n`toUpperCase()` returning `Uppercase<Output>` consistently mirrors the `toLowerCase()` approach.\n\n---\n\n`2354-2357`: **Introduction of \"exact\" array cardinality**  \nThe new `\"exact\"` option in `ArrayCardinality` and related `ExactArrayLength` type paves the way for perfectly sized arrays.\n\n---\n\n`2360-2361`: **Additional parameters in `arrayOutputType`**  \nExtending array output types with generics for cardinality and exact length matches the new design.\n\n---\n\n`2370-2371`: **ZodArray extended generic signature**  \n`ZodArray<T, Cardinality, ArrayLength>` elegantly encapsulates advanced array length constraints.\n\n---\n\n`2395-2395`: **Ensuring correct array type**  \n`this._assertParsedDataType<T[]>(ctx);` helps confirm type-narrowing after verifying `ctx.parsedType === ZodParsedType.array`.\n\n---\n\n`2466-2469`: **Generic `.min()`**  \n`min<MinLength extends number>` is consistent with the new typed approach for array lengths.\n\n---\n\n`2476-2479`: **Generic `.max()`**  \nSimilarly, `max<MaxLength extends number>` aligns with typed array constraints.\n\n---\n\n`2486-2489`: **Exact `.length()`**  \nExposing a specialized `ZodExactArray` for fixed-length arrays is a clean solution for precise cardinalities.\n\n---\n\n`2496-2496`: **`.nonempty()` usage**  \nInternally delegating to `.min(1)` is a neat, DRY approach.\n\n---\n\n`2515-2519`: **Distinct array types**  \n`ZodNonEmptyArray` and `ZodExactArray` provide a clear naming scheme for special cardinalities.\n\n---\n\n`3894-3901`: **Key–value pairing with lazy path**  \nMapping `[key, value]` to `ParseInputLazyPath` for each entry ensures detailed context in `ZodMap`.\n\n---\n\n`4629-4629`: **Promise resolution chain**  \nWrapping `promisified.then` with the subsequent parse logic is consistent with `ZodPromise` usage.\n\n---\n\n`5118-5118`: **Confirming NaN type**  \nCalling `this._assertParsedDataType(input);` for `ZodNaN` cements the type guarantee in the parse route.\n\n---\n\n`5286-5286`: **Read-only parse**  \nThe `_assertParsedDataType` usage in `ZodReadonly` helps ensure the internal type matches expectations before freezing.\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4013#pullrequestreview-2652571474",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4013",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4013#pullrequestreview-2652571474"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4013"
            }
          },
          "submitted_at": "2025-03-01T20:07:06Z",
          "commit_id": "4890cf9a913863cc5470dfb1007dcaabbf9c3665"
        }
      ],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "netlify[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/13473?v=4"
          }
        }
      ],
      "review_comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        }
      ]
    },
    {
      "id": 2361460414,
      "number": 4009,
      "state": "closed",
      "created_at": "2025-02-27T07:37:19Z",
      "merged_at": "2025-02-27T07:38:19Z",
      "title": "Update feature",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 8,
      "deletions": 8,
      "changed_files": 2,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "netlify[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/13473?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2360830791,
      "number": 4008,
      "state": "closed",
      "created_at": "2025-02-26T22:33:12Z",
      "merged_at": "2025-02-26T22:33:17Z",
      "title": "Tweak feature layout",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 4,
      "deletions": 4,
      "changed_files": 2,
      "comments": 2,
      "review_comments": 0,
      "commits": 2,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "netlify[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/13473?v=4"
          }
        }
      ],
      "review_comment_list": []
    }
  ],
  "collected_at": "2025-07-18T09:28:48+09:00"
}