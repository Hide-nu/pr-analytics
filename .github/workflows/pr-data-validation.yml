name: PR Data Validation

on:
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".gitignore"
      - ".github/workflows/**" # ワークフロー変更では実行をスキップ
  push:
    branches: [main, develop]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".gitignore"
      - ".github/workflows/**"

env:
  NODE_VERSION: "20"
  # PR用の制限値（本番より厳しく）
  MAX_PR_VALIDATION_TIME_MINUTES: 15
  MAX_SERVER_START_TIME_SECONDS: 30

jobs:
  # 軽量チェックをまず実行（高速フィードバック）
  quick-validation:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    outputs:
      has-code-changes: ${{ steps.changes.outputs.has-code-changes }}
      has-data-changes: ${{ steps.changes.outputs.has-data-changes }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect Changes
        id: changes
        run: |
          echo "::group::Change Analysis"

          # 変更されたファイルの分析
          changed_files=$(git diff --name-only HEAD~1..HEAD)

          code_changes=$(echo "$changed_files" | grep -E '\.(ts|tsx|js|jsx|mjs)$' | wc -l)
          data_changes=$(echo "$changed_files" | grep -E '^data/' | wc -l)
          config_changes=$(echo "$changed_files" | grep -E '\.(json|yml|yaml)$' | wc -l)

          echo "📊 Change Summary:"
          echo "- Code files: $code_changes"
          echo "- Data files: $data_changes"
          echo "- Config files: $config_changes"

          # GitHub outputsに設定
          echo "has-code-changes=$([[ $code_changes -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "has-data-changes=$([[ $data_changes -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

          echo "::endgroup::"

      - name: 🔒 Security Quick Scan
        run: |
          echo "::group::Security Pre-checks"

          # 基本的なセキュリティパターンチェック
          if git diff --name-only HEAD~1..HEAD | grep -E '\.(env|key|pem|p12)$'; then
            echo "::error::Potential secret files detected"
            exit 1
          fi

          # 大きなファイルのチェック
          if git diff --name-only HEAD~1..HEAD | xargs -I {} sh -c 'test -f "{}" && test $(stat -c%s "{}") -gt 10485760' 2>/dev/null; then
            echo "::warning::Large files detected (>10MB)"
          fi

          echo "::endgroup::"

  # メインの検証ジョブ（並列実行）
  validate:
    name: 🧪 Full Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quick-validation

    # 並行実行制御
    concurrency:
      group: pr-validation-${{ github.event.pull_request.number || github.sha }}
      cancel-in-progress: true

    permissions:
      contents: read
      actions: read
      pull-requests: write # コメント投稿のため
      repository-projects: read
      checks: write
      security-events: write

    strategy:
      fail-fast: false # 1つ失敗しても他を続行
      matrix:
        validation-type: [code-quality, functionality, data-integrity]

    steps:
      - name: 📋 Validation Start
        run: |
          echo "::notice title=Validation::Starting ${{ matrix.validation-type }} validation"
          echo "🚀 **Validation Details**"
          echo "- Type: ${{ matrix.validation-type }}"
          echo "- PR: #${{ github.event.pull_request.number || 'N/A' }}"
          echo "- SHA: ${{ github.sha }}"
          echo "- Actor: ${{ github.actor }}"

          # タイムスタンプ記録
          echo "VALIDATION_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # PRには深い履歴不要

      - name: 🔧 Setup Node.js Environment
        if: matrix.validation-type != 'data-integrity' || needs.quick-validation.outputs.has-code-changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: 📦 Install Dependencies
        if: matrix.validation-type != 'data-integrity' || needs.quick-validation.outputs.has-code-changes == 'true'
        run: |
          echo "::group::Dependencies"

          # キャッシュヒット率向上のため並列実行
          npm ci --prefer-offline --no-audit --progress=false

          echo "::endgroup::"

      # コード品質チェック（並列実行）
      - name: 🔍 Code Quality Checks
        if: matrix.validation-type == 'code-quality'
        run: |
          echo "::group::Code Quality Analysis"

          # 並列実行でパフォーマンス向上
          (
            echo "🔤 TypeScript Check..."
            npx tsc --noEmit --incremental
          ) &

          (
            echo "📏 ESLint Check..."
            npm run lint
          ) &

          (
            echo "🧪 Unit Tests..."
            npm run test:run
          ) &

          # すべてのジョブの完了を待機
          wait

          echo "✅ All code quality checks passed"
          echo "::endgroup::"

      # 機能テスト
      - name: 🔧 Load Repository Configuration
        id: config
        if: matrix.validation-type == 'functionality'
        run: |
          echo "::group::Repository Configuration"

          # 設定ファイルからリポジトリ設定を読み込み
          repositories_json=$(node scripts/config-loader.mjs json)
          echo "repositories_json=$repositories_json" >> $GITHUB_OUTPUT

          echo "🔍 Using repository configuration:"
          echo "$repositories_json" | jq '.'

          echo "::endgroup::"

      - name: 🚀 Functionality Validation
        if: matrix.validation-type == 'functionality'
        timeout-minutes: 10
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          TARGET_REPOSITORIES: ${{ steps.config.outputs.repositories_json }}
        run: |
          echo "::group::Build & Functionality Test"

          # ビルド実行
          echo "🏗️ Building application..."
          npm run build

          # 機能テスト用スクリプト
          cat > functionality-test.mjs << 'EOF'
          import { 
            checkEnvironment, 
            startServer, 
            waitForServer, 
            stopServer, 
            testApiEndpoints,
            setupProcessHandlers 
          } from './scripts/common-utils.mjs';

          let serverProcess = null;
          const testResults = {
            environment: false,
            serverStart: false,
            apiTest: false,
            duration: 0
          };

          const startTime = Date.now();

          try {
            // 環境チェック
            console.log('🔧 Environment check...');
            checkEnvironment();
            testResults.environment = true;
            
            // サーバー起動（PR用は短いタイムアウト）
            console.log('🌐 Starting server...');
            serverProcess = await startServer();
            setupProcessHandlers(serverProcess);
            testResults.serverStart = true;
            
            // サーバー応答待機
            await waitForServer(parseInt(process.env.MAX_SERVER_START_TIME_SECONDS) || 30);
            
            // 基本的なAPIテスト
            const repositories = JSON.parse(process.env.TARGET_REPOSITORIES || '[]');
            console.log('🧪 API functionality test...');
            testResults.apiTest = await testApiEndpoints(repositories);
            
            testResults.duration = Date.now() - startTime;
            
            // 結果の保存
            const fs = await import('fs');
            const report = {
              timestamp: new Date().toISOString(),
              testResults,
              performance: {
                duration: testResults.duration,
                withinSLA: testResults.duration < (parseInt(process.env.MAX_PR_VALIDATION_TIME_MINUTES) * 60 * 1000)
              }
            };
            
            fs.writeFileSync('functionality-report.json', JSON.stringify(report, null, 2));
            
            if (!testResults.apiTest) {
              throw new Error('API functionality test failed');
            }
            
            console.log(`✅ All functionality tests passed in ${testResults.duration}ms`);
            
          } catch (error) {
            console.error('❌ Functionality test failed:', error);
            process.exit(1);
          } finally {
            if (serverProcess) {
              stopServer(serverProcess);
            }
          }
          EOF

          node functionality-test.mjs
          rm functionality-test.mjs

          echo "::endgroup::"

      # データ整合性チェック
      - name: 🔍 Data Integrity Check
        if: matrix.validation-type == 'data-integrity'
        timeout-minutes: 5
        run: |
          echo "::group::Data Integrity Analysis"

          # データ整合性専用スクリプト
          cat > data-integrity-test.mjs << 'EOF'
          import { checkDataIntegrity } from './scripts/common-utils.mjs';

          try {
            console.log('🔍 Data integrity analysis...');
            const result = await checkDataIntegrity();
            
            console.log('📊 Data Integrity Summary:');
            console.log(`- Total files: ${result.totalFiles}`);
            console.log(`- Valid files: ${result.validFiles}`);
            console.log(`- Issues: ${result.issues.length}`);
            
            // 結果の保存
            const fs = await import('fs');
            const report = {
              timestamp: new Date().toISOString(),
              integrity: {
                totalFiles: result.totalFiles,
                validFiles: result.validFiles,
                issuesCount: result.issues.length,
                issues: result.issues.slice(0, 5),  // 最初の5件のみ
                healthStatus: result.issues.length === 0 ? 'HEALTHY' : 'ISSUES_DETECTED'
              }
            };
            
            fs.writeFileSync('data-integrity-report.json', JSON.stringify(report, null, 2));
            
            if (result.issues.length > 0) {
              console.log('⚠️ Data integrity issues detected:');
              result.issues.slice(0, 3).forEach((issue, i) => {
                console.log(`  ${i + 1}. ${issue}`);
              });
              
              if (result.issues.length > 3) {
                console.log(`  ... and ${result.issues.length - 3} more issues`);
              }
            } else {
              console.log('✅ Data integrity check passed');
            }
            
          } catch (error) {
            console.error('❌ Data integrity check failed:', error);
            process.exit(1);
          }
          EOF

          node data-integrity-test.mjs
          rm data-integrity-test.mjs

          echo "::endgroup::"

      - name: 📊 Validation Metrics
        if: always()
        run: |
          echo "::group::Metrics Collection"

          validation_duration=$(($(date +%s) - $VALIDATION_START_TIME))

          echo "📈 ${{ matrix.validation-type }} Validation Metrics:"
          echo "- Duration: ${validation_duration}s"
          echo "- Status: ${{ job.status }}"
          echo "- Max allowed: ${{ env.MAX_PR_VALIDATION_TIME_MINUTES }}m"

          # SLA遵守チェック
          max_seconds=$((MAX_PR_VALIDATION_TIME_MINUTES * 60))
          if [[ $validation_duration -le $max_seconds ]]; then
            echo "✅ SLA met (≤${max_seconds}s)"
          else
            echo "⚠️ SLA exceeded (>${max_seconds}s)"
          fi

          echo "::endgroup::"

      - name: 📤 Upload Validation Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-${{ matrix.validation-type }}-${{ github.run_id }}
          path: |
            *-report.json
            *.log
          retention-days: 30

  # 結果の集約とPRコメント
  aggregate-results:
    name: 📋 Aggregate Results
    runs-on: ubuntu-latest
    needs: [quick-validation, validate]
    if: always() && github.event_name == 'pull_request'
    timeout-minutes: 3

    permissions:
      pull-requests: write

    steps:
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 📊 Aggregate Validation Results
        id: aggregate
        run: |
          echo "::group::Results Aggregation"

          # 結果の集約
          declare -A results
          results[code-quality]="unknown"
          results[functionality]="unknown"
          results[data-integrity]="unknown"

          # アーティファクトから結果を読み取り
          for type in code-quality functionality data-integrity; do
            if [[ -f "artifacts/validation-${type}-${{ github.run_id }}/${type}-report.json" ]]; then
              results[$type]="success"
            elif [[ -f "artifacts/validation-${type}-${{ github.run_id }}/functionality-report.json" ]]; then
              results[$type]="success"
            elif [[ -f "artifacts/validation-${type}-${{ github.run_id }}/data-integrity-report.json" ]]; then
              results[$type]="success"
            else
              results[$type]="failed"
            fi
          done

          # ジョブステータスから判定
          code_quality_status="${{ needs.validate.result }}"
          if [[ "$code_quality_status" == "success" ]]; then
            results[code-quality]="success"
          elif [[ "$code_quality_status" == "failure" ]]; then
            results[code-quality]="failed"
          fi

          # 全体の成功/失敗判定
          overall_success=true
          for result in "${results[@]}"; do
            if [[ "$result" == "failed" ]]; then
              overall_success=false
              break
            fi
          done

          echo "overall_success=$overall_success" >> $GITHUB_OUTPUT
          echo "code_quality=${results[code-quality]}" >> $GITHUB_OUTPUT
          echo "functionality=${results[functionality]}" >> $GITHUB_OUTPUT
          echo "data_integrity=${results[data-integrity]}" >> $GITHUB_OUTPUT

          echo "📋 Aggregation Summary:"
          echo "- Code Quality: ${results[code-quality]}"
          echo "- Functionality: ${results[functionality]}"
          echo "- Data Integrity: ${results[data-integrity]}"
          echo "- Overall: $overall_success"

          echo "::endgroup::"

      - name: 💬 Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { owner, repo, number } = context.issue;
            const runId = context.runId;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;

            const overall = '${{ steps.aggregate.outputs.overall_success }}' === 'true';
            const codeQuality = '${{ steps.aggregate.outputs.code_quality }}';
            const functionality = '${{ steps.aggregate.outputs.functionality }}';
            const dataIntegrity = '${{ steps.aggregate.outputs.data_integrity }}';

            const statusIcon = overall ? '✅' : '❌';
            const statusText = overall ? '成功' : '失敗';

            const getStatusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failed': return '❌';
                default: return '⏳';
              }
            };

            // 詳細情報の収集
            let performanceInfo = '';
            let integrityInfo = '';

            try {
              // 機能テストの性能情報
              if (fs.existsSync('artifacts/validation-functionality-' + runId + '/functionality-report.json')) {
                const funcReport = JSON.parse(
                  fs.readFileSync('artifacts/validation-functionality-' + runId + '/functionality-report.json', 'utf8')
                );
                const duration = Math.round(funcReport.testResults.duration / 1000);
                const slaStatus = funcReport.performance.withinSLA ? '✅' : '⚠️';
                performanceInfo = `**性能:** ${duration}s ${slaStatus}`;
              }
              
              // データ整合性情報
              if (fs.existsSync('artifacts/validation-data-integrity-' + runId + '/data-integrity-report.json')) {
                const integrityReport = JSON.parse(
                  fs.readFileSync('artifacts/validation-data-integrity-' + runId + '/data-integrity-report.json', 'utf8')
                );
                const issues = integrityReport.integrity.issuesCount;
                const status = issues === 0 ? '健全' : `${issues}件の問題`;
                integrityInfo = `**データ整合性:** ${status}`;
              }
            } catch (error) {
              console.log('Could not read detailed reports:', error.message);
            }

            const body = `## ${statusIcon} PR検証結果: ${statusText}

            このPRに対する包括的な検証が完了しました。

            ### 📊 検証結果サマリー

            | 検証項目 | 結果 | 詳細 |
            |----------|------|------|
            | ${getStatusEmoji(codeQuality)} **コード品質** | ${codeQuality === 'success' ? 'PASS' : 'FAIL'} | TypeScript型チェック・ESLint・単体テスト |
            | ${getStatusEmoji(functionality)} **機能テスト** | ${functionality === 'success' ? 'PASS' : 'FAIL'} | API動作確認・ビルド検証 |
            | ${getStatusEmoji(dataIntegrity)} **データ整合性** | ${dataIntegrity === 'success' ? 'PASS' : 'FAIL'} | データファイル構造・内容検証 |

            ### 📈 性能・品質指標

            ${performanceInfo}  
            ${integrityInfo}

            ### 🔍 変更内容分析

            - **コード変更:** ${{ needs.quick-validation.outputs.has-code-changes === 'true' ? 'あり' : 'なし' }}
            - **データ変更:** ${{ needs.quick-validation.outputs.has-data-changes === 'true' ? 'あり' : 'なし' }}

            ${overall ? 
              '### ✅ 承認推奨\n\nすべての検証が正常に完了しました。このPRはマージ可能です。' :
              '### ⚠️ 修正が必要\n\n一部の検証で問題が検出されました。詳細を確認して修正してください。'
            }

            ---

            📋 **詳細レポート:** [ワークフロー実行結果](${runUrl})  
            🤖 **自動生成:** SRE品質監視システム
            `;

            // 既存のコメントを検索して更新 or 新規作成
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: number
            });

            const existingComment = comments.data.find(
              comment => comment.user.login === 'github-actions[bot]' && 
                         comment.body.includes('PR検証結果')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body
              });
              console.log('Updated existing PR comment');
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body
              });
              console.log('Created new PR comment');
            }

      - name: 🚨 Handle Critical Failures
        if: failure() || (steps.aggregate.outputs.overall_success == 'false' && github.event_name == 'push')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // pushイベントでの失敗時のみアラート
            if (context.eventName === 'push') {
              const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 [P1] ${context.ref.split('/').pop()}ブランチの検証失敗`,
                body: `## 重要ブランチでの検証失敗
                
                **ブランチ:** ${context.ref}
                **コミット:** ${context.sha}
                **実行者:** ${context.actor}
                **タイムスタンプ:** ${new Date().toISOString()}
                
                ### 失敗した検証
                
                - コード品質: ${{ steps.aggregate.outputs.code_quality }}
                - 機能テスト: ${{ steps.aggregate.outputs.functionality }}
                - データ整合性: ${{ steps.aggregate.outputs.data_integrity }}
                
                ### 対応が必要
                
                1. ワークフロー実行結果を確認
                2. 失敗原因を特定・修正
                3. 必要に応じてホットフィックス作成
                
                **詳細:** [ワークフロー実行](${runUrl})
                `,
                labels: ['bug', 'ci-failure', 'priority-high', 'sre-alert']
              });
            }

  # セキュリティスキャン（独立実行）
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    permissions:
      security-events: write
      contents: read

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Dependency Security Scan
        run: |
          echo "::group::Security Analysis"

          # セキュリティ監査（高度なチェック）
          npm audit --audit-level=moderate --json > audit-results.json || true

          # 結果の分析
          if [[ -s audit-results.json ]]; then
            echo "🔍 Security vulnerabilities detected:"
            cat audit-results.json | jq -r '.vulnerabilities | to_entries[] | "- \(.key): \(.value.severity)"' | head -10
            
            # 重大度判定
            critical_count=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
            high_count=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
            
            if [[ $critical_count -gt 0 || $high_count -gt 0 ]]; then
              echo "::error::Critical or high severity vulnerabilities found"
              echo "::warning::Consider running 'npm audit fix' to resolve issues"
            fi
          else
            echo "✅ No security vulnerabilities detected"
          fi

          echo "::endgroup::"
