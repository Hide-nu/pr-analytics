{
  "week": "2025-W15",
  "repository": {
    "owner": "colinhacks",
    "name": "zod"
  },
  "prs": [
    {
      "id": 2455901031,
      "number": 4132,
      "state": "closed",
      "created_at": "2025-04-13T06:01:10Z",
      "merged_at": "2025-04-14T05:11:33Z",
      "title": "Fix does not work async check logic",
      "user": {
        "login": "chimame",
        "avatar_url": "https://avatars.githubusercontent.com/u/7520815?v=4"
      },
      "labels": [],
      "additions": 9,
      "deletions": 3,
      "changed_files": 2,
      "comments": 1,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2455562054,
      "number": 4131,
      "state": "closed",
      "created_at": "2025-04-12T19:02:27Z",
      "merged_at": "2025-04-14T05:25:08Z",
      "title": "Added FullProduct.dev to 'Powered by Zod' in Ecosystem section",
      "user": {
        "login": "codinsonn",
        "avatar_url": "https://avatars.githubusercontent.com/u/5967956?v=4"
      },
      "labels": [],
      "additions": 1,
      "deletions": 0,
      "changed_files": 1,
      "comments": 2,
      "review_comments": 6,
      "commits": 3,
      "reviews": [
        {
          "id": 2762237309,
          "node_id": "PRR_kwDODqUnoM6kpGV9",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "**Actionable comments posted: 1**\n\n<details>\n<summary>📜 Review details</summary>\n\n**Configuration used: CodeRabbit UI**\n**Review profile: ASSERTIVE**\n**Plan: Pro**\n\n<details>\n<summary>📥 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 8cca93b7cc3f8c5fa17303bbb82d5c531ec24f33 and cdac21d94bb2801f550dbc1211cd7a972490f15a.\n\n</details>\n\n<details>\n<summary>📒 Files selected for processing (1)</summary>\n\n* `README.md` (1 hunks)\n\n</details>\n\n<details>\n<summary>🧰 Additional context used</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n<details>\n<summary>README.md</summary>\n\n[uncategorized] ~613-~613: Loose punctuation mark.\nContext: ...duct.dev`](https://fullproduct.dev?v=z3): Universal Expo + Next.js App Starter. U...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n</details>\n\n</details>\n\n</details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762237309",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4131",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762237309"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4131"
            }
          },
          "submitted_at": "2025-04-12T19:06:41Z",
          "commit_id": "cdac21d94bb2801f550dbc1211cd7a972490f15a"
        },
        {
          "id": 2762254500,
          "node_id": "PRR_kwDODqUnoM6kpKik",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "**Actionable comments posted: 1**\n\n<details>\n<summary>📜 Review details</summary>\n\n**Configuration used: CodeRabbit UI**\n**Review profile: ASSERTIVE**\n**Plan: Pro**\n\n<details>\n<summary>📥 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 9903e8dfb1f43bcbf437329ddf90f027d5e8c52d and ea11288d5ff656c345321555e66509a41a5d1626.\n\n</details>\n\n<details>\n<summary>📒 Files selected for processing (1)</summary>\n\n* `README.md` (1 hunks)\n\n</details>\n\n<details>\n<summary>🧰 Additional context used</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n<details>\n<summary>README.md</summary>\n\n[uncategorized] ~613-~613: Loose punctuation mark.\nContext: ...llproduct.dev?identity=freelancers&v=z3): Universal Expo + Next.js App Starter th...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n</details>\n\n</details>\n\n</details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762254500",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4131",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762254500"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4131"
            }
          },
          "submitted_at": "2025-04-12T21:07:15Z",
          "commit_id": "ea11288d5ff656c345321555e66509a41a5d1626"
        },
        {
          "id": 2762266482,
          "node_id": "PRR_kwDODqUnoM6kpNdy",
          "user": {
            "login": "aa24530",
            "id": 207382399,
            "node_id": "U_kgDODFxnfw",
            "avatar_url": "https://avatars.githubusercontent.com/u/207382399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aa24530",
            "html_url": "https://github.com/aa24530",
            "followers_url": "https://api.github.com/users/aa24530/followers",
            "following_url": "https://api.github.com/users/aa24530/following{/other_user}",
            "gists_url": "https://api.github.com/users/aa24530/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aa24530/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aa24530/subscriptions",
            "organizations_url": "https://api.github.com/users/aa24530/orgs",
            "repos_url": "https://api.github.com/users/aa24530/repos",
            "events_url": "https://api.github.com/users/aa24530/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aa24530/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762266482",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4131",
          "author_association": "NONE",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762266482"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4131"
            }
          },
          "submitted_at": "2025-04-12T22:24:10Z",
          "commit_id": "ea11288d5ff656c345321555e66509a41a5d1626"
        },
        {
          "id": 2762266499,
          "node_id": "PRR_kwDODqUnoM6kpNeD",
          "user": {
            "login": "aa24530",
            "id": 207382399,
            "node_id": "U_kgDODFxnfw",
            "avatar_url": "https://avatars.githubusercontent.com/u/207382399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aa24530",
            "html_url": "https://github.com/aa24530",
            "followers_url": "https://api.github.com/users/aa24530/followers",
            "following_url": "https://api.github.com/users/aa24530/following{/other_user}",
            "gists_url": "https://api.github.com/users/aa24530/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aa24530/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aa24530/subscriptions",
            "organizations_url": "https://api.github.com/users/aa24530/orgs",
            "repos_url": "https://api.github.com/users/aa24530/repos",
            "events_url": "https://api.github.com/users/aa24530/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aa24530/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762266499",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4131",
          "author_association": "NONE",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762266499"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4131"
            }
          },
          "submitted_at": "2025-04-12T22:24:25Z",
          "commit_id": "ea11288d5ff656c345321555e66509a41a5d1626"
        },
        {
          "id": 2762266516,
          "node_id": "PRR_kwDODqUnoM6kpNeU",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762266516",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4131",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762266516"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4131"
            }
          },
          "submitted_at": "2025-04-12T22:24:34Z",
          "commit_id": "ea11288d5ff656c345321555e66509a41a5d1626"
        },
        {
          "id": 2762266535,
          "node_id": "PRR_kwDODqUnoM6kpNen",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762266535",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4131",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762266535"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4131"
            }
          },
          "submitted_at": "2025-04-12T22:24:45Z",
          "commit_id": "ea11288d5ff656c345321555e66509a41a5d1626"
        },
        {
          "id": 2762267031,
          "node_id": "PRR_kwDODqUnoM6kpNmX",
          "user": {
            "login": "aa24530",
            "id": 207382399,
            "node_id": "U_kgDODFxnfw",
            "avatar_url": "https://avatars.githubusercontent.com/u/207382399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aa24530",
            "html_url": "https://github.com/aa24530",
            "followers_url": "https://api.github.com/users/aa24530/followers",
            "following_url": "https://api.github.com/users/aa24530/following{/other_user}",
            "gists_url": "https://api.github.com/users/aa24530/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aa24530/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aa24530/subscriptions",
            "organizations_url": "https://api.github.com/users/aa24530/orgs",
            "repos_url": "https://api.github.com/users/aa24530/repos",
            "events_url": "https://api.github.com/users/aa24530/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aa24530/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "APPROVED",
          "html_url": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762267031",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4131",
          "author_association": "NONE",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4131#pullrequestreview-2762267031"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4131"
            }
          },
          "submitted_at": "2025-04-12T22:28:44Z",
          "commit_id": "ea11288d5ff656c345321555e66509a41a5d1626"
        }
      ],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "netlify[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/13473?v=4"
          }
        }
      ],
      "review_comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "aa24530",
            "avatar_url": "https://avatars.githubusercontent.com/u/207382399?v=4"
          }
        },
        {
          "user": {
            "login": "aa24530",
            "avatar_url": "https://avatars.githubusercontent.com/u/207382399?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        }
      ]
    },
    {
      "id": 2455400323,
      "number": 4127,
      "state": "closed",
      "created_at": "2025-04-12T12:25:14Z",
      "merged_at": "2025-04-15T23:05:09Z",
      "title": "Add Spanish locale (i18n)",
      "user": {
        "login": "ByteEVM",
        "avatar_url": "https://avatars.githubusercontent.com/u/155392541?v=4"
      },
      "labels": [],
      "additions": 135,
      "deletions": 116,
      "changed_files": 12,
      "comments": 2,
      "review_comments": 0,
      "commits": 2,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2455314750,
      "number": 4124,
      "state": "closed",
      "created_at": "2025-04-12T08:27:30Z",
      "merged_at": null,
      "title": "v4: `.toJSONSchema`: Enforce spec-based optional logic (`required`) and simplify `additionalProperties` for strict objects",
      "user": {
        "login": "dswbx",
        "avatar_url": "https://avatars.githubusercontent.com/u/4246696?v=4"
      },
      "labels": [],
      "additions": 39,
      "deletions": 26,
      "changed_files": 2,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2455233367,
      "number": 4121,
      "state": "closed",
      "created_at": "2025-04-12T05:33:39Z",
      "merged_at": "2025-04-12T08:28:34Z",
      "title": "Add pattern to json schema if present",
      "user": {
        "login": "li-kai",
        "avatar_url": "https://avatars.githubusercontent.com/u/14850387?v=4"
      },
      "labels": [],
      "additions": 34,
      "deletions": 1,
      "changed_files": 2,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2455198403,
      "number": 4119,
      "state": "closed",
      "created_at": "2025-04-12T04:33:16Z",
      "merged_at": "2025-04-12T08:29:09Z",
      "title": "Fix params option to work with regex method",
      "user": {
        "login": "chimame",
        "avatar_url": "https://avatars.githubusercontent.com/u/7520815?v=4"
      },
      "labels": [],
      "additions": 22,
      "deletions": 1,
      "changed_files": 2,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2455168298,
      "number": 4117,
      "state": "closed",
      "created_at": "2025-04-12T03:38:04Z",
      "merged_at": "2025-04-14T05:15:43Z",
      "title": "fix(docs): enum typo",
      "user": {
        "login": "zirkelc",
        "avatar_url": "https://avatars.githubusercontent.com/u/950244?v=4"
      },
      "labels": [],
      "additions": 2,
      "deletions": 2,
      "changed_files": 1,
      "comments": 4,
      "review_comments": 0,
      "commits": 2,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "zirkelc",
            "avatar_url": "https://avatars.githubusercontent.com/u/950244?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2455162325,
      "number": 4116,
      "state": "closed",
      "created_at": "2025-04-12T03:28:50Z",
      "merged_at": "2025-04-12T08:30:54Z",
      "title": "Fix typo",
      "user": {
        "login": "JiHoon-0330",
        "avatar_url": "https://avatars.githubusercontent.com/u/58219394?v=4"
      },
      "labels": [],
      "additions": 1,
      "deletions": 1,
      "changed_files": 1,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2454896065,
      "number": 4111,
      "state": "closed",
      "created_at": "2025-04-11T22:43:51Z",
      "merged_at": "2025-04-12T00:19:11Z",
      "title": "Fix improper function definition in migration guide",
      "user": {
        "login": "jacksonblankenship",
        "avatar_url": "https://avatars.githubusercontent.com/u/26150050?v=4"
      },
      "labels": [],
      "additions": 1,
      "deletions": 1,
      "changed_files": 1,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2454877473,
      "number": 4110,
      "state": "closed",
      "created_at": "2025-04-11T22:22:12Z",
      "merged_at": "2025-04-12T00:19:51Z",
      "title": "Update api.mdx",
      "user": {
        "login": "SzymonNadbrzezny",
        "avatar_url": "https://avatars.githubusercontent.com/u/32302761?v=4"
      },
      "labels": [],
      "additions": 1,
      "deletions": 1,
      "changed_files": 1,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2454176604,
      "number": 4107,
      "state": "closed",
      "created_at": "2025-04-11T15:51:30Z",
      "merged_at": "2025-04-12T00:20:50Z",
      "title": "Update benchmark instructions to include switching to the v4 branch",
      "user": {
        "login": "morinokami",
        "avatar_url": "https://avatars.githubusercontent.com/u/7889778?v=4"
      },
      "labels": [],
      "additions": 1,
      "deletions": 0,
      "changed_files": 1,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2453982550,
      "number": 4104,
      "state": "closed",
      "created_at": "2025-04-11T14:29:23Z",
      "merged_at": "2025-04-12T00:28:59Z",
      "title": "fixes typos + logo margin issue",
      "user": {
        "login": "Christopher96u",
        "avatar_url": "https://avatars.githubusercontent.com/u/57688565?v=4"
      },
      "labels": [],
      "additions": 3,
      "deletions": 3,
      "changed_files": 3,
      "comments": 2,
      "review_comments": 4,
      "commits": 2,
      "reviews": [
        {
          "id": 2760574566,
          "node_id": "PRR_kwDODqUnoM6kiwZm",
          "user": {
            "login": "scotttrinh",
            "id": 1682194,
            "node_id": "MDQ6VXNlcjE2ODIxOTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1682194?u=120233eb27f98f574a4ad36891d7ea3f6e578928&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/scotttrinh",
            "html_url": "https://github.com/scotttrinh",
            "followers_url": "https://api.github.com/users/scotttrinh/followers",
            "following_url": "https://api.github.com/users/scotttrinh/following{/other_user}",
            "gists_url": "https://api.github.com/users/scotttrinh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/scotttrinh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scotttrinh/subscriptions",
            "organizations_url": "https://api.github.com/users/scotttrinh/orgs",
            "repos_url": "https://api.github.com/users/scotttrinh/repos",
            "events_url": "https://api.github.com/users/scotttrinh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/scotttrinh/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "CHANGES_REQUESTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4104#pullrequestreview-2760574566",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4104",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4104#pullrequestreview-2760574566"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4104"
            }
          },
          "submitted_at": "2025-04-11T14:38:33Z",
          "commit_id": "b60f86f03052589abd9d859aca68cbb12e852bf2"
        },
        {
          "id": 2760592905,
          "node_id": "PRR_kwDODqUnoM6ki04J",
          "user": {
            "login": "Christopher96u",
            "id": 57688565,
            "node_id": "MDQ6VXNlcjU3Njg4NTY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/57688565?u=7dd4b9af1381ae7f82fb08f78ba832bd95adb3fe&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Christopher96u",
            "html_url": "https://github.com/Christopher96u",
            "followers_url": "https://api.github.com/users/Christopher96u/followers",
            "following_url": "https://api.github.com/users/Christopher96u/following{/other_user}",
            "gists_url": "https://api.github.com/users/Christopher96u/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Christopher96u/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Christopher96u/subscriptions",
            "organizations_url": "https://api.github.com/users/Christopher96u/orgs",
            "repos_url": "https://api.github.com/users/Christopher96u/repos",
            "events_url": "https://api.github.com/users/Christopher96u/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Christopher96u/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4104#pullrequestreview-2760592905",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4104",
          "author_association": "NONE",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4104#pullrequestreview-2760592905"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4104"
            }
          },
          "submitted_at": "2025-04-11T14:45:10Z",
          "commit_id": "b60f86f03052589abd9d859aca68cbb12e852bf2"
        },
        {
          "id": 2760613100,
          "node_id": "PRR_kwDODqUnoM6ki5zs",
          "user": {
            "login": "scotttrinh",
            "id": 1682194,
            "node_id": "MDQ6VXNlcjE2ODIxOTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1682194?u=120233eb27f98f574a4ad36891d7ea3f6e578928&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/scotttrinh",
            "html_url": "https://github.com/scotttrinh",
            "followers_url": "https://api.github.com/users/scotttrinh/followers",
            "following_url": "https://api.github.com/users/scotttrinh/following{/other_user}",
            "gists_url": "https://api.github.com/users/scotttrinh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/scotttrinh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scotttrinh/subscriptions",
            "organizations_url": "https://api.github.com/users/scotttrinh/orgs",
            "repos_url": "https://api.github.com/users/scotttrinh/repos",
            "events_url": "https://api.github.com/users/scotttrinh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/scotttrinh/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4104#pullrequestreview-2760613100",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4104",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4104#pullrequestreview-2760613100"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4104"
            }
          },
          "submitted_at": "2025-04-11T14:52:58Z",
          "commit_id": "b60f86f03052589abd9d859aca68cbb12e852bf2"
        },
        {
          "id": 2761846256,
          "node_id": "PRR_kwDODqUnoM6knm3w",
          "user": {
            "login": "Christopher96u",
            "id": 57688565,
            "node_id": "MDQ6VXNlcjU3Njg4NTY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/57688565?u=7dd4b9af1381ae7f82fb08f78ba832bd95adb3fe&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Christopher96u",
            "html_url": "https://github.com/Christopher96u",
            "followers_url": "https://api.github.com/users/Christopher96u/followers",
            "following_url": "https://api.github.com/users/Christopher96u/following{/other_user}",
            "gists_url": "https://api.github.com/users/Christopher96u/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Christopher96u/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Christopher96u/subscriptions",
            "organizations_url": "https://api.github.com/users/Christopher96u/orgs",
            "repos_url": "https://api.github.com/users/Christopher96u/repos",
            "events_url": "https://api.github.com/users/Christopher96u/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Christopher96u/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4104#pullrequestreview-2761846256",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4104",
          "author_association": "NONE",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4104#pullrequestreview-2761846256"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4104"
            }
          },
          "submitted_at": "2025-04-12T00:22:05Z",
          "commit_id": "b60f86f03052589abd9d859aca68cbb12e852bf2"
        }
      ],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": [
        {
          "user": {
            "login": "scotttrinh",
            "avatar_url": "https://avatars.githubusercontent.com/u/1682194?v=4"
          }
        },
        {
          "user": {
            "login": "Christopher96u",
            "avatar_url": "https://avatars.githubusercontent.com/u/57688565?v=4"
          }
        },
        {
          "user": {
            "login": "scotttrinh",
            "avatar_url": "https://avatars.githubusercontent.com/u/1682194?v=4"
          }
        },
        {
          "user": {
            "login": "Christopher96u",
            "avatar_url": "https://avatars.githubusercontent.com/u/57688565?v=4"
          }
        }
      ]
    },
    {
      "id": 2453108749,
      "number": 4095,
      "state": "closed",
      "created_at": "2025-04-11T07:50:46Z",
      "merged_at": "2025-04-12T00:36:30Z",
      "title": "Fix typoes",
      "user": {
        "login": "frontsideair",
        "avatar_url": "https://avatars.githubusercontent.com/u/868283?v=4"
      },
      "labels": [],
      "additions": 5,
      "deletions": 5,
      "changed_files": 2,
      "comments": 2,
      "review_comments": 0,
      "commits": 5,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2453080172,
      "number": 4092,
      "state": "closed",
      "created_at": "2025-04-11T07:36:08Z",
      "merged_at": null,
      "title": "Update index.mdx",
      "user": {
        "login": "dominikbulaj",
        "avatar_url": "https://avatars.githubusercontent.com/u/1233407?v=4"
      },
      "labels": [],
      "additions": 1,
      "deletions": 1,
      "changed_files": 1,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2453030101,
      "number": 4091,
      "state": "closed",
      "created_at": "2025-04-11T07:08:27Z",
      "merged_at": "2025-04-12T00:54:39Z",
      "title": "`.toJSONSchema()`: Prefer `const` over `enum` for single literal",
      "user": {
        "login": "samchungy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18017094?v=4"
      },
      "labels": [],
      "additions": 6,
      "deletions": 4,
      "changed_files": 2,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2453003529,
      "number": 4090,
      "state": "closed",
      "created_at": "2025-04-11T06:53:53Z",
      "merged_at": "2025-04-14T05:18:37Z",
      "title": "`.toJSONSchema()` Fix optional behaviour",
      "user": {
        "login": "samchungy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18017094?v=4"
      },
      "labels": [],
      "additions": 7,
      "deletions": 11,
      "changed_files": 2,
      "comments": 10,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "dswbx",
            "avatar_url": "https://avatars.githubusercontent.com/u/4246696?v=4"
          }
        },
        {
          "user": {
            "login": "samchungy",
            "avatar_url": "https://avatars.githubusercontent.com/u/18017094?v=4"
          }
        },
        {
          "user": {
            "login": "mdoi2",
            "avatar_url": "https://avatars.githubusercontent.com/u/6340506?v=4"
          }
        },
        {
          "user": {
            "login": "mattpocock",
            "avatar_url": "https://avatars.githubusercontent.com/u/28293365?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "muningis",
            "avatar_url": "https://avatars.githubusercontent.com/u/28229273?v=4"
          }
        },
        {
          "user": {
            "login": "ghardin1314",
            "avatar_url": "https://avatars.githubusercontent.com/u/54160127?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2452213784,
      "number": 4085,
      "state": "closed",
      "created_at": "2025-04-10T20:45:55Z",
      "merged_at": "2025-04-10T21:33:13Z",
      "title": "Add base64url",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 202,
      "deletions": 78,
      "changed_files": 17,
      "comments": 5,
      "review_comments": 0,
      "commits": 7,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2452213359,
      "number": 4084,
      "state": "closed",
      "created_at": "2025-04-10T20:45:40Z",
      "merged_at": null,
      "title": "Add base64url",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 60970,
      "deletions": 38071,
      "changed_files": 496,
      "comments": 3,
      "review_comments": 0,
      "commits": 246,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "vercel[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/8329?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "netlify[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/13473?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2451507200,
      "number": 4081,
      "state": "closed",
      "created_at": "2025-04-10T15:23:59Z",
      "merged_at": "2025-04-10T15:26:06Z",
      "title": "Add zod 4 beta anno",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 8,
      "deletions": 8,
      "changed_files": 2,
      "comments": 3,
      "review_comments": 0,
      "commits": 4,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "vercel[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/8329?v=4"
          }
        },
        {
          "user": {
            "login": "netlify[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/13473?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2449947638,
      "number": 4080,
      "state": "closed",
      "created_at": "2025-04-10T03:07:38Z",
      "merged_at": "2025-04-10T03:18:28Z",
      "title": "Implement CIDR, drop `.and()`, update docs",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 1628,
      "deletions": 427,
      "changed_files": 37,
      "comments": 4,
      "review_comments": 0,
      "commits": 4,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "vercel[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/8329?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2449833838,
      "number": 4078,
      "state": "closed",
      "created_at": "2025-04-10T00:58:23Z",
      "merged_at": null,
      "title": "Add docs files",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 10396,
      "deletions": 0,
      "changed_files": 20,
      "comments": 8,
      "review_comments": 58,
      "commits": 1,
      "reviews": [
        {
          "id": 2755096140,
          "node_id": "PRR_kwDODqUnoM6kN25M",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "**Actionable comments posted: 3**\n\n<details>\n<summary>🧹 Nitpick comments (49)</summary><blockquote>\n\n<details>\n<summary>packages/docs/content/test.mdx (2)</summary><blockquote>\n\n`6-10`: **Code Block Clarity and Context**  \nThe JavaScript code block is syntactically correct and clearly demonstrates a simple `console.log` statement. For enhanced documentation value, consider adding a brief explanation or caption near the code block to clarify the purpose of this snippet in the context of JSON components.\n\n---\n\n`18-18`: **Cleanup of Trailing Content**  \nThere appears to be an extra newline at the end of the file. For a cleaner file structure and consistency with other documentation files, consider removing any unnecessary trailing whitespace.\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/object-vs-interface.mdx (1)</summary><blockquote>\n\n`6-6`: **Potential Stray Content**\n\nA lone “6” appears on line 6. If this isn’t intentional content, please remove it to keep the document clean.\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/meta.json (1)</summary><blockquote>\n\n`1-22`: **Documentation Metadata Organization**\n\nThis JSON file clearly organizes the documentation pages into sections and uses string markers (e.g. `\"---Beta---\"`) to delineate groups. Verify that these markers are handled as expected by the documentation system. If they serve only as internal dividers, adding a brief comment or moving them to a separate config might improve clarity.\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/type-inference.mdx (2)</summary><blockquote>\n\n`5-5`: **Minor Stylistic Suggestion**\n\nThere is an extra space before the period in the sentence on line 5. Consider removing it for consistency.\n\n---\n\n`15-18`: **Punctuation Consistency**\n\nIn the explanatory text on line 17, consider adding a comma after “For instance” to improve readability.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~17-~17: A comma might be missing here.\nContext: ...les ```  **What about transforms?**  In reality each Zod schema internally tracks **two...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n---\n\n[typographical] ~17-~17: After the expression ‘for example’ a comma is usually used.\nContext: ... mix, these two values can diverge. For instance `z.string().transform(val => val.length...\n\n(COMMA_FOR_EXAMPLE)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/json-schema.mdx (6)</summary><blockquote>\n\n`122-125`: **Commented Pipes Section**\n\nThe commented-out section describing pipes is informative. If it isn’t intended for final rendering, consider removing it or converting it to active documentation to avoid confusion.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[duplication] ~124-~124: Possible typo: you repeated a word.\nContext: ... {/* ### Pipes  Pipes contain and input and and output schema. Zod uses the *output sch...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n</details>\n\n</details>\n\n---\n\n`173-245`: **Commented Table Reference**\n\nThe large commented-out table provides a useful reference for supported options. Consider converting this into a rendered markdown table if it is intended for end-user reference, or remove it if obsolete.\n\n---\n\n`384-397`: **Override Function Example**\n\nThe override example illustrates how to modify the generated JSON Schema. Note the typo “dircectly” on line 387—it should read “directly”.\n\n---\n\n`400-411`: **Pipes Option Example**\n\nThe examples for the pipes option show how to extract either the output or input schema using `pipe: \"input\"`. Also, the description contains a duplicate “and” (“input and and output schema”); please correct this to “input and output schema.”\n\n---\n\n`413-420`: **URI Customization Example**\n\nThe code block for the `uri` option starts an example for customizing external `$ref` URIs but appears incomplete. Verify whether this block should be completed or removed.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[duplication] ~418-~418: Possible typo: you repeated a word.\nContext: ...`   ### `pipes`  Pipes contain an input and and output schema. By default the result of...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~418-~418: Did you mean: “By default,”?\nContext: ...contain an input and and output schema. By default the result of `z.toJSONSchema` represen...\n\n(BY_DEFAULT_COMMA)\n\n</details>\n\n</details>\n\n---\n\n`421-894`: **Commented Accordion Sections**\n\nSeveral large Accordion sections and additional commented-out examples follow. Confirm whether these commented sections are intended to remain in the source file or if they should be cleaned up to avoid confusion in the final documentation.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~433-~433: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...s a function that converts an `id` to a fully-qualified URI.  ```ts const myRegistry = z.regist...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n---\n\n[uncategorized] ~860-~860: Did you mean: “By default,”?\nContext: ...try will be extracted into `schemas`.   By default the `$ref` URIs are relative paths like...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[uncategorized] ~861-~861: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...s a function that converts an `id` to a fully-qualified URI.  ```ts z.toJSONSchema(z.globalRegi...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/generic-functions.mdx (2)</summary><blockquote>\n\n`39-40`: **Result Presentation**\n\nThe sentence “The Result is now fully and properly typed…” could benefit from using a lowercase “result” for consistency.\n\n---\n\n`53-54`: **Explanation of Type Inference Issue**\n\nThe explanation notes that TypeScript “is treating” the schema as a generic `ZodTypeAny`. For stylistic consistency, consider rephrasing this to “treats” instead.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~54-~54: This verb may not be in the correct tense. Consider changing the tense to fit the context better.\nContext: ...e to how TypeScript inference works, it is treating `schema` like a `ZodTypeAny` instead of...\n\n(AI_EN_LECTOR_REPLACEMENT_VERB_TENSE)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/packages/zod.mdx (1)</summary><blockquote>\n\n`30-30`: **Grammar Improvement: Pluralize \"instance\"**  \nConsider changing \"All instance of `ZodType` implement the following methods:\" to \"All instances of `ZodType` implement the following methods:\".\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~30-~30: The grammatical number of this noun doesn’t look right. Consider replacing it.\nContext: ...from [`@zod/core`](/packages/core). All instance of `ZodType` implement the following me...\n\n(AI_EN_LECTOR_REPLACEMENT_NOUN_NUMBER)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/index.mdx (1)</summary><blockquote>\n\n`54-64`: **Optional Refactor: Remove Commented-out Code**  \nThere is a commented-out block of `<ParamField>` components (lines 54–64). If these are not intended for end-user documentation, consider removing them to keep the file clean.\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/error-customization.mdx (1)</summary><blockquote>\n\n`295-297`: **Style Suggestion: Refine Note on Locale Loading**  \nThe note currently reads:  \n> **Note** — The `zod` library automatically loads the `en` locale automatically. The `@zod/mini`package does not load any locale; instead all error messages default to `Invalid input`.\n\nConsider revising it to:  \n> **Note** — The `zod` library automatically loads the `en` locale. The `@zod/mini` package does not load any locale; instead, all error messages default to `Invalid input`.\n\nThis change removes the duplicate adverb \"automatically\" and adds a comma for clarity.\n\nProposed diff:  \n```diff\n- The `zod` library automatically loads the `en` locale automatically. The `@zod/mini`package does not load any locale; instead all error messages default to `Invalid input`.\n+ The `zod` library automatically loads the `en` locale. The `@zod/mini` package does not load any locale; instead, all error messages default to `Invalid input`.\n```\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~296-~296: This adverb was used twice in the sentence. Consider removing one of them or replacing them with a synonym.\nContext: ...ary automatically loads the `en` locale automatically. The `@zod/mini`package does not load a...\n\n(ADVERB_REPETITION_PREMIUM)\n\n---\n\n[uncategorized] ~296-~296: Possible missing comma found.\nContext: .../mini`package does not load any locale; instead all error messages default to `Invalid ...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/v4/index.mdx (10)</summary><blockquote>\n\n`27-30`: **Fix double determiner in sentence.**  \nIn the sentence “With luck, it will serve a the new foundation for many more years to come”, remove the extra determiner. Consider rephrasing to “serve as the new foundation” or “serve a new foundation”.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~29-~29: Two determiners in a row. Choose either “a” or “the”.\nContext: ...ns-%2B1-desc). With luck, it will serve a the new foundation for many more years to c...\n\n(DT_DT)\n\n</details>\n\n</details>\n\n---\n\n`245-246`: **Refine punctuation in benchmark explanation.**  \nIn the benchmark section where it reads “In Zod 3, this took `4000ms` to compile; and adding additional calls to `.extend()` …”, replace the semicolon with a comma (e.g. “4000ms to compile, and adding …”) for improved readability.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[typographical] ~245-~245: Conjunctions like ‘and’ should not follow semicolons. Consider using a comma, or removing the conjunction.\nContext: ... In Zod 3, this took `4000ms` to compile; and adding additional calls to `.extend()` would t...\n\n(CONJUNCTION_AFTER_SEMICOLON)\n\n</details>\n\n</details>\n\n---\n\n`331-335`: **Insert comma after introductory phrase.**  \nIn the “Exact(er) optional properties” section, consider adding a comma after the introductory phrase to improve clarity. Also, review the repetitive sentence beginnings and consider varying the structure.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[typographical] ~331-~331: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...  ### Exact(er) optional properties  In TypeScript a property can be \"optional\" in two dis...\n\n(IN_NNP_COMMA)\n\n</details>\n\n</details>\n\n---\n\n`377-377`: **Add missing comma.**  \nA comma appears to be missing in this section. Please review the sentence and insert proper punctuation where needed.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[typographical] ~377-~377: It seems that a comma is missing.\nContext: ...-in API.  ### True recursive types  But wait there's more! After implementing `z.int...\n\n(WAIT_COMMA)\n\n</details>\n\n</details>\n\n---\n\n`420-420`: **Reconsider compound modifier punctuation.**  \nThe phrase “strongly-typed metadata” might be better rendered as “strongly typed metadata” (removing the hyphen) per style guidelines for adverbs ending in “ly”.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~420-~420: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...od 4 introduces a new system for adding strongly-typed metadata to your schemas. Metadata isn'...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n</details>\n\n</details>\n\n---\n\n`559-559`: **Simplify expression.**  \nConsider replacing “by all means” with a more concise alternative (for example, “simply continue using”) to reduce wordiness.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~559-~559: ‘by all means’ might be wordy. Consider a shorter alternative.\nContext: ...f you are using that package currently, by all means continue using it.   Zod now implements...\n\n(EN_WORDINESS_PREMIUM_BY_ALL_MEANS)\n\n</details>\n\n</details>\n\n---\n\n`599-599`: **Streamline expression for conciseness.**  \nRephrase “At the moment this isn't configurable; this may change in the future” to “Currently, this isn’t configurable but may change in the future” for a more concise tone.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~599-~599: For conciseness, consider replacing this expression with an adverb.\nContext: ...d string   → at favoriteNumbers[1] ```  At the moment this isn't configurable; this may chang...\n\n(AT_THE_MOMENT)\n\n</details>\n\n</details>\n\n---\n\n`681-681`: **Insert comma after “Similarly”.**  \nAdd a comma after “Similarly” to improve the readability of the sentence in that section.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~681-~681: A comma may be missing after the conjunctive/linking adverb ‘Similarly’.\nContext: ...] z.uint32();   // [0, 4294967295] ```  Similarly the following `bigint` numeric formats ...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n</details>\n\n</details>\n\n---\n\n`691-691`: **Reduce intensifier and check abbreviation punctuation.**  \nConsider removing “very” from “very simple” to streamline the text, and ensure that abbreviations (e.g. “etc.”) include the proper period.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~691-~691: As an alternative to the over-used intensifier ‘very’, consider replacing this phrase.\nContext: ...he existing `z.coerce.boolean()` API is very simple: falsy values (`false`, `undefined`, `n...\n\n(EN_WEAK_ADJECTIVE)\n\n---\n\n[style] ~691-~691: In American English, abbreviations like “etc.” require a period.\nContext: ..., `undefined`, `null`, `0`, `\"\"`, `NaN` etc) become `false`, truthy values become `...\n\n(ETC_PERIOD)\n\n</details>\n\n</details>\n\n---\n\n`780-780`: **Correct phrase for grammatical accuracy.**  \nRevise “in a couple ways” to “in a couple of ways” to maintain proper grammatical form.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~780-~780: Using ‘couple’ without ‘of’ is considered to be informal.\nContext: ...minated union support has improved in a couple ways. First, you no longer need to specify t...\n\n(PLENTY_OF_NOUNS)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/ecosystem.mdx (1)</summary><blockquote>\n\n`17-17`: **Enhance the request for contributions.**  \nConsider adding “please” before “let me know [on Twitter]” to make the call for contributions sound more inviting.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~17-~17: This expression usually appears with a “please” in front of it.\nContext: ... built a tool or library on top of Zod, let me know [on Twitter](https://twitter.com/colinh...\n\n(INSERT_PLEASE)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/packages/core.mdx (4)</summary><blockquote>\n\n`51-51`: **Fix duplicate word.**  \nRemove the duplicate “release” in “the first stable release release of Zod 4.”\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[duplication] ~51-~51: Possible typo: you repeated a word.\nContext: ...rding to semver). Once the first stable release release of Zod 4, at which point `v1.0.0` will ...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n</details>\n\n</details>\n\n---\n\n`55-55`: **Eliminate word repetition.**  \nThere is a duplicate “first” in “you first first look into [Standard Schema]”. Please remove the extra occurrence.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[duplication] ~55-~55: Possible typo: you repeated a word.\nContext: ...Zod schemas (say, an API framework) you first first look into [Standard Schema](https://sta...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n</details>\n\n</details>\n\n---\n\n`59-59`: **Add missing article for clarity.**  \nConsider adding “the” before “Standard Schema won’t be sufficient” to enhance grammatical clarity.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~59-~59: You might be missing the article “the” here.\nContext: ...ty (say, introspecting the schema) then Standard Schema won't be sufficient. In this cas...\n\n(AI_EN_LECTOR_MISSING_DETERMINER_THE)\n\n</details>\n\n</details>\n\n---\n\n`76-76`: **Consider inserting a missing comma.**  \nReview the sentence discussing peer dependencies to see if a comma would improve readability (e.g. after the descriptive phrase).\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~76-~76: A comma might be missing here.\nContext: ...cy lets users \"bring-their-own-Zod\". As written this allows the user to use any `0.x.y`...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/metadata.mdx (1)</summary><blockquote>\n\n`13-14`: **Revise compound modifier punctuation.**  \nIn the line “Registries are collections of schemas, each associated with some *strongly-typed* metadata…”, consider removing the hyphen to read “strongly typed metadata” per style guidelines.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~14-~14: The hyphen in strongly-typed is redundant.\nContext: ... of schemas, each associated with some *strongly-typed* metadata. To create a simple registry:...\n\n(ADVERB_LY_HYPHEN_FIX)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/packages/mini.mdx (3)</summary><blockquote>\n\n`7-7`: **Simplify wording.**  \nConsider rephrasing “the exact same functionality as `zod`” to “the same functionality as `zod`” to reduce redundancy.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~7-~7: ‘exact same’ might be wordy. Consider a shorter alternative.\nContext: ...the release of Zod 4. It implements the exact same functionality as `zod`, but using a *fu...\n\n(EN_WORDINESS_PREMIUM_EXACT_SAME)\n\n</details>\n\n</details>\n\n---\n\n`62-62`: **Insert comma for clarity.**  \nAdd a comma after “Instead” in the sentence “Instead you pass these checks into schemas using the `.check()` method” to improve readability.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~62-~62: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: .../mini` such methods aren't implemented. Instead you pass these checks into schemas usin...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n</details>\n\n</details>\n\n---\n\n`141-145`: **Review punctuation in locale section.**  \nIn the default locale section, ensure the sentence “This means, by default the `message` property of all issues will simply read ‘Invalid input’.” is correctly punctuated—consider whether a comma is needed after the introductory phrase.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~145-~145: Possible missing comma found.\nContext: ...r otherwise customized.  This means, by default the `message` property of all issues wi...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/v4/changelog.mdx (4)</summary><blockquote>\n\n`293-305`: **ISO Datetime Validation Section**\n\nThe ISO datetime examples (approximately lines 293–305) demonstrate how to use the `z.iso.datetime()` API along with options (such as `offset: true` and precision settings). Consider reviewing the punctuation (for example, ensuring any missing commas are added) to improve clarity.\n\n---\n\n`121-140`: **Streamlined Issue Formats Explanation**\n\nThe “updates issue formats” portion provides a very thorough mapping from legacy Zod 3 issue types to their Zod 4 counterparts. The examples and type listings help clarify the changes. Please review the grammar and punctuation (per the static analysis hints) for additional polish.\n\n---\n\n`178-190`: **Clarification on Error Map Precedence Changes**\n\nThe explanation of the new error map precedence (lines 178–190) benefits from clear side‑by‑side code examples. It would be helpful to explicitly state that the contextual error passed to `.parse()` no longer overrides the schema‑level error.\n\n---\n\n`1-2613`: **Overall Migration Guide Documentation Quality**\n\nThis migration guide is highly comprehensive. It explains almost every breaking change between Zod 3 and Zod 4 with extensive examples (using Tabs, Callouts, and Accordions) that help clarify how to adapt to the new APIs. Please address minor stylistic issues (e.g. wordiness, punctuation, and consistency) as noted by static analysis.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~46-~46: ‘in conjunction with’ might be wordy. Consider a shorter alternative.\nContext: ...l sorts of footguns (they can't be used in conjunction with `errorMap`) and do not align with Zod's...\n\n(EN_WORDINESS_PREMIUM_IN_CONJUNCTION_WITH)\n\n---\n\n[uncategorized] ~194-~194: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...thod on `ZodError` has been deprecated. Instead use the top-level `z.treeifyError()` fu...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[uncategorized] ~198-~198: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...on `ZodError` has also been deprecated. Instead use the top-level `z.treeifyError()` fu...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[uncategorized] ~332-~332: Use a comma before ‘and’ if it connects two independent clauses (unless they are closely connected and short).\nContext: ...  This has been long deprecated in Zod 3 and it now removed in Zod 4. There is no di...\n\n(COMMA_COMPOUND_SENTENCE)\n\n---\n\n[uncategorized] ~332-~332: Did you mean “its” (the possessive pronoun)?\nContext: ...his API. There were lots of footguns in it's implementation, and it's use is general...\n\n(ITS_PREMIUM)\n\n---\n\n[grammar] ~332-~332: Did you mean to use the possessive pronoun “its”?\nContext: ...of footguns in it's implementation, and it's use is generally an anti-pattern.  ### ...\n\n(IT_S_ITS)\n\n---\n\n[misspelling] ~332-~332: This word is normally spelled as one.\nContext: ...mentation, and it's use is generally an anti-pattern.  ### changes `z.unknown()` optionality...\n\n(EN_COMPOUNDS_ANTI_PATTERN)\n\n---\n\n[grammar] ~446-~446: If ‘type’ is a classification term, ‘a’ is not necessary. Use “type of”. (The phrases ‘kind of’ and ‘sort of’ are informal if they mean ‘to some extent’.)\nContext: ...nement functions could still narrow the type of a schema. This wasn't documented but was ...\n\n(KIND_OF_A)\n\n---\n\n[uncategorized] ~458-~458: Loose punctuation mark.\nContext: ...4: still `unknown` ```  ## `z.ostring()`, etc dropped  The undocumented convenien...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[style] ~458-~458: In American English, abbreviations like “etc.” require a period.\nContext: ... still `unknown` ```  ## `z.ostring()`, etc dropped  The undocumented convenience m...\n\n(ETC_PERIOD)\n\n---\n\n[uncategorized] ~575-~575: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...eneric `Def` has been entirely removed. Instead the base class now only tracks `Output`...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[style] ~575-~575: The phrase ‘in many cases’ is used quite frequently. Consider using a less frequent alternative to set your writing apart from others.\nContext: ... `z.ZodType` to behave more intuitively in many cases.  ```ts const inferSchema<T extends z.Z...\n\n(IN_MANY_STYLE_CASES)\n\n---\n\n[style] ~605-~605: In American English, abbreviations like “etc.” require a period.\nContext: ...class, plus `$ZodString`, `$ZodNumber`, etc), utility functions/types, issue types ...\n\n(ETC_PERIOD)\n\n---\n\n[style] ~611-~611: In American English, abbreviations like “etc.” require a period.\nContext: ...class, plus `$ZodString`, `$ZodNumber`, etc), utility functions/types, issue types ...\n\n(ETC_PERIOD)\n\n---\n\n[typographical] ~613-~613: Consider adding a comma here.\nContext: ... error class (`$ZodError`).  As you can see these things are all prefixed with `$` ...\n\n(AS_YOU_CAN_SEE_COMMA)\n\n---\n\n[style] ~654-~654: ‘in conjunction with’ might be wordy. Consider a shorter alternative.\nContext: ... // => \"12\" ```  This is primarily used in conjunction with `ZodPipe`. The `.transform()` method no...\n\n(EN_WORDINESS_PREMIUM_IN_CONJUNCTION_WITH)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/error-formatting.mdx (3)</summary><blockquote>\n\n`51-75`: **`z.treeifyError()` Section**\n\nThis section explains how to use the `z.treeifyError()` utility to convert a complex error into a nested structure. The code block (lines 57–75) is easy to follow. A small nitpick: you might consider rephrasing the accompanying explanatory text to avoid repeating the word “errors” too many times.\n\n---\n\n`108-144`: **Deprecated `z.formatError()` Documentation**\n\nThe section (lines 108–144) clearly marks `z.formatError()` as deprecated and provides a detailed example showing its output format. The use of an Accordion to hide the extended example is very user‑friendly. It may help to add a brief note recommending migration to `z.treeifyError()`.\n\n---\n\n`1-183`: **Overall Error Formatting Documentation**\n\nThis file offers a comprehensive overview of the various error formatting utilities in Zod, along with clear examples that show the differences between the available APIs. Minor stylistic adjustments (as per static analysis recommendations) will help further polish the document.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~8-~8: The phrase ‘in many cases’ is used quite frequently. Consider using a less frequent alternative to set your writing apart.\nContext: ...d _correctness_ in its error reporting. In many cases, it's helpful to convert the `$ZodError...\n\n(IN_MANY_STYLE_CASES)\n\n---\n\n[uncategorized] ~77-~77: The preposition “on” seems more likely in this position.\nContext: ...n easily access the errors that occured at a particular path. The `errors` field c...\n\n(AI_EN_LECTOR_REPLACEMENT_PREPOSITION)\n\n---\n\n[formatting] ~87-~87: Did you mean “?”\nContext: ...``  > Be sure to use optional chaining (`?.`) to avoid errors when accessing nested...\n\n(MULTIPLE_PUNCTATION_MARKS_1)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/api.mdx (6)</summary><blockquote>\n\n`1-9`: **Introduction and Frontmatter for API Documentation**\n\nThe initial section (lines 1–9) provides clear frontmatter, a descriptive title (“Defining schemas”), and a brief introduction to schema validation. There is a minor wording issue in line 9 (“complex. nested objects”)—consider removing the period for smooth reading.\n\n---\n\n`35-44`: **Coerced Schema Example**\n\nThe code example (lines 35–44) demonstrating how coerced values are parsed is clear. It may be helpful to add a brief note about how coercion can affect type safety to set proper expectations.\n\n---\n\n`292-317`: **ISO Datetime Validation**\n\nThe examples for validating ISO datetimes (lines 292–317) are thorough and demonstrate default behaviors (e.g. no timezone offsets) as well as how to enable offsets and control precision. A slight punctuation review (e.g. adding missing commas) is recommended.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~307-~307: Possible missing comma found.\nContext: ...00\"); // ❌ (no offsets allowed) ```  To allow Timezone offsets can be allowed by sett...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n</details>\n\n</details>\n\n---\n\n`682-697`: **Customizing `z.stringbool()` Options**\n\nThe customization examples for `z.stringbool()` (lines 682–688 and 690–697) effectively show how to override the default truthy/falsy values and set case‑sensitivity. Please change “Be default” to “By default.”\n\n---\n\n`1906-2041`: **Advanced Refinement Techniques**\n\nThis extended section covers the now‑deprecated `.superRefine()` API (with a callout warning) and provides an in‑depth explanation of the more versatile `.check()` API. The examples are comprehensive; consider streamlining some code comments to enhance readability.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[misspelling] ~1907-~1907: Use “a” instead of ‘an’ if the following word doesn’t start with a vowel sound, e.g. ‘a sentence’, ‘a university’.\nContext: ...in sequence, even if one of them causes an validation error. This is usually desir...\n\n(EN_A_VS_AN)\n\n---\n\n[uncategorized] ~1935-~1935: Loose punctuation mark.\nContext: ...ode\": \"custom\", \"message\": \"Too short!\" },   { \"code\": \"custom\", \"message\": \"Must...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~1966-~1966: Loose punctuation mark.\nContext: ...ode\": \"custom\", \"message\": \"Too short!\" }] ``` </Tab> </Tabs>  To customize the e...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n</details>\n\n</details>\n\n---\n\n`1-2639`: **Overall API Documentation for Defining Schemas**\n\nThis file is an exhaustive and well‑organized reference for defining all types of schemas in Zod. The use of tabs, callouts, and detailed code examples makes it very user‑friendly. Please address the minor nitpicks regarding punctuation, phrasing (e.g. “complex. nested objects” should be “complex nested objects”), and the “colos” typo noted earlier.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~140-~140: Consider removing “of” to be more concise\nContext: ...sWith(\"fourscore\")) ``` </Tab> </Tabs>  All of the APIs documented below support the `erro...\n\n(ALL_OF_THE)\n\n---\n\n[uncategorized] ~307-~307: Possible missing comma found.\nContext: ...00\"); // ❌ (no offsets allowed) ```  To allow Timezone offsets can be allowed by sett...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n---\n\n[uncategorized] ~577-~577: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...``` </Callout>  You can also pass in an externally-declared TypeScript enum.   <Callout> **Zod 4** ...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n---\n\n[grammar] ~860-~860: Using ‘couple’ without ‘of’ is considered to be informal.\nContext: ...et's run through them. */}  There are a couple ways in which a key can be \"optional\" in Typ...\n\n(PLENTY_OF_NOUNS)\n\n---\n\n[duplication] ~883-~883: Possible typo: you repeated a word.\nContext: ...ect()` API can only represent `A`. When an an optional schema (e.g. `z.string().optio...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[misspelling] ~901-~901: Did you mean “side effect” (=adverse effect, unintended consequence)? Open compounds are not hyphenated.\nContext: ...: string | undefined; } ```  As a happy side-effect of this new `z.interface()` API, it's p...\n\n(AFFECT_EFFECT)\n\n---\n\n[grammar] ~1213-~1213: The verb ‘make’ seems to be in the wrong form here.\nContext: ...nvenience, Zod provides a dedicated API for make some or all properties optional, inspir...\n\n(FOR_VB)\n\n---\n\n[uncategorized] ~1338-~1338: Did you mean: “By default,”?\nContext: ...</Tab> </Tabs>  {/* ### `.passthrough`  By default Zod object schemas strip out unrecogniz...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[style] ~1354-~1354: Consider using a more polite wording.\nContext: ... has been stripped ```  Instead, if you want to pass through unknown keys, use `.pas...\n\n(IF_YOU_WANT)\n\n---\n\n[uncategorized] ~1365-~1365: Did you mean: “By default,”?\nContext: ...an\", extraKey: 61 } ```  ### `.strict`  By default Zod object schemas strip out unrecogniz...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[style] ~1447-~1447: In American English, abbreviations like “etc.” require a period.\nContext: ...ct APIs (pick, omit, required, partial, etc) work as you'd expect.  <Accordions> <A...\n\n(ETC_PERIOD)\n\n---\n\n[misspelling] ~1465-~1465: This word is normally spelled with a hyphen.\nContext: ...ema.array()), }); ```  This is verbose, error prone, and counter to the goals of Zod. The `...\n\n(EN_COMPOUNDS_ERROR_PRONE)\n\n---\n\n[uncategorized] ~1465-~1465: Use a comma before ‘so’ if it connects two independent clauses (unless they are closely connected and short).\nContext: ...face()` API was introduced in large part so recursive types could be more readily r...\n\n(COMMA_COMPOUND_SENTENCE_2)\n\n---\n\n[style] ~1513-~1513: Consider using a more polite wording.\nContext: ...b> </Tabs>  {/* ### `.nonempty`  If you want to ensure that an array contains at lea...\n\n(IF_YOU_WANT)\n\n---\n\n[style] ~1629-~1629: As a shorter alternative for ‘able to’, consider using “can”.\nContext: ...ue of the discriminator key, TypeScript is able to \"narrow\" the type signature as you'd ex...\n\n(BE_ABLE_TO)\n\n---\n\n[duplication] ~1645-~1645: Possible typo: you repeated a word.\nContext: .../ string   } } ```  You could represent with with a regular `z.union()`. But regular unio...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~1646-~1646: Possible missing comma found.\nContext: ...es. This can be slow for large unions.  So Zod provides a `z.discriminatedUnion()`...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n---\n\n[grammar] ~1742-~1742: The plural noun “schemas” cannot be used with the article “an”.\nContext: ...umber | symbol, unknown> ```  To create an object schemas containing keys defined by an enum:  ``...\n\n(A_NNS)\n\n---\n\n[style] ~1750-~1750: “Despite the fact that” is a wordy phrase. Consider making your sentence clearer.\nContext: ...ordion title=\"A note on numeric keys\">  Despite the fact that TypeScript lets you define `Record` typ...\n\n(ALTHOUGH_CLARITY)\n\n---\n\n[misspelling] ~1907-~1907: Use “a” instead of ‘an’ if the following word doesn’t start with a vowel sound, e.g. ‘a sentence’, ‘a university’.\nContext: ...in sequence, even if one of them causes an validation error. This is usually desir...\n\n(EN_A_VS_AN)\n\n---\n\n[uncategorized] ~1935-~1935: Loose punctuation mark.\nContext: ...ode\": \"custom\", \"message\": \"Too short!\" },   { \"code\": \"custom\", \"message\": \"Must...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~1966-~1966: Loose punctuation mark.\nContext: ...ode\": \"custom\", \"message\": \"Too short!\" }] ``` </Tab> </Tabs>  To customize the e...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[style] ~2266-~2266: ‘in conjunction with’ might be wordy. Consider a shorter alternative.\nContext: ...``   Most commonly, transforms are used in conjunction with [Pipes](#pipes). This combination is us...\n\n(EN_WORDINESS_PREMIUM_IN_CONJUNCTION_WITH)\n\n---\n\n[uncategorized] ~2474-~2474: “its” (belonging to it) seems less likely than “it”\nContext: ...fido; // works fine ```  In some cases, its can be desirable to simulate [nominal t...\n\n(AI_HYDRA_LEO_CPT_ITS_IT)\n\n</details>\n\n</details>\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>📜 Review details</summary>\n\n**Configuration used: CodeRabbit UI**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>📥 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 137d842b684e05d29b602e547d34a9596a49775d and 431ff5c6788875fd1ed48069cf61f13f9a84f338.\n\n</details>\n\n<details>\n<summary>📒 Files selected for processing (19)</summary>\n\n* `packages/docs/content/api.mdx` (1 hunks)\n* `packages/docs/content/basics.mdx` (1 hunks)\n* `packages/docs/content/ecosystem.mdx` (1 hunks)\n* `packages/docs/content/error-customization.mdx` (1 hunks)\n* `packages/docs/content/error-formatting.mdx` (1 hunks)\n* `packages/docs/content/generic-functions.mdx` (1 hunks)\n* `packages/docs/content/index.mdx` (1 hunks)\n* `packages/docs/content/json-schema.mdx` (1 hunks)\n* `packages/docs/content/meta.json` (1 hunks)\n* `packages/docs/content/metadata.mdx` (1 hunks)\n* `packages/docs/content/object-vs-interface.mdx` (1 hunks)\n* `packages/docs/content/packages/core.mdx` (1 hunks)\n* `packages/docs/content/packages/mini.mdx` (1 hunks)\n* `packages/docs/content/packages/zod.mdx` (1 hunks)\n* `packages/docs/content/parsing.mdx` (1 hunks)\n* `packages/docs/content/test.mdx` (1 hunks)\n* `packages/docs/content/type-inference.mdx` (1 hunks)\n* `packages/docs/content/v4/changelog.mdx` (1 hunks)\n* `packages/docs/content/v4/index.mdx` (1 hunks)\n\n</details>\n\n<details>\n<summary>🧰 Additional context used</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n<details>\n<summary>packages/docs/content/type-inference.mdx</summary>\n\n[uncategorized] ~17-~17: A comma might be missing here.\nContext: ...les ```  **What about transforms?**  In reality each Zod schema internally tracks **two...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n---\n\n[typographical] ~17-~17: After the expression ‘for example’ a comma is usually used.\nContext: ... mix, these two values can diverge. For instance `z.string().transform(val => val.length...\n\n(COMMA_FOR_EXAMPLE)\n\n</details>\n<details>\n<summary>packages/docs/content/generic-functions.mdx</summary>\n\n[uncategorized] ~54-~54: This verb may not be in the correct tense. Consider changing the tense to fit the context better.\nContext: ...e to how TypeScript inference works, it is treating `schema` like a `ZodTypeAny` instead of...\n\n(AI_EN_LECTOR_REPLACEMENT_VERB_TENSE)\n\n</details>\n<details>\n<summary>packages/docs/content/metadata.mdx</summary>\n\n[uncategorized] ~14-~14: The hyphen in strongly-typed is redundant.\nContext: ... of schemas, each associated with some *strongly-typed* metadata. To create a simple registry:...\n\n(ADVERB_LY_HYPHEN_FIX)\n\n---\n\n[uncategorized] ~192-~192: A comma may be missing after the conjunctive/linking adverb ‘Similarly’.\nContext: ...output type (`z.infer<typeof schema>`). Similarly you can use `z.$input` to reference the...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n</details>\n<details>\n<summary>packages/docs/content/v4/index.mdx</summary>\n\n[grammar] ~29-~29: Two determiners in a row. Choose either “a” or “the”.\nContext: ...ns-%2B1-desc). With luck, it will serve a the new foundation for many more years to c...\n\n(DT_DT)\n\n---\n\n[typographical] ~245-~245: Conjunctions like ‘and’ should not follow semicolons. Consider using a comma, or removing the conjunction.\nContext: ... In Zod 3, this took `4000ms` to compile; and adding additional calls to `.extend()` would t...\n\n(CONJUNCTION_AFTER_SEMICOLON)\n\n---\n\n[typographical] ~331-~331: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...  ### Exact(er) optional properties  In TypeScript a property can be \"optional\" in two dis...\n\n(IN_NNP_COMMA)\n\n---\n\n[style] ~338-~338: Three successive sentences begin with the same word. Consider rewording the sentence or use a thesaurus to find a synonym.\nContext: ...itted from the object (\"key optional\"). In `ValueOptional`, the `prop` key *must b...\n\n(ENGLISH_WORD_REPEAT_BEGINNING_RULE)\n\n---\n\n[typographical] ~377-~377: It seems that a comma is missing.\nContext: ...-in API.  ### True recursive types  But wait there's more! After implementing `z.int...\n\n(WAIT_COMMA)\n\n---\n\n[uncategorized] ~420-~420: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...od 4 introduces a new system for adding strongly-typed metadata to your schemas. Metadata isn'...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n---\n\n[style] ~559-~559: ‘by all means’ might be wordy. Consider a shorter alternative.\nContext: ...f you are using that package currently, by all means continue using it.   Zod now implements...\n\n(EN_WORDINESS_PREMIUM_BY_ALL_MEANS)\n\n---\n\n[style] ~599-~599: For conciseness, consider replacing this expression with an adverb.\nContext: ...d string   → at favoriteNumbers[1] ```  At the moment this isn't configurable; this may chang...\n\n(AT_THE_MOMENT)\n\n---\n\n[uncategorized] ~681-~681: A comma may be missing after the conjunctive/linking adverb ‘Similarly’.\nContext: ...] z.uint32();   // [0, 4294967295] ```  Similarly the following `bigint` numeric formats ...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[style] ~691-~691: As an alternative to the over-used intensifier ‘very’, consider replacing this phrase.\nContext: ...he existing `z.coerce.boolean()` API is very simple: falsy values (`false`, `undefined`, `n...\n\n(EN_WEAK_ADJECTIVE)\n\n---\n\n[style] ~691-~691: In American English, abbreviations like “etc.” require a period.\nContext: ..., `undefined`, `null`, `0`, `\"\"`, `NaN` etc) become `false`, truthy values become `...\n\n(ETC_PERIOD)\n\n---\n\n[grammar] ~780-~780: Using ‘couple’ without ‘of’ is considered to be informal.\nContext: ...minated union support has improved in a couple ways. First, you no longer need to specify t...\n\n(PLENTY_OF_NOUNS)\n\n</details>\n<details>\n<summary>packages/docs/content/packages/core.mdx</summary>\n\n[duplication] ~51-~51: Possible typo: you repeated a word.\nContext: ...rding to semver). Once the first stable release release of Zod 4, at which point `v1.0.0` will ...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[duplication] ~55-~55: Possible typo: you repeated a word.\nContext: ...Zod schemas (say, an API framework) you first first look into [Standard Schema](https://sta...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~59-~59: You might be missing the article “the” here.\nContext: ...ty (say, introspecting the schema) then Standard Schema won't be sufficient. In this cas...\n\n(AI_EN_LECTOR_MISSING_DETERMINER_THE)\n\n---\n\n[uncategorized] ~76-~76: A comma might be missing here.\nContext: ...cy lets users \"bring-their-own-Zod\". As written this allows the user to use any `0.x.y`...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n---\n\n[style] ~78-~78: Consider a shorter alternative to avoid wordiness.\nContext: ...d to pick *some* version of Zod to use, in order to write your code. Use a *dev dependency*...\n\n(IN_ORDER_TO_PREMIUM)\n\n---\n\n[grammar] ~378-~378: Consider using either the past participle “accepted” or the present participle “accepting” here.\nContext: ...ctices for doing so.  1. If you're just accept user-defined schemas, use Standard Sche...\n\n(BEEN_PART_AGREEMENT)\n\n---\n\n[grammar] ~384-~384: The word ‘installs’ is not a noun.\nContext: ...od/core`, avoiding accidental duplicate installs.   ```json {   \"peerDependencies\": {   ...\n\n(A_INSTALL)\n\n</details>\n<details>\n<summary>packages/docs/content/packages/zod.mdx</summary>\n\n[uncategorized] ~30-~30: The grammatical number of this noun doesn’t look right. Consider replacing it.\nContext: ...from [`@zod/core`](/packages/core). All instance of `ZodType` implement the following me...\n\n(AI_EN_LECTOR_REPLACEMENT_NOUN_NUMBER)\n\n</details>\n<details>\n<summary>packages/docs/content/error-customization.mdx</summary>\n\n[style] ~296-~296: This adverb was used twice in the sentence. Consider removing one of them or replacing them with a synonym.\nContext: ...ary automatically loads the `en` locale automatically. The `@zod/mini`package does not load a...\n\n(ADVERB_REPETITION_PREMIUM)\n\n---\n\n[uncategorized] ~296-~296: Possible missing comma found.\nContext: .../mini`package does not load any locale; instead all error messages default to `Invalid ...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n</details>\n<details>\n<summary>packages/docs/content/packages/mini.mdx</summary>\n\n[style] ~7-~7: ‘exact same’ might be wordy. Consider a shorter alternative.\nContext: ...the release of Zod 4. It implements the exact same functionality as `zod`, but using a *fu...\n\n(EN_WORDINESS_PREMIUM_EXACT_SAME)\n\n---\n\n[uncategorized] ~62-~62: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: .../mini` such methods aren't implemented. Instead you pass these checks into schemas usin...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[uncategorized] ~145-~145: Possible missing comma found.\nContext: ...r otherwise customized.  This means, by default the `message` property of all issues wi...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n</details>\n<details>\n<summary>packages/docs/content/error-formatting.mdx</summary>\n\n[style] ~8-~8: The phrase ‘in many cases’ is used quite frequently. Consider using a less frequent alternative to set your writing apart.\nContext: ...d _correctness_ in its error reporting. In many cases, it's helpful to convert the `$ZodError...\n\n(IN_MANY_STYLE_CASES)\n\n---\n\n[uncategorized] ~77-~77: The preposition “on” seems more likely in this position.\nContext: ...n easily access the errors that occured at a particular path. The `errors` field c...\n\n(AI_EN_LECTOR_REPLACEMENT_PREPOSITION)\n\n---\n\n[formatting] ~87-~87: Did you mean “?”\nContext: ...``  > Be sure to use optional chaining (`?.`) to avoid errors when accessing nested...\n\n(MULTIPLE_PUNCTATION_MARKS_1)\n\n</details>\n<details>\n<summary>packages/docs/content/ecosystem.mdx</summary>\n\n[style] ~17-~17: This expression usually appears with a “please” in front of it.\nContext: ... built a tool or library on top of Zod, let me know [on Twitter](https://twitter.com/colinh...\n\n(INSERT_PLEASE)\n\n---\n\n[uncategorized] ~62-~62: Loose punctuation mark.\nContext: ...- [`tRPC`](https://github.com/trpc/trpc): Build end-to-end typesafe APIs without ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~63-~63: Loose punctuation mark.\nContext: ...d-plugins/tree/main/packages/zod-nestjs): Helper methods for using Zod in a NestJ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~64-~64: Loose punctuation mark.\nContext: ...ithub.com/flock-community/zod-endpoints): Contract-first strictly typed endpoints...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~65-~65: Loose punctuation mark.\nContext: ...ps://github.com/evertdespiegeleer/zhttp): An OpenAPI compatible, strictly typed h...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~66-~66: Loose punctuation mark.\nContext: ....com/SeasonedSoftware/domain-functions/): Decouple your business logic from your ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~67-~67: Loose punctuation mark.\nContext: ...core`](https://github.com/ecyrbe/zodios): A typescript API client with runtime an...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~68-~68: Loose punctuation mark.\nContext: ...://github.com/RobinTail/express-zod-api): Build Express-based APIs with I/O schem...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~69-~69: Loose punctuation mark.\nContext: ...noduck/blob/main/src/tapiduck/README.md): End-to-end typesafe JSON APIs with Zod ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~70-~70: Loose punctuation mark.\nContext: ...://github.com/JakeFenley/koa-zod-router): Create typesafe routes in Koa with I/O ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~71-~71: Loose punctuation mark.\nContext: ...ttps://github.com/RobinTail/zod-sockets): Zod-powered Socket.IO microframework wi...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~73-~73: Loose punctuation mark.\nContext: ...](https://github.com/modevol-com/gqloom): Weave GraphQL schema and resolvers usin...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~77-~77: Loose punctuation mark.\nContext: ...ithub.com/react-hook-form/resolvers#zod): A first-party Zod resolver for React Ho...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~78-~78: Loose punctuation mark.\nContext: ...github.com/causaly/zod-validation-error): Generate user-friendly error messages f...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~79-~79: Loose punctuation mark.\nContext: ...b.com/robertLichtnow/zod-formik-adapter): A community-maintained Formik adapter f...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~80-~80: Loose punctuation mark.\nContext: ...https://github.com/esamattis/react-zorm): Standalone `<form>` generation and vali...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~81-~81: Loose punctuation mark.\nContext: ...](https://github.com/rileytomasek/zodix): Zod utilities for FormData and URLSearc...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~82-~82: Loose punctuation mark.\nContext: ...ps://conform.guide/api/zod/parseWithZod): A typesafe form validation library for ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~83-~83: Loose punctuation mark.\nContext: .../github.com/kiliman/remix-params-helper): Simplify integration of Zod with standa...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~84-~84: Loose punctuation mark.\nContext: ...//github.com/glazy/formik-validator-zod): Formik-compliant validator library that...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~85-~85: Loose punctuation mark.\nContext: ...ap`](https://github.com/aiji42/zod-i18n): Useful for translating Zod error messag...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~86-~86: Loose punctuation mark.\nContext: .../github.com/fabian-hiller/modular-forms): Modular form library for SolidJS that s...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~87-~87: Loose punctuation mark.\nContext: ...ttps://github.com/crutchcorn/houseform/): A React form library that uses Zod for ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~88-~88: Loose punctuation mark.\nContext: ...thub.com/ciscoheat/sveltekit-superforms): Supercharged form library for SvelteKit...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~89-~89: Loose punctuation mark.\nContext: ...ps://github.com/MonoidDev/mobx-zod-form): Data-first form builder based on MobX &...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~90-~90: Loose punctuation mark.\nContext: ...etm/vee-validate/tree/main/packages/zod): Form library for Vue.js with Zod schema...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~91-~91: Loose punctuation mark.\nContext: ...github.com/thepeaklab/zod-form-renderer): Auto-infer form fields from zod schema ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~92-~92: Loose punctuation mark.\nContext: ...-zod`](https://github.com/MrBr/antd-zod): Zod adapter for Ant Design form fields ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~93-~93: Loose punctuation mark.\nContext: ...`](https://github.com/schalkventer/frrm): Tiny 0.5kb Zod-based, HTML form abstrac...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~97-~97: Loose punctuation mark.\nContext: ...https://github.com/sachinraja/zod-to-ts): Generate TypeScript definitions from Zo...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~98-~98: Loose punctuation mark.\nContext: ...ub.com/StefanTerdell/zod-to-json-schema): Convert your Zod schemas into [JSON Sch...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~99-~99: Loose punctuation mark.\nContext: ...-plugins/tree/main/packages/zod-openapi): Converts a Zod schema to an OpenAPI v3....\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~100-~100: Loose punctuation mark.\nContext: ...://github.com/DavidTimms/zod-fast-check): Generate `fast-check` arbitraries from ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~101-~101: Loose punctuation mark.\nContext: ...bkk/abitia/tree/master/packages/zod-dto): Generate Nest.js DTOs from a Zod schema...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~102-~102: Loose punctuation mark.\nContext: ...com/turkerdev/fastify-type-provider-zod): Create Fastify type providers from Zod ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~103-~103: Loose punctuation mark.\nContext: ...ithub.com/asteasolutions/zod-to-openapi): Generate full OpenAPI (Swagger) docs fr...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~104-~104: Loose punctuation mark.\nContext: ...github.com/incetarik/nestjs-graphql-zod): Generates NestJS GraphQL model classes ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~105-~105: Loose punctuation mark.\nContext: ...ttps://github.com/samchungy/zod-openapi): Create full OpenAPI v3.x documentation ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~106-~106: Loose punctuation mark.\nContext: ...ithub.com/samchungy/fastify-zod-openapi): Fastify type provider, validation, seri...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~107-~107: Loose punctuation mark.\nContext: ... [`typeschema`](https://typeschema.com/): Universal adapter for schema validation...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~112-~112: Loose punctuation mark.\nContext: ...https://github.com/fabien0102/ts-to-zod): Convert TypeScript definitions into Zod...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~113-~113: Loose punctuation mark.\nContext: ...//github.com/johngeorgewright/runtyping): Generate Zod from static types & JSON s...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~114-~114: Loose punctuation mark.\nContext: ...ub.com/StefanTerdell/json-schema-to-zod): Convert your [JSON Schemas](https://jso...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~115-~115: Loose punctuation mark.\nContext: ...ttps://github.com/rsinohara/json-to-zod): Convert JSON objects into Zod schemas. ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~116-~116: Loose punctuation mark.\nContext: ...ql-codegen-typescript-validation-schema): GraphQL Code Generator plugin to genera...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~117-~117: Loose punctuation mark.\nContext: .../github.com/CarterGrimmeisen/zod-prisma): Generate Zod schemas from your Prisma s...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~118-~118: Loose punctuation mark.\nContext: ...ps://github.com/Southclaws/supervillain): Generate Zod schemas from your Go struc...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~119-~119: Loose punctuation mark.\nContext: ...b.com/omar-dulaimi/prisma-zod-generator): Emit Zod schemas from your Prisma schem...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~120-~120: Loose punctuation mark.\nContext: ...zod`](https://orm.drizzle.team/docs/zod): Emit Zod schemas from your Drizzle sche...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~121-~121: Loose punctuation mark.\nContext: ....com/omar-dulaimi/prisma-trpc-generator): Emit fully implemented tRPC routers and...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~123-~123: Loose punctuation mark.\nContext: ...[`quicktype`](https://app.quicktype.io/): Convert JSON objects and JSON schemas i...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~124-~124: Loose punctuation mark.\nContext: ...oto/sanity-typed/tree/main/packages/zod): Generate Zod Schemas from [Sanity Schem...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~125-~125: Loose punctuation mark.\nContext: ...tps://github.com/ivangreene/java-to-zod): Convert POJOs to Zod schemas - [`Orval`...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~131-~131: Loose punctuation mark.\nContext: ...zod-plugins/tree/main/packages/zod-mock): Generate mock data from a Zod schema. P...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~132-~132: Loose punctuation mark.\nContext: ...ps://github.com/dipasqualew/zod-mocking): Generate mock data from your Zod schema...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~133-~133: Loose punctuation mark.\nContext: ...://github.com/timdeschryver/zod-fixture): Use your zod schemas to automate the ge...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~134-~134: Loose punctuation mark.\nContext: ...- [`zocker`](https://zocker.sigrist.dev): Generate plausible mock-data from your ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~140-~140: Loose punctuation mark.\nContext: ...github.com/JacobWeisenburger/freerstore): Firestore cost optimizer. - [`slonik`](...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~141-~141: Loose punctuation mark.\nContext: ...me-validation-and-static-type-inference): Node.js Postgres client with strong Zod...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~142-~142: Loose punctuation mark.\nContext: ...emql`](https://github.com/a2lix/schemql): Enhances your SQL workflow by combining...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~143-~143: Loose punctuation mark.\nContext: ...`](https://github.com/mdbetancourt/soly): Create CLI applications with zod. - [`p...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~144-~144: Loose punctuation mark.\nContext: ...(https://github.com/vadimdemedes/pastel): Create CLI applications with react, zod...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~145-~145: Loose punctuation mark.\nContext: ...https://github.com/sidwebworks/zod-xlsx): A xlsx based resource validator using Z...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~146-~146: Loose punctuation mark.\nContext: ...v`](https://github.com/lostfictions/znv): Type-safe environment parsing and valid...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~147-~147: Loose punctuation mark.\nContext: ...https://github.com/alexmarqs/zod-config): Load configurations across multiple sou...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~148-~148: Loose punctuation mark.\nContext: ...in/packages/unplugin-environment#readme): A plugin for loading enviroment variabl...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~149-~149: Loose punctuation mark.\nContext: ...ps://codeberg.org/reesericci/zod-struct): Create runtime-checked structs with Zod...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~153-~153: Loose punctuation mark.\nContext: .../github.com/JacobWeisenburger/zod_utilz): Framework agnostic utilities for Zod. -...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~153-~153: When ‘Framework-agnostic’ is used as a modifier, it is usually spelled with a hyphen.\nContext: ...ithub.com/JacobWeisenburger/zod_utilz): Framework agnostic utilities for Zod. - [`zod-playground`]...\n\n(SPECIFIC_HYPHEN)\n\n---\n\n[uncategorized] ~154-~154: Loose punctuation mark.\nContext: ...://github.com/marilari88/zod-playground): A tool for learning and testing Zod sch...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~155-~155: Loose punctuation mark.\nContext: ...ttps://github.com/nereumelo/zod-sandbox): Controlled environment for testing zod ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~156-~156: Loose punctuation mark.\nContext: ...https://github.com/schalkventer/zod-dev): Conditionally disables Zod runtime pars...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~157-~157: Loose punctuation mark.\nContext: ...hub.com/duplojs/duplojs-zod-accelerator): Accelerates Zod's throughput up to ~100...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n</details>\n<details>\n<summary>packages/docs/content/v4/changelog.mdx</summary>\n\n[style] ~46-~46: ‘in conjunction with’ might be wordy. Consider a shorter alternative.\nContext: ...l sorts of footguns (they can't be used in conjunction with `errorMap`) and do not align with Zod's...\n\n(EN_WORDINESS_PREMIUM_IN_CONJUNCTION_WITH)\n\n---\n\n[uncategorized] ~194-~194: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...thod on `ZodError` has been deprecated. Instead use the top-level `z.treeifyError()` fu...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[uncategorized] ~198-~198: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...on `ZodError` has also been deprecated. Instead use the top-level `z.treeifyError()` fu...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[uncategorized] ~332-~332: Use a comma before ‘and’ if it connects two independent clauses (unless they are closely connected and short).\nContext: ...  This has been long deprecated in Zod 3 and it now removed in Zod 4. There is no di...\n\n(COMMA_COMPOUND_SENTENCE)\n\n---\n\n[uncategorized] ~332-~332: Did you mean “its” (the possessive pronoun)?\nContext: ...his API. There were lots of footguns in it's implementation, and it's use is general...\n\n(ITS_PREMIUM)\n\n---\n\n[grammar] ~332-~332: Did you mean to use the possessive pronoun “its”?\nContext: ...of footguns in it's implementation, and it's use is generally an anti-pattern.  ### ...\n\n(IT_S_ITS)\n\n---\n\n[misspelling] ~332-~332: This word is normally spelled as one.\nContext: ...mentation, and it's use is generally an anti-pattern.  ### changes `z.unknown()` optionality...\n\n(EN_COMPOUNDS_ANTI_PATTERN)\n\n---\n\n[grammar] ~446-~446: If ‘type’ is a classification term, ‘a’ is not necessary. Use “type of”. (The phrases ‘kind of’ and ‘sort of’ are informal if they mean ‘to some extent’.)\nContext: ...nement functions could still narrow the type of a schema. This wasn't documented but was ...\n\n(KIND_OF_A)\n\n---\n\n[uncategorized] ~458-~458: Loose punctuation mark.\nContext: ...4: still `unknown` ```  ## `z.ostring()`, etc dropped  The undocumented convenien...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[style] ~458-~458: In American English, abbreviations like “etc.” require a period.\nContext: ... still `unknown` ```  ## `z.ostring()`, etc dropped  The undocumented convenience m...\n\n(ETC_PERIOD)\n\n---\n\n[uncategorized] ~575-~575: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...eneric `Def` has been entirely removed. Instead the base class now only tracks `Output`...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[style] ~575-~575: The phrase ‘in many cases’ is used quite frequently. Consider using a less frequent alternative to set your writing apart from others.\nContext: ... `z.ZodType` to behave more intuitively in many cases.  ```ts const inferSchema<T extends z.Z...\n\n(IN_MANY_STYLE_CASES)\n\n---\n\n[style] ~605-~605: In American English, abbreviations like “etc.” require a period.\nContext: ...class, plus `$ZodString`, `$ZodNumber`, etc), utility functions/types, issue types ...\n\n(ETC_PERIOD)\n\n---\n\n[style] ~611-~611: In American English, abbreviations like “etc.” require a period.\nContext: ...class, plus `$ZodString`, `$ZodNumber`, etc), utility functions/types, issue types ...\n\n(ETC_PERIOD)\n\n---\n\n[typographical] ~613-~613: Consider adding a comma here.\nContext: ... error class (`$ZodError`).  As you can see these things are all prefixed with `$` ...\n\n(AS_YOU_CAN_SEE_COMMA)\n\n---\n\n[style] ~654-~654: ‘in conjunction with’ might be wordy. Consider a shorter alternative.\nContext: ... // => \"12\" ```  This is primarily used in conjunction with `ZodPipe`. The `.transform()` method no...\n\n(EN_WORDINESS_PREMIUM_IN_CONJUNCTION_WITH)\n\n</details>\n<details>\n<summary>packages/docs/content/json-schema.mdx</summary>\n\n[duplication] ~124-~124: Possible typo: you repeated a word.\nContext: ... {/* ### Pipes  Pipes contain and input and and output schema. Zod uses the *output sch...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~381-~381: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...: [ 'firstName', 'lastName' ] // } ```  Instead you can set the `reused` option to `\"re...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[duplication] ~418-~418: Possible typo: you repeated a word.\nContext: ...`   ### `pipes`  Pipes contain an input and and output schema. By default the result of...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~418-~418: Did you mean: “By default,”?\nContext: ...contain an input and and output schema. By default the result of `z.toJSONSchema` represen...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[uncategorized] ~433-~433: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...s a function that converts an `id` to a fully-qualified URI.  ```ts const myRegistry = z.regist...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n---\n\n[uncategorized] ~860-~860: Did you mean: “By default,”?\nContext: ...try will be extracted into `schemas`.   By default the `$ref` URIs are relative paths like...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[uncategorized] ~861-~861: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...s a function that converts an `id` to a fully-qualified URI.  ```ts z.toJSONSchema(z.globalRegi...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n</details>\n<details>\n<summary>packages/docs/content/api.mdx</summary>\n\n[style] ~140-~140: Consider removing “of” to be more concise\nContext: ...sWith(\"fourscore\")) ``` </Tab> </Tabs>  All of the APIs documented below support the `erro...\n\n(ALL_OF_THE)\n\n---\n\n[uncategorized] ~307-~307: Possible missing comma found.\nContext: ...00\"); // ❌ (no offsets allowed) ```  To allow Timezone offsets can be allowed by sett...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n---\n\n[uncategorized] ~577-~577: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...``` </Callout>  You can also pass in an externally-declared TypeScript enum.   <Callout> **Zod 4** ...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n---\n\n[grammar] ~860-~860: Using ‘couple’ without ‘of’ is considered to be informal.\nContext: ...et's run through them. */}  There are a couple ways in which a key can be \"optional\" in Typ...\n\n(PLENTY_OF_NOUNS)\n\n---\n\n[duplication] ~883-~883: Possible typo: you repeated a word.\nContext: ...ect()` API can only represent `A`. When an an optional schema (e.g. `z.string().optio...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[misspelling] ~901-~901: Did you mean “side effect” (=adverse effect, unintended consequence)? Open compounds are not hyphenated.\nContext: ...: string | undefined; } ```  As a happy side-effect of this new `z.interface()` API, it's p...\n\n(AFFECT_EFFECT)\n\n---\n\n[grammar] ~1213-~1213: The verb ‘make’ seems to be in the wrong form here.\nContext: ...nvenience, Zod provides a dedicated API for make some or all properties optional, inspir...\n\n(FOR_VB)\n\n---\n\n[uncategorized] ~1338-~1338: Did you mean: “By default,”?\nContext: ...</Tab> </Tabs>  {/* ### `.passthrough`  By default Zod object schemas strip out unrecogniz...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[style] ~1354-~1354: Consider using a more polite wording.\nContext: ... has been stripped ```  Instead, if you want to pass through unknown keys, use `.pas...\n\n(IF_YOU_WANT)\n\n---\n\n[uncategorized] ~1365-~1365: Did you mean: “By default,”?\nContext: ...an\", extraKey: 61 } ```  ### `.strict`  By default Zod object schemas strip out unrecogniz...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[style] ~1447-~1447: In American English, abbreviations like “etc.” require a period.\nContext: ...ct APIs (pick, omit, required, partial, etc) work as you'd expect.  <Accordions> <A...\n\n(ETC_PERIOD)\n\n---\n\n[misspelling] ~1465-~1465: This word is normally spelled with a hyphen.\nContext: ...ema.array()), }); ```  This is verbose, error prone, and counter to the goals of Zod. The `...\n\n(EN_COMPOUNDS_ERROR_PRONE)\n\n---\n\n[uncategorized] ~1465-~1465: Use a comma before ‘so’ if it connects two independent clauses (unless they are closely connected and short).\nContext: ...face()` API was introduced in large part so recursive types could be more readily r...\n\n(COMMA_COMPOUND_SENTENCE_2)\n\n---\n\n[style] ~1513-~1513: Consider using a more polite wording.\nContext: ...b> </Tabs>  {/* ### `.nonempty`  If you want to ensure that an array contains at lea...\n\n(IF_YOU_WANT)\n\n---\n\n[style] ~1629-~1629: As a shorter alternative for ‘able to’, consider using “can”.\nContext: ...ue of the discriminator key, TypeScript is able to \"narrow\" the type signature as you'd ex...\n\n(BE_ABLE_TO)\n\n---\n\n[duplication] ~1645-~1645: Possible typo: you repeated a word.\nContext: .../ string   } } ```  You could represent with with a regular `z.union()`. But regular unio...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~1646-~1646: Possible missing comma found.\nContext: ...es. This can be slow for large unions.  So Zod provides a `z.discriminatedUnion()`...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n---\n\n[grammar] ~1742-~1742: The plural noun “schemas” cannot be used with the article “an”.\nContext: ...umber | symbol, unknown> ```  To create an object schemas containing keys defined by an enum:  ``...\n\n(A_NNS)\n\n---\n\n[style] ~1750-~1750: “Despite the fact that” is a wordy phrase. Consider making your sentence clearer.\nContext: ...ordion title=\"A note on numeric keys\">  Despite the fact that TypeScript lets you define `Record` typ...\n\n(ALTHOUGH_CLARITY)\n\n---\n\n[misspelling] ~1907-~1907: Use “a” instead of ‘an’ if the following word doesn’t start with a vowel sound, e.g. ‘a sentence’, ‘a university’.\nContext: ...in sequence, even if one of them causes an validation error. This is usually desir...\n\n(EN_A_VS_AN)\n\n---\n\n[uncategorized] ~1935-~1935: Loose punctuation mark.\nContext: ...ode\": \"custom\", \"message\": \"Too short!\" },   { \"code\": \"custom\", \"message\": \"Must...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~1966-~1966: Loose punctuation mark.\nContext: ...ode\": \"custom\", \"message\": \"Too short!\" }] ``` </Tab> </Tabs>  To customize the e...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[style] ~2266-~2266: ‘in conjunction with’ might be wordy. Consider a shorter alternative.\nContext: ...``   Most commonly, transforms are used in conjunction with [Pipes](#pipes). This combination is us...\n\n(EN_WORDINESS_PREMIUM_IN_CONJUNCTION_WITH)\n\n---\n\n[uncategorized] ~2474-~2474: “its” (belonging to it) seems less likely than “it”\nContext: ...fido; // works fine ```  In some cases, its can be desirable to simulate [nominal t...\n\n(AI_HYDRA_LEO_CPT_ITS_IT)\n\n</details>\n\n</details>\n\n</details>\n\n<details>\n<summary>🔇 Additional comments (100)</summary><blockquote>\n\n<details>\n<summary>packages/docs/content/test.mdx (2)</summary>\n\n`1-4`: **Front Matter Validity**  \nThe YAML front matter is correctly formed with a title and description, ensuring proper metadata for the document. If additional metadata (e.g., author, date, tags) is beneficial for filtering or organization in the documentation system, consider adding it later.\n\n---\n\n`12-17`: **Cards Component Usage Verification**  \nThe section using the `<Cards>` and `<Card>` components is clear and concise. Make sure these components are properly imported or provided in the MDX context to ensure they render as expected when the documentation is built. If these are custom components, adding a short description or usage note could also help readers understand their functionality.\n\n</details>\n<details>\n<summary>packages/docs/content/object-vs-interface.mdx (1)</summary>\n\n`1-3`: **Front Matter Metadata Check**\n\nThe front matter is correctly configured with the title “Object vs. interface”.\n\n</details>\n<details>\n<summary>packages/docs/content/type-inference.mdx (3)</summary>\n\n`1-3`: **Front Matter Verification**\n\nThe front matter is properly set with the title “Type inference”.\n\n---\n\n`7-13`: **Code Example Clarity**\n\nThe code block demonstrating the use of `z.infer<typeof mySchema>` is clear and effectively illustrates type extraction.\n\n---\n\n`21-30`: **Input and Output Type Extraction Example**\n\nThe subsequent code block clearly shows how to extract both input and output types using `z.input`, `z.output`, and `z.infer`.\n\n</details>\n<details>\n<summary>packages/docs/content/json-schema.mdx (21)</summary>\n\n`1-3`: **Front Matter Verification**\n\nThe front matter is correctly configured with the title “JSON Schema”.\n\n---\n\n`5-11`: **UI Components and Feature Announcement**\n\nThe import statements and the Callout component effectively announce the new JSON Schema conversion feature. The use of an attractive icon (💎) adds visual appeal.\n\n---\n\n`14-30`: **JSON Schema Conversion Example**\n\nThe code example demonstrating how to convert a Zod schema using `z.toJSONSchema()` is concise and clear.\n\n---\n\n`32-33`: **Explanatory Text**\n\nThe text following the example succinctly explains that schemas are converted to their closest JSON Schema equivalents, including handling of unrepresentable types.\n\n---\n\n`34-46`: **Unrepresentable Types Example**\n\nThe code block listing unrepresentable types (with the ❌ markers) is effective in communicating which API endpoints are not supported in JSON Schema conversion.\n\n---\n\n`49-65`: **String Formats Demonstration**\n\nThe examples showing how certain Zod string schemas convert to JSON Schema (via `format`) are comprehensive and well-presented.\n\n---\n\n`67-71`: **Content Encoding Example**\n\nThe example for `z.base64()` demonstrates the use of `contentEncoding` clearly.\n\n---\n\n`73-83`: **Pattern-Based String Formats**\n\nThe block outlining additional string formats using patterns is succinct and helpful for users.\n\n---\n\n`85-98`: **Numeric Types Conversion**\n\nThe examples differentiating between generic numbers and integers (with potential exclusive bounds) are clear and informative.\n\n---\n\n`100-110`: **Nullability Handling**\n\nThe examples properly illustrate how both `null` and `undefined` are converted to `{ type: \"null\" }`.\n\n---\n\n`112-120`: **Optional and Nullable Schemas**\n\nThe examples using `z.optional` and `z.nullable` effectively show how to handle nullable types in JSON Schema conversion.\n\n---\n\n`127-136`: **Configuration Usage Example**\n\nThe code snippet showing how to pass a second argument to `z.toJSONSchema()` for configuration purposes is clear.\n\n---\n\n`139-171`: **ToJSONSchemaParams Interface Documentation**\n\nThe detailed interface definition for `ToJSONSchemaParams` is very comprehensive. Make sure any future changes in configuration options are reflected both in the interface and accompanying documentation.\n\n---\n\n`247-255`: **Target Parameter Examples**\n\nThe examples using the `target` option to switch between JSON Schema drafts are correct and clear.\n\n---\n\n`256-292`: **Metadata and Registries Examples with Tabs**\n\nThe usage examples for schema metadata (using `.meta()` or `.register()`) inside a Tabs component are structured well and illustrate the intended behavior clearly.\n\n---\n\n`293-310`: **Reiterated Unrepresentable Types**\n\nThe section reiterating the unrepresentable APIs is clear and reinforces the concept effectively.\n\n---\n\n`311-323`: **Error vs. \"any\" Handling for Unrepresentable Types**\n\nThe subsequent example demonstrates how to change the behavior for unrepresentable types by using the `{ unrepresentable: \"any\" }` option. Everything is well illustrated.\n\n---\n\n`324-342`: **Cycle Handling Example**\n\nThe example for handling cycles using `$ref` is informative. One note: the function call on line 336 appears as `toJSONSchema(User);` rather than `z.toJSONSchema(User);`—please verify that this call is consistent with your API design.\n\n---\n\n`343-349`: **Cycles \"Throw\" Option**\n\nThe example showing the use of the `cycles: \"throw\"` option to force an error on cyclic references is clear and useful.\n\n---\n\n`351-369`: **Reused Schemas (Inline) Example**\n\nThe code demonstrates how reused schemas are inlined by default when using `z.toJSONSchema()`.\n\n---\n\n`370-382`: **Reused Schemas (Ref Extraction)**\n\nThe example of using the `\"ref\"` option to extract reused schemas into `$defs` is clear and well documented.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~381-~381: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...: [ 'firstName', 'lastName' ] // } ```  Instead you can set the `reused` option to `\"re...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n</details>\n\n</details>\n\n</details>\n<details>\n<summary>packages/docs/content/generic-functions.mdx (15)</summary>\n\n`1-3`: **Front Matter Verification**\n\nThe front matter is correctly configured with the title “Generic functions”.\n\n---\n\n`5-8`: **Introduction Clarity**\n\nThe introductory text clearly explains the benefits of using TypeScript generics with Zod schemas.\n\n---\n\n`9-15`: **Initial inferSchema Example**\n\nThe first code example using `function inferSchema<T>(schema: z.ZodType<T>)` effectively illustrates the common pitfall of losing specific type information.\n\n---\n\n`16-18`: **Explanation of Limitation**\n\nThe follow‐up explanation properly notes that the initial approach limits TypeScript’s ability to infer the specific Zod subclass.\n\n---\n\n`19-22`: **Demonstration of inferSchema Limitation**\n\nThe example output clearly shows that the initial approach returns a generic `ZodType<string>`, highlighting the issue.\n\n---\n\n`23-27`: **Loss of Type Information Explained**\n\nThe explanation reinforces that the original approach loses the specific subclass (e.g. `ZodString`), which affects method availability.\n\n---\n\n`28-35`: **Improved inferSchema Example**\n\nThe revised code using `T extends z.ZodTypeAny` retains full type information. The example correctly shows that calling `inferSchema(z.string())` returns a specific subtype.\n\n---\n\n`36-37`: **Utility Type Clarification**\n\nThe note clarifying that `ZodTypeAny` is shorthand for `ZodType<any, any, any>` is clear and useful.\n\n---\n\n`41-42`: **Introducing Inference of Parsed Data**\n\nThe sub-heading clearly introduces the discussion on parsing and inferred types.\n\n---\n\n`43-52`: **Initial parseData Example**\n\nThe example demonstrating how `parseData` returns `any` is clear and effectively sets up the need for improvement.\n\n---\n\n`55-64`: **Improved parseData Example with Type Casting**\n\nThe revised `parseData` function using `as z.infer<T>` effectively recovers the correct type.\n\n---\n\n`65-66`: **Constraining Allowable Inputs**\n\nThe heading for this section clearly sets up the discussion on limiting accepted schema types.\n\n---\n\n`67-77`: **Overview of ZodType Generics**\n\nThe explanation of the three generic parameters of `ZodType` is informative and provides good context for later examples.\n\n---\n\n`78-90`: **Constraining Schema Inputs Example**\n\nThe `makeSchemaOptional` example clearly shows how to restrict inputs by using a constraint (here `z.ZodType<string>`), and the accompanying error message reinforces the type safety.\n\n---\n\n`91-91`: **Overall Clarity**\n\nThe document clearly explains best practices for writing generic functions with Zod schemas, ensuring both flexibility and type safety.\n\n</details>\n<details>\n<summary>packages/docs/content/parsing.mdx (1)</summary>\n\n`1-77`: **LGTM: Clear and Comprehensive Parsing Documentation**  \nThe explanations and examples for `.parse`, `.parseAsync`, `.safeParse`, and `.safeParseAsync` are clear and well-structured.\n\n</details>\n<details>\n<summary>packages/docs/content/v4/changelog.mdx (3)</summary>\n\n`1-7`: **Header and Import Statements are Clear and Well‑Structured**\n\nThe frontmatter (lines 1–3) and the import statements (lines 5–7) are correctly defined and follow our documentation conventions. Consider double‑checking that the title (“Migration guide”) follows the same capitalization style as other documentation files.\n\n---\n\n`23-42`: **Comprehensive Error Customization Section**\n\nThe “## Error customization” section clearly explains the changes in error handling—specifically, the replacement of the `message` parameter with a unified `error` parameter. The side‑by‑side example in the Tabs (lines 31–42) effectively contrasts the Zod 4 and Zod 3 APIs.\n\n---\n\n`100-108`: **Enhancement in ZodError Implementation**\n\nThe section describing how `ZodError` no longer extends JavaScript’s native `Error` class (lines 100–108) is clear and effectively motivates the performance improvements. The code example is concise and instructive.\n\n</details>\n<details>\n<summary>packages/docs/content/error-formatting.mdx (4)</summary>\n\n`1-7`: **Header and Imports in Error Formatting Docs**\n\nThe frontmatter and import statements (lines 1–7) are clear and consistent with our style. They set a solid foundation for the examples that follow.\n\n---\n\n`12-21`: **Example Schema for Error Formatting**\n\nThe example schema (lines 12–17) and the invalid data parsing example (lines 22–25) clearly establish the context for demonstrating error formatting utilities.\n\n---\n\n`90-105`: **`z.prettifyError()` Usage**\n\nThe example (lines 90–105) demonstrating the `z.prettifyError()` function is concise and shows how to generate a human‑readable string from the error object. The formatting of the output is clear.\n\n---\n\n`148-182`: **`z.flattenError()` Deprecation and Usage**\n\nThe documentation for `z.flattenError()` (lines 148–182) is informative. It explains that while the function can be useful for flat schemas, it loses information on deeper paths. This is well‑illustrated by the code examples provided.\n\n</details>\n<details>\n<summary>packages/docs/content/api.mdx (50)</summary>\n\n`11-24`: **Primitive Types Section**\n\nThe “## Primitives” section (lines 11–24) takes the reader through the basic types (string, number, bigint, etc.) supported by Zod. The examples are succinct and clear.\n\n---\n\n`26-33`: **Data Coercion with `z.coerce`**\n\nThe explanation and examples (lines 26–33) for coercing input data using `z.coerce` aptly differentiate between coercion and direct validation, making it easy for the reader to grasp.\n\n---\n\n`109-122`: **Extracting Allowed Values from Literals**\n\nThe example using Tabs (lines 109–122) to show how to extract literal values (as a Set) works very well. It clearly contrasts the behavior in Zod versus @zod/mini.\n\n---\n\n`156-170`: **String Validation APIs**\n\nThe sample code (lines 156–170) that demonstrates common string validations (max, min, length, regex, startsWith, etc.) is comprehensive and easy to follow, with clear comparisons between the two libraries.\n\n---\n\n`187-195`: **String Transformation APIs**\n\nThe transformation examples (lines 187–195) for operations such as trimming and case conversion are concise and effectively laid out using Tabs.\n\n---\n\n`206-264`: **String Formats and Regex Customization**\n\nThe section covering string formats—including `z.email()`, `z.uuid()`, `z.url()`, and various other format validators—is very detailed. The inclusion of multiple regex options (default, HTML5, RFC 5322, Unicode) is especially useful.\n\n---\n\n`266-284`: **UUID Validation Section**\n\nThe UUID examples (lines 266–284) clearly illustrate both the basic validator and options for specifying particular UUID versions, as well as convenience methods like `z.uuidv4()`.\n\n---\n\n`337-346`: **ISO Date Validation**\n\nThe demonstration of `z.iso.date()` (lines 337–346) is straightforward with clear examples of valid and invalid dates.\n\n---\n\n`348-363`: **ISO Time Validation**\n\nThe `z.iso.time()` examples (lines 348–363) accurately show how the validator works, including its limitations (no timezone offsets). The examples are concise.\n\n---\n\n`366-374`: **Time Precision in ISO Time**\n\nThe code snippet (lines 366–374) for setting a precision value demonstrates the impact of the `precision` option clearly.\n\n---\n\n`375-380`: **IP Addresses Validation**\n\nThe examples for validating IPv4 and IPv6 addresses (lines 375–380) are simple and effective.\n\n---\n\n`382-400`: **IP Ranges (CIDR) Validation**\n\nThe CIDR notation examples (lines 382–400) successfully illustrate how to validate IP ranges and specify version options.\n\n---\n\n`402-412`: **Number Validation Basics**\n\nThe usage of `z.number()` is well emphasized with examples that show proper handling of finite numbers versus edge cases (NaN, Infinity).\n\n---\n\n`414-429`: **Number‑Specific Validations**\n\nThis section (lines 414–429) detailing comparative number validations (gt, gte, lt, lte, positive, etc.) is comprehensive and informative.\n\n---\n\n`452-459`: **Integer Schemas**\n\nThe examples for integer schemas (lines 452–459) using `z.int()` and `z.int32()` are clear.\n\n---\n\n`461-496`: **BigInt Validation and Comparisons**\n\nThe BigInt section (lines 461–496) is detailed with both Zod and @zod/mini examples. It very effectively shows various comparison validations.\n\n---\n\n`501-508`: **Boolean Validation**\n\nThe boolean validation examples (lines 501–508) are succinct and adequately demonstrate the expected behavior.\n\n---\n\n`510-517`: **Date Instance Validation**\n\nThe examples for the Date schema (lines 510–517) using `z.date()` and `safeParse` are straightforward.\n\n---\n\n`519-525`: **Custom Error Messaging for Dates**\n\nThe snippet (lines 519–525) that shows how a custom error message can be specified for date parsing is clear and useful.\n\n---\n\n`527-542`: **Date‑Specific Validations**\n\nThe validations for minimum and maximum dates (lines 527–542) are clearly presented with parallel examples for Zod and @zod/mini.\n\n---\n\n`544-575`: **Enum Schema Validation**\n\nThe “## Enums” section (lines 544–575) effectively demonstrates both constructing a literal enum and using an externally‑declared TypeScript enum. The Callout regarding TypeScript enums is especially helpful.\n\n---\n\n`595-616`: **Accessing Schema’s Enum Values**\n\nThe example showcasing how to extract an enum‑like object from a Zod enum (lines 595–616) is very clear and compares the two implementations neatly.\n\n---\n\n`618-635`: **Enum Modification with `.exclude()` and `.extract()`**\n\nBoth the `.exclude()` (lines 618–627) and `.extract()` (lines 637–645) examples effectively demonstrate how to modify enum schemas. The comparisons between Zod and @zod/mini are instructive.\n\n---\n\n`656-680`: **New `z.stringbool()` Feature**\n\nThe new `z.stringbool()` section (lines 656–680) is very well documented with a wide range of examples showing acceptable truthy and falsy inputs.\n\n---\n\n`699-714`: **Optional Schemas**\n\nThe “## Optionals” section (lines 699–714) clearly demonstrates how to allow `undefined` values using `z.optional()`. The tabbed examples are well‑presented.\n\n---\n\n`716-727`: **Nullable Schemas**\n\nThe examples for `z.nullable()` (lines 716–727) are clear and provide consistent usage patterns between Zod and @zod/mini.\n\n---\n\n`763-778`: **Nullish Schemas**\n\nThe explanation and examples for creating nullish schemas (lines 763–778) are concise and clear.\n\n---\n\n`782-790`: **Handling Unknown Values**\n\nThe section (lines 782–790) covering `z.any()` versus `z.unknown()` provides an easy‑to‑understand clarification of their intended usage.\n\n---\n\n`792-798`: **Never Schema**\n\nThe brief section on `z.never()` (lines 792–798) is clear and to the point.\n\n---\n\n`800-821`: **Template Literals Support**\n\nThe “## Template literals” section (lines 800–821) is an exciting new addition. The examples clearly show how to compose a template literal type, making good use of both literal strings and dynamic schema parts.\n\n---\n\n`823-900`: **Object Schema Definitions and Differences**\n\nThis large section (lines 823–900) thoroughly explains creation of object schemas using both `z.object()` and `z.interface()`. The examples, including strict and loose variants, and detailed Comparisons using Tabs are very helpful. A few minor grammatical fixes (such as removing the stray period in “complex. nested objects”) would enhance clarity.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~860-~860: Using ‘couple’ without ‘of’ is considered to be informal.\nContext: ...et's run through them. */}  There are a couple ways in which a key can be \"optional\" in Typ...\n\n(PLENTY_OF_NOUNS)\n\n---\n\n[duplication] ~883-~883: Possible typo: you repeated a word.\nContext: ...ect()` API can only represent `A`. When an an optional schema (e.g. `z.string().optio...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n</details>\n\n</details>\n\n---\n\n`1555-1568`: **Tuple Schemas**\n\nThe tuple examples (lines 1555–1568) clearly demonstrate both fixed‑length tuples and variadic tuples. The explanation is concise and clear.\n\n---\n\n`1577-1601`: **Union Schemas and Option Extraction**\n\nThe union section (lines 1577–1601) effectively shows how to define unions using `z.union()` and how to extract the internal option schemas. The explanation is complete and the side‑by‑side examples add clarity.\n\n---\n\n`1627-1669`: **Discriminated Unions**\n\nThe discriminated union section (lines 1627–1669) provides an excellent explanation—covering both automatic discriminator key detection in Zod 4 and nested use cases. The examples are very clear.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~1629-~1629: As a shorter alternative for ‘able to’, consider using “can”.\nContext: ...ue of the discriminator key, TypeScript is able to \"narrow\" the type signature as you'd ex...\n\n(BE_ABLE_TO)\n\n---\n\n[duplication] ~1645-~1645: Possible typo: you repeated a word.\nContext: .../ string   } } ```  You could represent with with a regular `z.union()`. But regular unio...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~1646-~1646: Possible missing comma found.\nContext: ...es. This can be slow for large unions.  So Zod provides a `z.discriminatedUnion()`...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n</details>\n\n</details>\n\n---\n\n`1691-1716`: **Intersection Schemas**\n\nThe examples show how intersection types work and explain that using `.extend()` for merging object schemas is often preferred. This section is concise and informative.\n\n---\n\n`1721-1740`: **Record Schemas**\n\nThe documentation for `z.record()` (lines 1721–1740) clearly explains how to validate objects with dynamic keys. The note on numeric keys and JavaScript’s coercion to strings is especially useful.\n\n---\n\n`1764-1775`: **Map Schemas**\n\nThe map schema example (lines 1764–1775) is well‑demonstrated and shows how to enforce key/value types in a Map.\n\n---\n\n`1777-1788`: **Set Schemas**\n\nThe section (lines 1777–1788) on set schemas is comprehensive and includes examples of how to constrain Set sizes. The examples are clear for both Zod and @zod/mini.\n\n---\n\n`1808-1841`: **Promise Schemas (Deprecated)**\n\nThe promise section (lines 1808–1841) is thorough and clearly explains the two‑phase validation process for promise schemas. The deprecation notice is clearly communicated.\n\n---\n\n`1843-1857`: **Instanceof Checks**\n\nThe example of using `z.instanceof()` (lines 1843–1857) is concise and accurately conveys the intended usage for class instance validation.\n\n---\n\n`1858-1905`: **Refinement Methods**\n\nThe refinements section beginning at line 1858 explains how to use `.refine()` for custom validations, including asynchronous refinements and the pitfalls of throwing errors. The examples are detailed and the use of Tabs for Zod vs. @zod/mini is very instructive.\n\n---\n\n`2177-2188`: **Pipes for Schema Chaining**\n\nThe “Pipes” section (lines 2177–2188) clearly explains how to chain schemas with a pipe, along with useful examples in both implementations.\n\n---\n\n`2198-2242`: **Transforms**\n\nThe transforms section describes how to change the input data using a transform function. The examples—both synchronous and asynchronous—are clear, and the explanation of how to report validation issues within a transform is especially valuable.\n\n---\n\n`2341-2407`: **Default Values**\n\nThe section on setting default values (lines 2341–2407) is clear and provides examples for both static defaults and defaults generated by functions.\n\n---\n\n`2408-2430`: **Fallback Values with `.catch()`**\n\nThe examples for defining fallback values using the `.catch()` method (lines 2408–2430) are straightforward and illustrate both the static and dynamic forms clearly.\n\n---\n\n`2463-2495`: **Branded Types for Nominal Typing**\n\nThe branded types section (lines 2463–2495) clearly explains how to simulate nominal typing in TypeScript using brands. The examples are precise and informative.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[uncategorized] ~2474-~2474: “its” (belonging to it) seems less likely than “it”\nContext: ...fido; // works fine ```  In some cases, its can be desirable to simulate [nominal t...\n\n(AI_HYDRA_LEO_CPT_ITS_IT)\n\n</details>\n\n</details>\n\n---\n\n`2497-2559`: **Readonly Schemas**\n\nThe “Readonly” section (lines 2497–2559) demonstrates how to mark schemas (and their resulting parsed outputs) as immutable. The practical examples using `Object.freeze()` are especially helpful.\n\n---\n\n`2561-2570`: **Additional Template Literals**\n\nThis brief revisit to template literals (lines 2561–2570) reinforces the earlier detailed section. The example is concise and confirms the support for composing literal types.\n\n---\n\n`2571-2613`: **JSON‑Encodable Value Validation**\n\nThe JSON section (lines 2571–2613) shows how to validate any JSON‑encodable value by leveraging a lazy‑evaluated union. This convenience API is clearly explained.\n\n---\n\n`2613-2639`: **Custom Schemas**\n\nThe final section on using `z.custom()` (lines 2613–2639) is concise and demonstrates how to create a schema for arbitrary types (including template literal types). The caution about missing validation functions is very important.\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4078#pullrequestreview-2755096140",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4078",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4078#pullrequestreview-2755096140"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4078"
            }
          },
          "submitted_at": "2025-04-10T01:02:27Z",
          "commit_id": "431ff5c6788875fd1ed48069cf61f13f9a84f338"
        },
        {
          "id": 2755224184,
          "node_id": "PRR_kwDODqUnoM6kOWJ4",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "**Actionable comments posted: 56**\n\n<details>\n<summary>🔭 Outside diff range comments (3)</summary><blockquote>\n\n<details>\n<summary>packages/docs/content/object-vs-interface.mdx (1)</summary><blockquote>\n\n`4-6`: _🧹 Nitpick (assertive)_\n\n**Remove Extraneous Content**\n\nIt appears there is a stray character \"6\" on line 6. If this was not intended as part of the content, please remove it.\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/test.mdx (1)</summary><blockquote>\n\n`18-18`: _🧹 Nitpick (assertive)_\n\n**Trailing Content Check**\n\nLine 18 appears to be either a stray line number or an unintended extra line. If this line does not serve a purpose, consider removing it to maintain clean formatting.\n\n</blockquote></details>\n<details>\n<summary>packages/docs/content/meta.json (1)</summary><blockquote>\n\n`23-23`: _⚠️ Potential issue_\n\n**Remove Potential Extraneous Content**\n\nThere appears to be an unexpected line with the sole content `23` at the end of the file. If this line is actually present in the file, it will invalidate the JSON format. Please verify whether it is an annotation artifact; if it is part of the file, remove it.  \n  \nApply the following diff if necessary:\n\n```diff\n-23\n```\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>♻️ Duplicate comments (2)</summary><blockquote>\n\n<details>\n<summary>packages/docs/content/basics.mdx (2)</summary><blockquote>\n\n`57-60`: _⚠️ Potential issue_\n\n**Bug: Incorrect variable in catch block**\n\nIn this code snippet the caught exception is assigned to `err` but the condition incorrectly checks `if(error instanceof z.ZodError)`. Please update it to:\n```diff\n-  if(error instanceof z.ZodError){\n+  if(err instanceof z.ZodError){\n```\n\n---\n\n`82-86`: _⚠️ Potential issue_\n\n**Bug: Incorrect variable in catch block (for @zod/mini)**\n\nIn the `@zod/mini` example the catch block uses `if(error instanceof z.core.$ZodError)` when it should reference the caught error variable. Please change it as follows:\n```diff\n-  if(error instanceof z.core.$ZodError){\n+  if(err instanceof z.core.$ZodError){\n```\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>📜 Review details</summary>\n\n**Configuration used: CodeRabbit UI**\n**Review profile: ASSERTIVE**\n**Plan: Pro**\n\n<details>\n<summary>📥 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 137d842b684e05d29b602e547d34a9596a49775d and 431ff5c6788875fd1ed48069cf61f13f9a84f338.\n\n</details>\n\n<details>\n<summary>📒 Files selected for processing (19)</summary>\n\n* `packages/docs/content/api.mdx` (1 hunks)\n* `packages/docs/content/basics.mdx` (1 hunks)\n* `packages/docs/content/ecosystem.mdx` (1 hunks)\n* `packages/docs/content/error-customization.mdx` (1 hunks)\n* `packages/docs/content/error-formatting.mdx` (1 hunks)\n* `packages/docs/content/generic-functions.mdx` (1 hunks)\n* `packages/docs/content/index.mdx` (1 hunks)\n* `packages/docs/content/json-schema.mdx` (1 hunks)\n* `packages/docs/content/meta.json` (1 hunks)\n* `packages/docs/content/metadata.mdx` (1 hunks)\n* `packages/docs/content/object-vs-interface.mdx` (1 hunks)\n* `packages/docs/content/packages/core.mdx` (1 hunks)\n* `packages/docs/content/packages/mini.mdx` (1 hunks)\n* `packages/docs/content/packages/zod.mdx` (1 hunks)\n* `packages/docs/content/parsing.mdx` (1 hunks)\n* `packages/docs/content/test.mdx` (1 hunks)\n* `packages/docs/content/type-inference.mdx` (1 hunks)\n* `packages/docs/content/v4/changelog.mdx` (1 hunks)\n* `packages/docs/content/v4/index.mdx` (1 hunks)\n\n</details>\n\n<details>\n<summary>🧰 Additional context used</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n<details>\n<summary>packages/docs/content/json-schema.mdx</summary>\n\n[duplication] ~124-~124: Possible typo: you repeated a word.\nContext: ... {/* ### Pipes  Pipes contain and input and and output schema. Zod uses the *output sch...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~267-~267: A comma might be missing here.\nContext: ...context on storing metadata in Zod.  In Zod metadata is stored in registries. Zod e...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n---\n\n[uncategorized] ~381-~381: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...: [ 'firstName', 'lastName' ] // } ```  Instead you can set the `reused` option to `\"re...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[duplication] ~418-~418: Possible typo: you repeated a word.\nContext: ...`   ### `pipes`  Pipes contain an input and and output schema. By default the result of...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~418-~418: Did you mean: “By default,”?\nContext: ...contain an input and and output schema. By default the result of `z.toJSONSchema` represen...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[uncategorized] ~433-~433: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...s a function that converts an `id` to a fully-qualified URI.  ```ts const myRegistry = z.regist...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n---\n\n[uncategorized] ~860-~860: Did you mean: “By default,”?\nContext: ...try will be extracted into `schemas`.   By default the `$ref` URIs are relative paths like...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[uncategorized] ~861-~861: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...s a function that converts an `id` to a fully-qualified URI.  ```ts z.toJSONSchema(z.globalRegi...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n</details>\n<details>\n<summary>packages/docs/content/type-inference.mdx</summary>\n\n[uncategorized] ~17-~17: A comma might be missing here.\nContext: ...les ```  **What about transforms?**  In reality each Zod schema internally tracks **two...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n---\n\n[typographical] ~17-~17: After the expression ‘for example’ a comma is usually used.\nContext: ... mix, these two values can diverge. For instance `z.string().transform(val => val.length...\n\n(COMMA_FOR_EXAMPLE)\n\n</details>\n<details>\n<summary>packages/docs/content/metadata.mdx</summary>\n\n[uncategorized] ~14-~14: The hyphen in strongly-typed is redundant.\nContext: ... of schemas, each associated with some *strongly-typed* metadata. To create a simple registry:...\n\n(ADVERB_LY_HYPHEN_FIX)\n\n---\n\n[uncategorized] ~192-~192: A comma may be missing after the conjunctive/linking adverb ‘Similarly’.\nContext: ...output type (`z.infer<typeof schema>`). Similarly you can use `z.$input` to reference the...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n</details>\n<details>\n<summary>packages/docs/content/ecosystem.mdx</summary>\n\n[style] ~17-~17: This expression usually appears with a “please” in front of it.\nContext: ... built a tool or library on top of Zod, let me know [on Twitter](https://twitter.com/colinh...\n\n(INSERT_PLEASE)\n\n---\n\n[uncategorized] ~62-~62: Loose punctuation mark.\nContext: ...- [`tRPC`](https://github.com/trpc/trpc): Build end-to-end typesafe APIs without ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~63-~63: Loose punctuation mark.\nContext: ...d-plugins/tree/main/packages/zod-nestjs): Helper methods for using Zod in a NestJ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~64-~64: Loose punctuation mark.\nContext: ...ithub.com/flock-community/zod-endpoints): Contract-first strictly typed endpoints...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~65-~65: Loose punctuation mark.\nContext: ...ps://github.com/evertdespiegeleer/zhttp): An OpenAPI compatible, strictly typed h...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~66-~66: Loose punctuation mark.\nContext: ....com/SeasonedSoftware/domain-functions/): Decouple your business logic from your ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~67-~67: Loose punctuation mark.\nContext: ...core`](https://github.com/ecyrbe/zodios): A typescript API client with runtime an...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~68-~68: Loose punctuation mark.\nContext: ...://github.com/RobinTail/express-zod-api): Build Express-based APIs with I/O schem...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~69-~69: Loose punctuation mark.\nContext: ...noduck/blob/main/src/tapiduck/README.md): End-to-end typesafe JSON APIs with Zod ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~70-~70: Loose punctuation mark.\nContext: ...://github.com/JakeFenley/koa-zod-router): Create typesafe routes in Koa with I/O ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~71-~71: Loose punctuation mark.\nContext: ...ttps://github.com/RobinTail/zod-sockets): Zod-powered Socket.IO microframework wi...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~73-~73: Loose punctuation mark.\nContext: ...](https://github.com/modevol-com/gqloom): Weave GraphQL schema and resolvers usin...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~77-~77: Loose punctuation mark.\nContext: ...ithub.com/react-hook-form/resolvers#zod): A first-party Zod resolver for React Ho...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~78-~78: Loose punctuation mark.\nContext: ...github.com/causaly/zod-validation-error): Generate user-friendly error messages f...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~79-~79: Loose punctuation mark.\nContext: ...b.com/robertLichtnow/zod-formik-adapter): A community-maintained Formik adapter f...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~80-~80: Loose punctuation mark.\nContext: ...https://github.com/esamattis/react-zorm): Standalone `<form>` generation and vali...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~81-~81: Loose punctuation mark.\nContext: ...](https://github.com/rileytomasek/zodix): Zod utilities for FormData and URLSearc...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~82-~82: Loose punctuation mark.\nContext: ...ps://conform.guide/api/zod/parseWithZod): A typesafe form validation library for ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~83-~83: Loose punctuation mark.\nContext: .../github.com/kiliman/remix-params-helper): Simplify integration of Zod with standa...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~84-~84: Loose punctuation mark.\nContext: ...//github.com/glazy/formik-validator-zod): Formik-compliant validator library that...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~85-~85: Loose punctuation mark.\nContext: ...ap`](https://github.com/aiji42/zod-i18n): Useful for translating Zod error messag...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~86-~86: Loose punctuation mark.\nContext: .../github.com/fabian-hiller/modular-forms): Modular form library for SolidJS that s...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~87-~87: Loose punctuation mark.\nContext: ...ttps://github.com/crutchcorn/houseform/): A React form library that uses Zod for ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~88-~88: Loose punctuation mark.\nContext: ...thub.com/ciscoheat/sveltekit-superforms): Supercharged form library for SvelteKit...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~89-~89: Loose punctuation mark.\nContext: ...ps://github.com/MonoidDev/mobx-zod-form): Data-first form builder based on MobX &...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~90-~90: Loose punctuation mark.\nContext: ...etm/vee-validate/tree/main/packages/zod): Form library for Vue.js with Zod schema...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~91-~91: Loose punctuation mark.\nContext: ...github.com/thepeaklab/zod-form-renderer): Auto-infer form fields from zod schema ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~92-~92: Loose punctuation mark.\nContext: ...-zod`](https://github.com/MrBr/antd-zod): Zod adapter for Ant Design form fields ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~93-~93: Loose punctuation mark.\nContext: ...`](https://github.com/schalkventer/frrm): Tiny 0.5kb Zod-based, HTML form abstrac...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~97-~97: Loose punctuation mark.\nContext: ...https://github.com/sachinraja/zod-to-ts): Generate TypeScript definitions from Zo...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~98-~98: Loose punctuation mark.\nContext: ...ub.com/StefanTerdell/zod-to-json-schema): Convert your Zod schemas into [JSON Sch...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~99-~99: Loose punctuation mark.\nContext: ...-plugins/tree/main/packages/zod-openapi): Converts a Zod schema to an OpenAPI v3....\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~100-~100: Loose punctuation mark.\nContext: ...://github.com/DavidTimms/zod-fast-check): Generate `fast-check` arbitraries from ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~101-~101: Loose punctuation mark.\nContext: ...bkk/abitia/tree/master/packages/zod-dto): Generate Nest.js DTOs from a Zod schema...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~102-~102: Loose punctuation mark.\nContext: ...com/turkerdev/fastify-type-provider-zod): Create Fastify type providers from Zod ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~103-~103: Loose punctuation mark.\nContext: ...ithub.com/asteasolutions/zod-to-openapi): Generate full OpenAPI (Swagger) docs fr...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~104-~104: Loose punctuation mark.\nContext: ...github.com/incetarik/nestjs-graphql-zod): Generates NestJS GraphQL model classes ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~105-~105: Loose punctuation mark.\nContext: ...ttps://github.com/samchungy/zod-openapi): Create full OpenAPI v3.x documentation ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~106-~106: Loose punctuation mark.\nContext: ...ithub.com/samchungy/fastify-zod-openapi): Fastify type provider, validation, seri...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~107-~107: Loose punctuation mark.\nContext: ... [`typeschema`](https://typeschema.com/): Universal adapter for schema validation...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~112-~112: Loose punctuation mark.\nContext: ...https://github.com/fabien0102/ts-to-zod): Convert TypeScript definitions into Zod...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~113-~113: Loose punctuation mark.\nContext: ...//github.com/johngeorgewright/runtyping): Generate Zod from static types & JSON s...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~114-~114: Loose punctuation mark.\nContext: ...ub.com/StefanTerdell/json-schema-to-zod): Convert your [JSON Schemas](https://jso...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~115-~115: Loose punctuation mark.\nContext: ...ttps://github.com/rsinohara/json-to-zod): Convert JSON objects into Zod schemas. ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~116-~116: Loose punctuation mark.\nContext: ...ql-codegen-typescript-validation-schema): GraphQL Code Generator plugin to genera...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~117-~117: Loose punctuation mark.\nContext: .../github.com/CarterGrimmeisen/zod-prisma): Generate Zod schemas from your Prisma s...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~118-~118: Loose punctuation mark.\nContext: ...ps://github.com/Southclaws/supervillain): Generate Zod schemas from your Go struc...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~119-~119: Loose punctuation mark.\nContext: ...b.com/omar-dulaimi/prisma-zod-generator): Emit Zod schemas from your Prisma schem...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~120-~120: Loose punctuation mark.\nContext: ...zod`](https://orm.drizzle.team/docs/zod): Emit Zod schemas from your Drizzle sche...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~121-~121: Loose punctuation mark.\nContext: ....com/omar-dulaimi/prisma-trpc-generator): Emit fully implemented tRPC routers and...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~123-~123: Loose punctuation mark.\nContext: ...[`quicktype`](https://app.quicktype.io/): Convert JSON objects and JSON schemas i...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~124-~124: Loose punctuation mark.\nContext: ...oto/sanity-typed/tree/main/packages/zod): Generate Zod Schemas from [Sanity Schem...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~125-~125: Loose punctuation mark.\nContext: ...tps://github.com/ivangreene/java-to-zod): Convert POJOs to Zod schemas - [`Orval`...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~131-~131: Loose punctuation mark.\nContext: ...zod-plugins/tree/main/packages/zod-mock): Generate mock data from a Zod schema. P...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~132-~132: Loose punctuation mark.\nContext: ...ps://github.com/dipasqualew/zod-mocking): Generate mock data from your Zod schema...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~133-~133: Loose punctuation mark.\nContext: ...://github.com/timdeschryver/zod-fixture): Use your zod schemas to automate the ge...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~134-~134: Loose punctuation mark.\nContext: ...- [`zocker`](https://zocker.sigrist.dev): Generate plausible mock-data from your ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~140-~140: Loose punctuation mark.\nContext: ...github.com/JacobWeisenburger/freerstore): Firestore cost optimizer. - [`slonik`](...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~141-~141: Loose punctuation mark.\nContext: ...me-validation-and-static-type-inference): Node.js Postgres client with strong Zod...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~142-~142: Loose punctuation mark.\nContext: ...emql`](https://github.com/a2lix/schemql): Enhances your SQL workflow by combining...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~143-~143: Loose punctuation mark.\nContext: ...`](https://github.com/mdbetancourt/soly): Create CLI applications with zod. - [`p...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~144-~144: Loose punctuation mark.\nContext: ...(https://github.com/vadimdemedes/pastel): Create CLI applications with react, zod...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~145-~145: Loose punctuation mark.\nContext: ...https://github.com/sidwebworks/zod-xlsx): A xlsx based resource validator using Z...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~146-~146: Loose punctuation mark.\nContext: ...v`](https://github.com/lostfictions/znv): Type-safe environment parsing and valid...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~147-~147: Loose punctuation mark.\nContext: ...https://github.com/alexmarqs/zod-config): Load configurations across multiple sou...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~148-~148: Loose punctuation mark.\nContext: ...in/packages/unplugin-environment#readme): A plugin for loading enviroment variabl...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~149-~149: Loose punctuation mark.\nContext: ...ps://codeberg.org/reesericci/zod-struct): Create runtime-checked structs with Zod...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~153-~153: Loose punctuation mark.\nContext: .../github.com/JacobWeisenburger/zod_utilz): Framework agnostic utilities for Zod. -...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~153-~153: When ‘Framework-agnostic’ is used as a modifier, it is usually spelled with a hyphen.\nContext: ...ithub.com/JacobWeisenburger/zod_utilz): Framework agnostic utilities for Zod. - [`zod-playground`]...\n\n(SPECIFIC_HYPHEN)\n\n---\n\n[uncategorized] ~154-~154: Loose punctuation mark.\nContext: ...://github.com/marilari88/zod-playground): A tool for learning and testing Zod sch...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~155-~155: Loose punctuation mark.\nContext: ...ttps://github.com/nereumelo/zod-sandbox): Controlled environment for testing zod ...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~156-~156: Loose punctuation mark.\nContext: ...https://github.com/schalkventer/zod-dev): Conditionally disables Zod runtime pars...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~157-~157: Loose punctuation mark.\nContext: ...hub.com/duplojs/duplojs-zod-accelerator): Accelerates Zod's throughput up to ~100...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n</details>\n<details>\n<summary>packages/docs/content/v4/index.mdx</summary>\n\n[grammar] ~29-~29: Two determiners in a row. Choose either “a” or “the”.\nContext: ...ns-%2B1-desc). With luck, it will serve a the new foundation for many more years to c...\n\n(DT_DT)\n\n---\n\n[typographical] ~245-~245: Conjunctions like ‘and’ should not follow semicolons. Consider using a comma, or removing the conjunction.\nContext: ... In Zod 3, this took `4000ms` to compile; and adding additional calls to `.extend()` would t...\n\n(CONJUNCTION_AFTER_SEMICOLON)\n\n---\n\n[uncategorized] ~271-~271: A comma might be missing here.\nContext: ...30% smaller in Zod 4. That's good!  But ultimately Zod's method-heavy API is fundamentally...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n---\n\n[typographical] ~331-~331: It is considered good style to insert a comma after introductory phrases with dates or proper nouns.\nContext: ...  ### Exact(er) optional properties  In TypeScript a property can be \"optional\" in two dis...\n\n(IN_NNP_COMMA)\n\n---\n\n[style] ~338-~338: Three successive sentences begin with the same word. Consider rewording the sentence or use a thesaurus to find a synonym.\nContext: ...itted from the object (\"key optional\"). In `ValueOptional`, the `prop` key *must b...\n\n(ENGLISH_WORD_REPEAT_BEGINNING_RULE)\n\n---\n\n[uncategorized] ~373-~373: A comma might be missing here.\nContext: ...ou prefer it! For the sake of backwards compatibility `z.interface()` was added as an opt-in ...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n---\n\n[typographical] ~377-~377: It seems that a comma is missing.\nContext: ...-in API.  ### True recursive types  But wait there's more! After implementing `z.int...\n\n(WAIT_COMMA)\n\n---\n\n[uncategorized] ~414-~414: The grammatical number of this noun doesn’t look right. Consider replacing it.\nContext: ...inally represent commonly cyclical data structure like ORM schemas, GraphQL types, etc.  ...\n\n(AI_EN_LECTOR_REPLACEMENT_NOUN_NUMBER)\n\n---\n\n[uncategorized] ~420-~420: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...od 4 introduces a new system for adding strongly-typed metadata to your schemas. Metadata isn'...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n---\n\n[style] ~559-~559: ‘by all means’ might be wordy. Consider a shorter alternative.\nContext: ...f you are using that package currently, by all means continue using it.   Zod now implements...\n\n(EN_WORDINESS_PREMIUM_BY_ALL_MEANS)\n\n---\n\n[style] ~599-~599: For conciseness, consider replacing this expression with an adverb.\nContext: ...d string   → at favoriteNumbers[1] ```  At the moment this isn't configurable; this may chang...\n\n(AT_THE_MOMENT)\n\n---\n\n[uncategorized] ~627-~627: A comma might be missing here.\nContext: ...y choose to be more or less strict. For convenience Zod exports some common ones.  ```ts //...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n---\n\n[uncategorized] ~681-~681: A comma may be missing after the conjunctive/linking adverb ‘Similarly’.\nContext: ...] z.uint32();   // [0, 4294967295] ```  Similarly the following `bigint` numeric formats ...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[style] ~691-~691: As an alternative to the over-used intensifier ‘very’, consider replacing this phrase.\nContext: ...he existing `z.coerce.boolean()` API is very simple: falsy values (`false`, `undefined`, `n...\n\n(EN_WEAK_ADJECTIVE)\n\n---\n\n[style] ~691-~691: In American English, abbreviations like “etc.” require a period.\nContext: ..., `undefined`, `null`, `0`, `\"\"`, `NaN` etc) become `false`, truthy values become `...\n\n(ETC_PERIOD)\n\n---\n\n[grammar] ~780-~780: Using ‘couple’ without ‘of’ is considered to be informal.\nContext: ...minated union support has improved in a couple ways. First, you no longer need to specify t...\n\n(PLENTY_OF_NOUNS)\n\n</details>\n<details>\n<summary>packages/docs/content/generic-functions.mdx</summary>\n\n[uncategorized] ~54-~54: This verb may not be in the correct tense. Consider changing the tense to fit the context better.\nContext: ...e to how TypeScript inference works, it is treating `schema` like a `ZodTypeAny` instead of...\n\n(AI_EN_LECTOR_REPLACEMENT_VERB_TENSE)\n\n</details>\n<details>\n<summary>packages/docs/content/error-customization.mdx</summary>\n\n[style] ~296-~296: This adverb was used twice in the sentence. Consider removing one of them or replacing them with a synonym.\nContext: ...ary automatically loads the `en` locale automatically. The `@zod/mini`package does not load a...\n\n(ADVERB_REPETITION_PREMIUM)\n\n---\n\n[uncategorized] ~296-~296: Possible missing comma found.\nContext: .../mini`package does not load any locale; instead all error messages default to `Invalid ...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n</details>\n<details>\n<summary>packages/docs/content/packages/core.mdx</summary>\n\n[duplication] ~51-~51: Possible typo: you repeated a word.\nContext: ...rding to semver). Once the first stable release release of Zod 4, at which point `v1.0.0` will ...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[duplication] ~55-~55: Possible typo: you repeated a word.\nContext: ...Zod schemas (say, an API framework) you first first look into [Standard Schema](https://sta...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[style] ~78-~78: Consider a shorter alternative to avoid wordiness.\nContext: ...d to pick *some* version of Zod to use, in order to write your code. Use a *dev dependency*...\n\n(IN_ORDER_TO_PREMIUM)\n\n---\n\n[grammar] ~378-~378: Consider using either the past participle “accepted” or the present participle “accepting” here.\nContext: ...ctices for doing so.  1. If you're just accept user-defined schemas, use Standard Sche...\n\n(BEEN_PART_AGREEMENT)\n\n---\n\n[grammar] ~384-~384: The word ‘installs’ is not a noun.\nContext: ...od/core`, avoiding accidental duplicate installs.   ```json {   \"peerDependencies\": {   ...\n\n(A_INSTALL)\n\n</details>\n<details>\n<summary>packages/docs/content/v4/changelog.mdx</summary>\n\n[style] ~46-~46: ‘in conjunction with’ might be wordy. Consider a shorter alternative.\nContext: ...l sorts of footguns (they can't be used in conjunction with `errorMap`) and do not align with Zod's...\n\n(EN_WORDINESS_PREMIUM_IN_CONJUNCTION_WITH)\n\n---\n\n[uncategorized] ~106-~106: A comma might be missing here.\nContext: ...r\" code path unacceptably slow.  In Zod 4 the `ZodError` class no longer extends ...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n---\n\n[uncategorized] ~194-~194: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...thod on `ZodError` has been deprecated. Instead use the top-level `z.treeifyError()` fu...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[uncategorized] ~198-~198: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...on `ZodError` has also been deprecated. Instead use the top-level `z.treeifyError()` fu...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[uncategorized] ~332-~332: Use a comma before ‘and’ if it connects two independent clauses (unless they are closely connected and short).\nContext: ...  This has been long deprecated in Zod 3 and it now removed in Zod 4. There is no di...\n\n(COMMA_COMPOUND_SENTENCE)\n\n---\n\n[uncategorized] ~332-~332: Did you mean “its” (the possessive pronoun)?\nContext: ...his API. There were lots of footguns in it's implementation, and it's use is general...\n\n(ITS_PREMIUM)\n\n---\n\n[grammar] ~332-~332: Did you mean to use the possessive pronoun “its”?\nContext: ...of footguns in it's implementation, and it's use is generally an anti-pattern.  ### ...\n\n(IT_S_ITS)\n\n---\n\n[misspelling] ~332-~332: This word is normally spelled as one.\nContext: ...mentation, and it's use is generally an anti-pattern.  ### changes `z.unknown()` optionality...\n\n(EN_COMPOUNDS_ANTI_PATTERN)\n\n---\n\n[grammar] ~446-~446: If ‘type’ is a classification term, ‘a’ is not necessary. Use “type of”. (The phrases ‘kind of’ and ‘sort of’ are informal if they mean ‘to some extent’.)\nContext: ...nement functions could still narrow the type of a schema. This wasn't documented but was ...\n\n(KIND_OF_A)\n\n---\n\n[uncategorized] ~458-~458: Loose punctuation mark.\nContext: ...4: still `unknown` ```  ## `z.ostring()`, etc dropped  The undocumented convenien...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[style] ~458-~458: In American English, abbreviations like “etc.” require a period.\nContext: ... still `unknown` ```  ## `z.ostring()`, etc dropped  The undocumented convenience m...\n\n(ETC_PERIOD)\n\n---\n\n[uncategorized] ~575-~575: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...eneric `Def` has been entirely removed. Instead the base class now only tracks `Output`...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[style] ~575-~575: The phrase ‘in many cases’ is used quite frequently. Consider using a less frequent alternative to set your writing apart from others.\nContext: ... `z.ZodType` to behave more intuitively in many cases.  ```ts const inferSchema<T extends z.Z...\n\n(IN_MANY_STYLE_CASES)\n\n---\n\n[style] ~605-~605: In American English, abbreviations like “etc.” require a period.\nContext: ...class, plus `$ZodString`, `$ZodNumber`, etc), utility functions/types, issue types ...\n\n(ETC_PERIOD)\n\n---\n\n[style] ~611-~611: In American English, abbreviations like “etc.” require a period.\nContext: ...class, plus `$ZodString`, `$ZodNumber`, etc), utility functions/types, issue types ...\n\n(ETC_PERIOD)\n\n---\n\n[typographical] ~613-~613: Consider adding a comma here.\nContext: ... error class (`$ZodError`).  As you can see these things are all prefixed with `$` ...\n\n(AS_YOU_CAN_SEE_COMMA)\n\n---\n\n[style] ~654-~654: ‘in conjunction with’ might be wordy. Consider a shorter alternative.\nContext: ... // => \"12\" ```  This is primarily used in conjunction with `ZodPipe`. The `.transform()` method no...\n\n(EN_WORDINESS_PREMIUM_IN_CONJUNCTION_WITH)\n\n</details>\n<details>\n<summary>packages/docs/content/packages/mini.mdx</summary>\n\n[style] ~7-~7: ‘exact same’ might be wordy. Consider a shorter alternative.\nContext: ...the release of Zod 4. It implements the exact same functionality as `zod`, but using a *fu...\n\n(EN_WORDINESS_PREMIUM_EXACT_SAME)\n\n---\n\n[uncategorized] ~62-~62: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: .../mini` such methods aren't implemented. Instead you pass these checks into schemas usin...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[uncategorized] ~145-~145: Possible missing comma found.\nContext: ...r otherwise customized.  This means, by default the `message` property of all issues wi...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n</details>\n<details>\n<summary>packages/docs/content/error-formatting.mdx</summary>\n\n[style] ~8-~8: The phrase ‘in many cases’ is used quite frequently. Consider using a less frequent alternative to set your writing apart.\nContext: ...d _correctness_ in its error reporting. In many cases, it's helpful to convert the `$ZodError...\n\n(IN_MANY_STYLE_CASES)\n\n---\n\n[formatting] ~87-~87: Did you mean “?”\nContext: ...``  > Be sure to use optional chaining (`?.`) to avoid errors when accessing nested...\n\n(MULTIPLE_PUNCTATION_MARKS_1)\n\n</details>\n<details>\n<summary>packages/docs/content/api.mdx</summary>\n\n[style] ~140-~140: Consider removing “of” to be more concise\nContext: ...sWith(\"fourscore\")) ``` </Tab> </Tabs>  All of the APIs documented below support the `erro...\n\n(ALL_OF_THE)\n\n---\n\n[uncategorized] ~307-~307: Possible missing comma found.\nContext: ...00\"); // ❌ (no offsets allowed) ```  To allow Timezone offsets can be allowed by sett...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n---\n\n[uncategorized] ~577-~577: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...``` </Callout>  You can also pass in an externally-declared TypeScript enum.   <Callout> **Zod 4** ...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n---\n\n[uncategorized] ~690-~690: Possible missing preposition found.\nContext: ...rue\"],   falsy: [\"no\", \"false\"] }) ```  Be default the schema is *case-insensitive...\n\n(AI_HYDRA_LEO_MISSING_TO)\n\n---\n\n[uncategorized] ~691-~691: Possible missing comma found.\nContext: ...\"],   falsy: [\"no\", \"false\"] }) ```  Be default the schema is *case-insensitive*; all i...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n---\n\n[grammar] ~860-~860: Using ‘couple’ without ‘of’ is considered to be informal.\nContext: ...et's run through them. */}  There are a couple ways in which a key can be \"optional\" in Typ...\n\n(PLENTY_OF_NOUNS)\n\n---\n\n[duplication] ~883-~883: Possible typo: you repeated a word.\nContext: ...ect()` API can only represent `A`. When an an optional schema (e.g. `z.string().optio...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[misspelling] ~901-~901: Did you mean “side effect” (=adverse effect, unintended consequence)? Open compounds are not hyphenated.\nContext: ...: string | undefined; } ```  As a happy side-effect of this new `z.interface()` API, it's p...\n\n(AFFECT_EFFECT)\n\n---\n\n[grammar] ~1213-~1213: The verb ‘make’ seems to be in the wrong form here.\nContext: ...nvenience, Zod provides a dedicated API for make some or all properties optional, inspir...\n\n(FOR_VB)\n\n---\n\n[uncategorized] ~1338-~1338: Did you mean: “By default,”?\nContext: ...</Tab> </Tabs>  {/* ### `.passthrough`  By default Zod object schemas strip out unrecogniz...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[style] ~1354-~1354: Consider using a more polite wording.\nContext: ... has been stripped ```  Instead, if you want to pass through unknown keys, use `.pas...\n\n(IF_YOU_WANT)\n\n---\n\n[uncategorized] ~1365-~1365: Did you mean: “By default,”?\nContext: ...an\", extraKey: 61 } ```  ### `.strict`  By default Zod object schemas strip out unrecogniz...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[style] ~1447-~1447: In American English, abbreviations like “etc.” require a period.\nContext: ...ct APIs (pick, omit, required, partial, etc) work as you'd expect.  <Accordions> <A...\n\n(ETC_PERIOD)\n\n---\n\n[misspelling] ~1465-~1465: This word is normally spelled with a hyphen.\nContext: ...ema.array()), }); ```  This is verbose, error prone, and counter to the goals of Zod. The `...\n\n(EN_COMPOUNDS_ERROR_PRONE)\n\n---\n\n[uncategorized] ~1465-~1465: Use a comma before ‘so’ if it connects two independent clauses (unless they are closely connected and short).\nContext: ...face()` API was introduced in large part so recursive types could be more readily r...\n\n(COMMA_COMPOUND_SENTENCE_2)\n\n---\n\n[style] ~1513-~1513: Consider using a more polite wording.\nContext: ...b> </Tabs>  {/* ### `.nonempty`  If you want to ensure that an array contains at lea...\n\n(IF_YOU_WANT)\n\n---\n\n[style] ~1629-~1629: As a shorter alternative for ‘able to’, consider using “can”.\nContext: ...ue of the discriminator key, TypeScript is able to \"narrow\" the type signature as you'd ex...\n\n(BE_ABLE_TO)\n\n---\n\n[duplication] ~1645-~1645: Possible typo: you repeated a word.\nContext: .../ string   } } ```  You could represent with with a regular `z.union()`. But regular unio...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~1646-~1646: Possible missing comma found.\nContext: ...es. This can be slow for large unions.  So Zod provides a `z.discriminatedUnion()`...\n\n(AI_HYDRA_LEO_MISSING_COMMA)\n\n---\n\n[grammar] ~1742-~1742: The plural noun “schemas” cannot be used with the article “an”.\nContext: ...umber | symbol, unknown> ```  To create an object schemas containing keys defined by an enum:  ``...\n\n(A_NNS)\n\n---\n\n[style] ~1750-~1750: “Despite the fact that” is a wordy phrase. Consider making your sentence clearer.\nContext: ...ordion title=\"A note on numeric keys\">  Despite the fact that TypeScript lets you define `Record` typ...\n\n(ALTHOUGH_CLARITY)\n\n---\n\n[misspelling] ~1907-~1907: Use “a” instead of ‘an’ if the following word doesn’t start with a vowel sound, e.g. ‘a sentence’, ‘a university’.\nContext: ...in sequence, even if one of them causes an validation error. This is usually desir...\n\n(EN_A_VS_AN)\n\n---\n\n[uncategorized] ~1935-~1935: Loose punctuation mark.\nContext: ...ode\": \"custom\", \"message\": \"Too short!\" },   { \"code\": \"custom\", \"message\": \"Must...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[uncategorized] ~1966-~1966: Loose punctuation mark.\nContext: ...ode\": \"custom\", \"message\": \"Too short!\" }] ``` </Tab> </Tabs>  To customize the e...\n\n(UNLIKELY_OPENING_PUNCTUATION)\n\n---\n\n[style] ~2266-~2266: ‘in conjunction with’ might be wordy. Consider a shorter alternative.\nContext: ...``   Most commonly, transforms are used in conjunction with [Pipes](#pipes). This combination is us...\n\n(EN_WORDINESS_PREMIUM_IN_CONJUNCTION_WITH)\n\n---\n\n[uncategorized] ~2474-~2474: “its” (belonging to it) seems less likely than “it”\nContext: ...fido; // works fine ```  In some cases, its can be desirable to simulate [nominal t...\n\n(AI_HYDRA_LEO_CPT_ITS_IT)\n\n</details>\n\n</details>\n\n</details>\n\n<details>\n<summary>🔇 Additional comments (27)</summary><blockquote>\n\n<details>\n<summary>packages/docs/content/object-vs-interface.mdx (1)</summary>\n\n`1-3`: **Front Matter Initialization Looks Good**\n\nThe front matter is correctly set up with the required title metadata. Consider adding additional metadata (like a description or tags) if that fits the documentation strategy for future scalability.\n\n</details>\n<details>\n<summary>packages/docs/content/test.mdx (1)</summary>\n\n`12-17`: **Cards Component Usage: Clear and Structured**\n\nThe usage of the `<Cards>` and `<Card>` components is well-organized. Please confirm that these components are globally available or properly imported in the MDX environment to avoid runtime issues. Also, verify that the linked URLs are up-to-date.\n\n</details>\n<details>\n<summary>packages/docs/content/meta.json (1)</summary>\n\n`1-22`: **JSON Structure and Content Organization**\n\nThe metadata object is well-structured and clearly delineates the documentation sections using both boolean flags and section separators. The `\"pages\"` array effectively categorizes content with intuitive separators like `\"---Beta---\"`, `\"---Documentation---\"`, and `\"---Packages---\"`. This design should enhance navigation for the documentation toolchain, assuming it correctly interprets these separator strings.\n\n</details>\n<details>\n<summary>packages/docs/content/type-inference.mdx (1)</summary>\n\n`5-13`: **Review of Code Examples**  \nThe examples demonstrating how to extract both the inferred type and the separate input/output types are clear and informative. They effectively illustrate that `z.infer` returns the output type even when a transformation is applied.\n\n</details>\n<details>\n<summary>packages/docs/content/json-schema.mdx (1)</summary>\n\n`1-894`: **Overall Documentation Quality**  \nThe new JSON Schema documentation is very comprehensive. The numerous code examples covering different schema types, configuration options, and advanced topics (e.g. cycles, reused schemas, external URIs) provide a valuable reference for users. Excellent work ensuring that each feature of `z.toJSONSchema()` is demonstrated.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[duplication] ~124-~124: Possible typo: you repeated a word.\nContext: ... {/* ### Pipes  Pipes contain and input and and output schema. Zod uses the *output sch...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~267-~267: A comma might be missing here.\nContext: ...context on storing metadata in Zod.  In Zod metadata is stored in registries. Zod e...\n\n(AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA)\n\n---\n\n[uncategorized] ~381-~381: A comma may be missing after the conjunctive/linking adverb ‘Instead’.\nContext: ...: [ 'firstName', 'lastName' ] // } ```  Instead you can set the `reused` option to `\"re...\n\n(SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA)\n\n---\n\n[duplication] ~418-~418: Possible typo: you repeated a word.\nContext: ...`   ### `pipes`  Pipes contain an input and and output schema. By default the result of...\n\n(ENGLISH_WORD_REPEAT_RULE)\n\n---\n\n[uncategorized] ~418-~418: Did you mean: “By default,”?\nContext: ...contain an input and and output schema. By default the result of `z.toJSONSchema` represen...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[uncategorized] ~433-~433: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...s a function that converts an `id` to a fully-qualified URI.  ```ts const myRegistry = z.regist...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n---\n\n[uncategorized] ~860-~860: Did you mean: “By default,”?\nContext: ...try will be extracted into `schemas`.   By default the `$ref` URIs are relative paths like...\n\n(BY_DEFAULT_COMMA)\n\n---\n\n[uncategorized] ~861-~861: Although a hyphen is possible, it is not necessary in a compound modifier in which the first word is an adverb that ends in ‘ly’.\nContext: ...s a function that converts an `id` to a fully-qualified URI.  ```ts z.toJSONSchema(z.globalRegi...\n\n(HYPHENATED_LY_ADVERB_ADJECTIVE)\n\n</details>\n\n</details>\n\n</details>\n<details>\n<summary>packages/docs/content/index.mdx (4)</summary>\n\n`1-8`: **Initial Setup and Imports are Clean**  \nThe front matter and import statements (lines 1–8) are well defined; the file correctly sets a centered layout and properly imports both accordion and tab components as well as sponsorship components.\n\n---\n\n`66-73`: **Beta Release Announcement Section**  \nThe beta announcement (lines 66–73) is clear and engaging. The use of a separate div and clear call-to-action (“Click here to read the release notes”) is a good UX practice.\n\n---\n\n`97-116`: **Installation and Requirements Sections are Informative**  \nThe sections detailing TypeScript version requirements, enabling `strict` mode, and installation instructions are well written and provide essential information for new users.\n\n---\n\n`153-184`: **Sponsors Section: Organized and Effective**  \nThe sponsors section is well organized, with clear headings for Platinum, Gold, Silver, and Bronze tiers. The inclusion of the respective components keeps the content modular and easy to update as sponsorship details change.\n\n</details>\n<details>\n<summary>packages/docs/content/generic-functions.mdx (4)</summary>\n\n`1-8`: **Front Matter and Introduction are Clear**  \nThe front matter (lines 1–3) and the introductory paragraph on generic functions are succinct and set the stage for the examples that follow.\n\n---\n\n`12-15`: **Initial Example Demonstrating a Pitfall**  \nThe first code snippet (lines 12–15) correctly illustrates the issue with using a generic parameter of type `z.ZodType<T>`. This is an effective way to introduce the discussion on type loss.\n\n---\n\n`56-60`: **Corrected Example with Type Casting is Clear**  \nThe improved `parseData` function (lines 56–60) correctly uses a type cast to ensure the inferred type is preserved. The inline comment also effectively highlights the change.\n\n---\n\n`66-90`: **Constraining Inputs Example is Informative**  \nThe final example demonstrating how to constrain allowable schemas (lines 66–90) is clear and provides useful feedback through the TypeScript error when passing an incorrect schema type.\n\n</details>\n<details>\n<summary>packages/docs/content/packages/zod.mdx (5)</summary>\n\n`1-4`: **Front Matter is Succinct and Accurate**  \nThe front matter (lines 1–3) correctly sets the title for the documentation page.\n\n---\n\n`5-10`: **Overview of the `zod` Package**  \nThe introductory paragraph (lines 5–10) provides a solid high-level overview of the `zod` package, emphasizing the library’s focus on developer experience and bundle size.\n\n---\n\n`11-19`: **Schema Definition Example is Clear and Concise**  \nThe code snippet demonstrating the use of `z.interface` (lines 11–19) is well written and gives a clear example of defining a schema using `zod`.\n\n---\n\n`21-28`: **Chaining API Example is Informative**  \nThe chaining example (lines 21–28) illustrates how to use method chaining for schema configuration. This example is succinct and demonstrates multiple methods in a compact form.\n\n---\n\n`32-74`: **Comprehensive Method List**  \nThe detailed list of methods (lines 32–74) is very comprehensive. It clearly documents parsing, refinement, wrapping, metadata, and utility methods available on Zod schemas. This level of detail will be extremely helpful for developers.\n\n</details>\n<details>\n<summary>packages/docs/content/parsing.mdx (1)</summary>\n\n`1-33`: **LGTM**\n\nThe documentation clearly explains the various parsing methods with comprehensive and accurate examples.\n\n</details>\n<details>\n<summary>packages/docs/content/metadata.mdx (1)</summary>\n\n`1-7`: **Front Matter and Imports Look Good**  \nThe YAML front matter and import statements are correctly formatted and clear.\n\n</details>\n<details>\n<summary>packages/docs/content/v4/index.mdx (1)</summary>\n\n`1-7`: **Front Matter and Import Section Are Solid**  \nThe YAML front matter, title, and import statements are all in order.\n\n</details>\n<details>\n<summary>packages/docs/content/packages/core.mdx (1)</summary>\n\n`1-4`: **Front Matter and Introduction Are Clear**  \nThe front matter and introductory text clearly set the stage for this documentation page.\n\n</details>\n<details>\n<summary>packages/docs/content/v4/changelog.mdx (2)</summary>\n\n`1-7`: **Changelog Front Matter and Import Statements Are Well Structured**  \nThe front matter, title, and initial import statements (lines 1–7) are properly formatted.\n\n---\n\n`52-98`: **Error Customization Examples Are Informative**  \nThe side-by-side examples comparing Zod 4 with Zod 3 for error customization (using Tabs) are clear and helpful. Ensure that code formatting remains consistent throughout the document.\n\n</details>\n<details>\n<summary>packages/docs/content/error-formatting.mdx (3)</summary>\n\n`1-7`: **Front Matter and Imports Are in Order**  \nThe YAML front matter and the import statements (lines 1–7) for this document look good.\n\n---\n\n`8-15`: **Error Formatting Intro and Schema Example Look Good**  \nThe introduction outlining the importance of complete and correct error reporting is clear, and the following simple schema example effectively sets up the context.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~8-~8: The phrase ‘in many cases’ is used quite frequently. Consider using a less frequent alternative to set your writing apart.\nContext: ...d _correctness_ in its error reporting. In many cases, it's helpful to convert the `$ZodError...\n\n(IN_MANY_STYLE_CASES)\n\n</details>\n\n</details>\n\n---\n\n`87-90`: **Optional Chaining Usage Demonstrated Well**  \nThe example demonstrating the use of optional chaining to access errors in nested properties is correct and clearly illustrates the intended usage.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[formatting] ~87-~87: Did you mean “?”\nContext: ...``  > Be sure to use optional chaining (`?.`) to avoid errors when accessing nested...\n\n(MULTIPLE_PUNCTATION_MARKS_1)\n\n</details>\n\n</details>\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4078#pullrequestreview-2755224184",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4078",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4078#pullrequestreview-2755224184"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4078"
            }
          },
          "submitted_at": "2025-04-10T03:25:53Z",
          "commit_id": "431ff5c6788875fd1ed48069cf61f13f9a84f338"
        }
      ],
      "comment_list": [
        {
          "user": {
            "login": "vercel[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/8329?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        }
      ],
      "review_comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        }
      ]
    },
    {
      "id": 2447131055,
      "number": 4077,
      "state": "closed",
      "created_at": "2025-04-08T23:38:46Z",
      "merged_at": null,
      "title": "Add files via upload",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 0,
      "deletions": 0,
      "changed_files": 2,
      "comments": 2,
      "review_comments": 0,
      "commits": 1,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "netlify[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/13473?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2446956473,
      "number": 4076,
      "state": "closed",
      "created_at": "2025-04-08T21:12:53Z",
      "merged_at": "2025-04-08T21:48:29Z",
      "title": "fixing inkeep chat button widget",
      "user": {
        "login": "amikofalvy",
        "avatar_url": "https://avatars.githubusercontent.com/u/5668128?v=4"
      },
      "labels": [],
      "additions": 35,
      "deletions": 48,
      "changed_files": 4,
      "comments": 1,
      "review_comments": 0,
      "commits": 2,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        }
      ],
      "review_comment_list": []
    },
    {
      "id": 2446652855,
      "number": 4074,
      "state": "closed",
      "created_at": "2025-04-08T18:18:17Z",
      "merged_at": "2025-05-19T13:07:02Z",
      "title": "Zod 4",
      "user": {
        "login": "colinhacks",
        "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
      },
      "labels": [],
      "additions": 67098,
      "deletions": 38975,
      "changed_files": 549,
      "comments": 4,
      "review_comments": 379,
      "commits": 553,
      "reviews": [
        {
          "id": 2751485262,
          "node_id": "PRR_kwDODqUnoM6kAFVO",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751485262",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751485262"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T21:46:31Z",
          "commit_id": "49a3c8c9b1cd316500b8a6c0cf26dc6e108a3880"
        },
        {
          "id": 2751486347,
          "node_id": "PRR_kwDODqUnoM6kAFmL",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751486347",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751486347"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T21:47:16Z",
          "commit_id": "49a3c8c9b1cd316500b8a6c0cf26dc6e108a3880"
        },
        {
          "id": 2751487892,
          "node_id": "PRR_kwDODqUnoM6kAF-U",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751487892",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751487892"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T21:48:13Z",
          "commit_id": "49a3c8c9b1cd316500b8a6c0cf26dc6e108a3880"
        },
        {
          "id": 2751489908,
          "node_id": "PRR_kwDODqUnoM6kAGd0",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751489908",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751489908"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T21:49:08Z",
          "commit_id": "49a3c8c9b1cd316500b8a6c0cf26dc6e108a3880"
        },
        {
          "id": 2751493954,
          "node_id": "PRR_kwDODqUnoM6kAHdC",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751493954",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751493954"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T21:52:07Z",
          "commit_id": "49a3c8c9b1cd316500b8a6c0cf26dc6e108a3880"
        },
        {
          "id": 2751496758,
          "node_id": "PRR_kwDODqUnoM6kAII2",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751496758",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751496758"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T21:54:12Z",
          "commit_id": "49a3c8c9b1cd316500b8a6c0cf26dc6e108a3880"
        },
        {
          "id": 2751497688,
          "node_id": "PRR_kwDODqUnoM6kAIXY",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751497688",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751497688"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T21:54:48Z",
          "commit_id": "49a3c8c9b1cd316500b8a6c0cf26dc6e108a3880"
        },
        {
          "id": 2751499759,
          "node_id": "PRR_kwDODqUnoM6kAI3v",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751499759",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751499759"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T21:56:24Z",
          "commit_id": "49a3c8c9b1cd316500b8a6c0cf26dc6e108a3880"
        },
        {
          "id": 2751505400,
          "node_id": "PRR_kwDODqUnoM6kAKP4",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751505400",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751505400"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T22:00:31Z",
          "commit_id": "49a3c8c9b1cd316500b8a6c0cf26dc6e108a3880"
        },
        {
          "id": 2751540448,
          "node_id": "PRR_kwDODqUnoM6kASzg",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751540448",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751540448"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T22:27:07Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751542869,
          "node_id": "PRR_kwDODqUnoM6kATZV",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751542869",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751542869"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T22:28:57Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751546935,
          "node_id": "PRR_kwDODqUnoM6kAUY3",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751546935",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751546935"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T22:32:20Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751553282,
          "node_id": "PRR_kwDODqUnoM6kAV8C",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751553282",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751553282"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T22:37:48Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751567314,
          "node_id": "PRR_kwDODqUnoM6kAZXS",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751567314",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751567314"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T22:50:57Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751598067,
          "node_id": "PRR_kwDODqUnoM6kAg3z",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751598067",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751598067"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T23:19:10Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751599756,
          "node_id": "PRR_kwDODqUnoM6kAhSM",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751599756",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751599756"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T23:20:37Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751602171,
          "node_id": "PRR_kwDODqUnoM6kAh37",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751602171",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751602171"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T23:23:09Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751611621,
          "node_id": "PRR_kwDODqUnoM6kAkLl",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751611621",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751611621"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T23:31:35Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751613679,
          "node_id": "PRR_kwDODqUnoM6kAkrv",
          "user": {
            "login": "colinhacks",
            "id": 3084745,
            "node_id": "MDQ6VXNlcjMwODQ3NDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?u=00ba705b6a5ceaa3b4c5f3582ddb944f891f8847&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colinhacks",
            "html_url": "https://github.com/colinhacks",
            "followers_url": "https://api.github.com/users/colinhacks/followers",
            "following_url": "https://api.github.com/users/colinhacks/following{/other_user}",
            "gists_url": "https://api.github.com/users/colinhacks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colinhacks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colinhacks/subscriptions",
            "organizations_url": "https://api.github.com/users/colinhacks/orgs",
            "repos_url": "https://api.github.com/users/colinhacks/repos",
            "events_url": "https://api.github.com/users/colinhacks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colinhacks/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751613679",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "OWNER",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751613679"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T23:33:36Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751621524,
          "node_id": "PRR_kwDODqUnoM6kAmmU",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751621524",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751621524"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T23:41:28Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751640827,
          "node_id": "PRR_kwDODqUnoM6kArT7",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751640827",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751640827"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T23:57:07Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751642299,
          "node_id": "PRR_kwDODqUnoM6kArq7",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751642299",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751642299"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-08T23:58:26Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751645707,
          "node_id": "PRR_kwDODqUnoM6kAsgL",
          "user": {
            "login": "igalklebanov",
            "id": 14938291,
            "node_id": "MDQ6VXNlcjE0OTM4Mjkx",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?u=704cf0a447d678ce1ca31bad521c6310815c585c&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igalklebanov",
            "html_url": "https://github.com/igalklebanov",
            "followers_url": "https://api.github.com/users/igalklebanov/followers",
            "following_url": "https://api.github.com/users/igalklebanov/following{/other_user}",
            "gists_url": "https://api.github.com/users/igalklebanov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igalklebanov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igalklebanov/subscriptions",
            "organizations_url": "https://api.github.com/users/igalklebanov/orgs",
            "repos_url": "https://api.github.com/users/igalklebanov/repos",
            "events_url": "https://api.github.com/users/igalklebanov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igalklebanov/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751645707",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "COLLABORATOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751645707"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-09T00:02:27Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751697557,
          "node_id": "PRR_kwDODqUnoM6kA5KV",
          "user": {
            "login": "colinhacks",
            "id": 3084745,
            "node_id": "MDQ6VXNlcjMwODQ3NDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?u=00ba705b6a5ceaa3b4c5f3582ddb944f891f8847&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colinhacks",
            "html_url": "https://github.com/colinhacks",
            "followers_url": "https://api.github.com/users/colinhacks/followers",
            "following_url": "https://api.github.com/users/colinhacks/following{/other_user}",
            "gists_url": "https://api.github.com/users/colinhacks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colinhacks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colinhacks/subscriptions",
            "organizations_url": "https://api.github.com/users/colinhacks/orgs",
            "repos_url": "https://api.github.com/users/colinhacks/repos",
            "events_url": "https://api.github.com/users/colinhacks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colinhacks/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751697557",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "OWNER",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751697557"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-09T00:42:38Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751701834,
          "node_id": "PRR_kwDODqUnoM6kA6NK",
          "user": {
            "login": "colinhacks",
            "id": 3084745,
            "node_id": "MDQ6VXNlcjMwODQ3NDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?u=00ba705b6a5ceaa3b4c5f3582ddb944f891f8847&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colinhacks",
            "html_url": "https://github.com/colinhacks",
            "followers_url": "https://api.github.com/users/colinhacks/followers",
            "following_url": "https://api.github.com/users/colinhacks/following{/other_user}",
            "gists_url": "https://api.github.com/users/colinhacks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colinhacks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colinhacks/subscriptions",
            "organizations_url": "https://api.github.com/users/colinhacks/orgs",
            "repos_url": "https://api.github.com/users/colinhacks/repos",
            "events_url": "https://api.github.com/users/colinhacks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colinhacks/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751701834",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "OWNER",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751701834"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-09T00:44:15Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751713374,
          "node_id": "PRR_kwDODqUnoM6kA9Be",
          "user": {
            "login": "colinhacks",
            "id": 3084745,
            "node_id": "MDQ6VXNlcjMwODQ3NDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?u=00ba705b6a5ceaa3b4c5f3582ddb944f891f8847&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colinhacks",
            "html_url": "https://github.com/colinhacks",
            "followers_url": "https://api.github.com/users/colinhacks/followers",
            "following_url": "https://api.github.com/users/colinhacks/following{/other_user}",
            "gists_url": "https://api.github.com/users/colinhacks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colinhacks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colinhacks/subscriptions",
            "organizations_url": "https://api.github.com/users/colinhacks/orgs",
            "repos_url": "https://api.github.com/users/colinhacks/repos",
            "events_url": "https://api.github.com/users/colinhacks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colinhacks/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751713374",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "OWNER",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751713374"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-09T00:48:49Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751715504,
          "node_id": "PRR_kwDODqUnoM6kA9iw",
          "user": {
            "login": "colinhacks",
            "id": 3084745,
            "node_id": "MDQ6VXNlcjMwODQ3NDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?u=00ba705b6a5ceaa3b4c5f3582ddb944f891f8847&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colinhacks",
            "html_url": "https://github.com/colinhacks",
            "followers_url": "https://api.github.com/users/colinhacks/followers",
            "following_url": "https://api.github.com/users/colinhacks/following{/other_user}",
            "gists_url": "https://api.github.com/users/colinhacks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colinhacks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colinhacks/subscriptions",
            "organizations_url": "https://api.github.com/users/colinhacks/orgs",
            "repos_url": "https://api.github.com/users/colinhacks/repos",
            "events_url": "https://api.github.com/users/colinhacks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colinhacks/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751715504",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "OWNER",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751715504"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-09T00:49:37Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2751718683,
          "node_id": "PRR_kwDODqUnoM6kA-Ub",
          "user": {
            "login": "colinhacks",
            "id": 3084745,
            "node_id": "MDQ6VXNlcjMwODQ3NDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?u=00ba705b6a5ceaa3b4c5f3582ddb944f891f8847&v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/colinhacks",
            "html_url": "https://github.com/colinhacks",
            "followers_url": "https://api.github.com/users/colinhacks/followers",
            "following_url": "https://api.github.com/users/colinhacks/following{/other_user}",
            "gists_url": "https://api.github.com/users/colinhacks/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/colinhacks/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/colinhacks/subscriptions",
            "organizations_url": "https://api.github.com/users/colinhacks/orgs",
            "repos_url": "https://api.github.com/users/colinhacks/repos",
            "events_url": "https://api.github.com/users/colinhacks/events{/privacy}",
            "received_events_url": "https://api.github.com/users/colinhacks/received_events",
            "type": "User",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751718683",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "OWNER",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2751718683"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-09T00:50:35Z",
          "commit_id": "3a9465d7145180a999f3a6446095881de1480ced"
        },
        {
          "id": 2754462873,
          "node_id": "PRR_kwDODqUnoM6kLcSZ",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "**Actionable comments posted: 57**\n\n<details>\n<summary>🔭 Outside diff range comments (2)</summary><blockquote>\n\n<details>\n<summary>experiments/partial_generics.ts (1)</summary><blockquote>\n\n`1-52`: _🛠️ Refactor suggestion_\n\n**Add overall documentation explaining the purpose of this experimental file.**\n\nThis file contains various TypeScript type experiments but lacks overall documentation about its purpose, goals, and expected outcomes.\n\n\n```diff\n+/**\n+ * Experimental TypeScript file exploring:\n+ * 1. Dynamic property assignment with generic type constraints\n+ * 2. Type merging strategies using mapped and conditional types\n+ * 3. Interface extension and class inheritance patterns\n+ * 4. TypeScript's type checking behavior with empty types and excess properties\n+ * \n+ * This file is experimental and meant for exploring TypeScript's type system capabilities\n+ * rather than for production use.\n+ */\nexport const _Dynamic = class {\n  constructor(properties: object) {\n```\n\n</blockquote></details>\n<details>\n<summary>experiments/intermediate.ts (1)</summary><blockquote>\n\n`270-294`: _🛠️ Refactor suggestion_\n\n**Return statement missing for `validateNullable`.**\n\nInside `validateNullable`, if `input !== null`, the function ends without a return. This leads to returning `undefined`. Consider explicitly returning either a `ZodFail` or the validated value:\n\n\n```diff\nfunction validateNullable(\n  this: ZodNullableDef & $ZodType,\n  input: unknown,\n  ctx?: parse.ParseContext\n): ParseResult<unknown> {\n  if (input === null) return input;\n-  // function exits without return => returns undefined\n+  return new ZodFail([\n+    {\n+      input,\n+      code: \"invalid_type\",\n+      expected: \"null\",\n+      received: parse.t(input),\n+    },\n+  ], ctx);\n}\n```\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>♻️ Duplicate comments (2)</summary><blockquote>\n\n<details>\n<summary>packages/core/LICENSE (1)</summary><blockquote>\n\n`1-22`: **MIT License File Looks Great!**  \nThe MIT License text is correctly added and follows the standard format. It’s good to see that the copyright notice reflects the updated year and owner.\n\n</blockquote></details>\n<details>\n<summary>packages/core/package.json (1)</summary><blockquote>\n\n`3-3`: **Verify the version strategy for core package**\n\nThe package is using version \"0.1.0\" which indicates it's in early development, while other Zod packages might be using v4.x.x. This aligns with the discussion in previous reviews about independent versioning.\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>🧹 Nitpick comments (123)</summary><blockquote>\n\n<details>\n<summary>experiments/oops.ts (5)</summary><blockquote>\n\n`1-2`: **Consider removing `@ts-nocheck` for experimental development**\n\nEven for experimental code, using TypeScript's type checking can help catch issues early. Consider enabling type checking and addressing any issues that arise to better validate your experimental approach.\n\n---\n\n`9-31`: **The non-standard property naming with `~` prefix needs documentation**\n\nThe abstract class uses properties prefixed with `~` without explaining the naming convention. This is unusual and may cause confusion for other developers.\n\nAlso, line 29 uses a type assertion (`as any`) which bypasses TypeScript's type checking. This can hide potential type errors.\n\n\n```diff\nabstract class ZodType<Out = unknown, In = unknown> implements ZodDef {\n  kind: string;\n\n-  \"~optional\": boolean;\n-  \"~metadata\"?: unknown;\n-  \"~output\": Out;\n-  \"~input\": In;\n-  \"~context\": unknown;\n-  abstract \"~parse\"(x: unknown): Out;\n+  // These properties use '~' prefix to indicate internal implementation details\n+  \"~optional\": boolean;\n+  \"~metadata\"?: unknown;\n+  \"~output\": Out;\n+  \"~input\": In;\n+  \"~context\": unknown;\n+  abstract \"~parse\"(x: unknown): Out;\n\n  meta(): this[\"~metadata\"];\n  meta<M>(meta: M): $meta<this, M>;\n  meta<M>(meta?: M) {\n    if (meta === undefined) return this[\"~metadata\"];\n    return { ...this, \"~metadata\": meta };\n  }\n\n  optional(): $optional<this> {\n    return {\n      ...this,\n-    } as any;\n+    } as $optional<this>;\n  }\n}\n```\n\n---\n\n`55-60`: **Consider using TypeScript's built-in utility types**\n\nThe custom utility types could potentially be simplified by leveraging TypeScript's built-in utility types like `Partial<T>` or `Required<T>`. Also, using symbols for optional values may be unnecessary if TypeScript's union types with `undefined` are sufficient.\n\n\nFor example, consider refactoring `$optional` to use TypeScript's union with `undefined`:\n\n```diff\n-const $optional = Symbol(\"optional\");\n-type $optional<T extends ZodType> = Omit<T, \"~output\" | \"~input\"> & {\n-  \"~output\": T[\"~output\"] | typeof $optional;\n-  \"~input\": T[\"~input\"] | typeof $optional;\n-};\n+type $optional<T extends ZodType> = Omit<T, \"~output\" | \"~input\"> & {\n+  \"~output\": T[\"~output\"] | undefined;\n+  \"~input\": T[\"~input\"] | undefined;\n+};\n```\n\n---\n\n`73-73`: **Remove or comment out debug console.log statements**\n\nDebug logging should be removed or commented out in committed code, even in experimental files, to maintain cleanliness.\n\n\n```diff\n-console.log(schema[\"~parse\"](\"asdfasdf\"));\n+// console.log(schema[\"~parse\"](\"asdfasdf\"));\n```\n\n---\n\n`3-82`: **Consider adding unit tests for this experimental approach**\n\nSince this is a significant architectural experiment that might be incorporated into the main codebase, it would be beneficial to have unit tests demonstrating the functionality and validating the approach.\n\n\nAlso, the empty export statement at the end suggests this file might be intended as a module, but there's no clear export of the utility functions or classes. Consider what parts of this experimental code should be exported for testing or potential integration.\n\n</blockquote></details>\n<details>\n<summary>experiments/mixins_v2.ts (1)</summary><blockquote>\n\n`37-37`: **Incomplete comment.**\n\nThis appears to be an abandoned line of code. Consider removing it or completing the implementation.\n\n</blockquote></details>\n<details>\n<summary>experiments/partial_generics.ts (6)</summary><blockquote>\n\n`1-7`: **Consider adding safety checks to the dynamic assignment.**\n\nThe `_Dynamic` class constructor directly assigns all properties from the input object without any validation or filtering. This could potentially allow overriding built-in object properties or methods if they exist in the input object.\n\n\n```diff\nexport const _Dynamic = class {\n  constructor(properties: object) {\n-    Object.assign(this, properties);\n+    for (const [key, value] of Object.entries(properties)) {\n+      if (Object.prototype.hasOwnProperty.call(properties, key) && \n+          key !== 'constructor' && \n+          typeof (this as any)[key] !== 'function') {\n+        (this as any)[key] = value;\n+      }\n+    }\n  }\n} as new <T extends object>(\n  base: T\n) => T;\n```\n\n---\n\n`9-10`: **Improve error suppression comment with detailed explanation.**\n\nThe `@ts-expect-error` comment lacks detailed context about the specific error being suppressed and why it's safe to ignore.\n\n\n```diff\n-/** @ts-expect-error (needed to extend `t`, but safe given ShallowClone's implementation) **/\n+/** \n+ * @ts-expect-error \n+ * This suppresses the \"Static members cannot reference class type parameters\" error.\n+ * It's safe to ignore because we're ensuring type consistency through the implementation\n+ * and we need this pattern to properly extend the generic dynamic base class.\n+ */\nexport class Dynamic<T extends object> extends _Dynamic<T> {}\n```\n\n---\n\n`28-31`: **Consider implementing the clone method seen in other experimental files.**\n\nThe `Base` class doesn't implement any methods. Based on the relevant code snippet from `experiments/interfaces.ts`, consider adding a `~clone` method to maintain consistency with related experimental code.\n\n\n```diff\ninterface Base<T> extends Dynamic<T> {}\n-class Base<T extends Def = DefDefaults> {}\n+class Base<T extends Def = DefDefaults> {\n+  \"~clone\"(): this {\n+    const def: any = {};\n+    for (const key of Reflect.ownKeys(this)) {\n+      if (typeof this[key] !== \"function\") def[key] = this[key];\n+    }\n+    return new (this.constructor as any)(def);\n+  }\n+}\nclass A<T extends Partial<Def> = {}> extends Base<MergeDef<DefDefaults, T>> {}\n```\n\n---\n\n`33-33`: **Remove or document the purpose of this type test.**\n\nThis type test has a non-descriptive name and appears to be testing whether string literals extend the `object` type, but lacks context or documentation about its purpose.\n\n\n```diff\n-type adslfkj = \"asdf\" extends object ? true : false;\n+// Type test to verify that string literals don't extend the `object` type\n+type IsStringObjectType = \"asdf\" extends object ? true : false; // evaluates to false\n```\n\n---\n\n`48-48`: **Document the purpose of this example.**\n\nThis line appears to be demonstrating TypeScript's excess property checking during object literal assignment, but lacks an explanatory comment.\n\n\n```diff\n-const c1: { name: string } = { name: \"colin\", age: 324 };\n+// Demonstrating TypeScript's excess property checking during object literal assignment:\n+// TypeScript allows excess properties when assigning an object literal directly to a type\n+const c1: { name: string } = { name: \"colin\", age: 324 }; // No error despite 'age' being excess\n```\n\n---\n\n`50-51`: **Consider adding a more complete demonstration of the type system.**\n\nThis example creates an instance of class `A` with an overridden property type but doesn't fully demonstrate the functionality of the implemented type system.\n\n\n```diff\n-declare const a: A<{ b: string[] }>;\n-a.b;\n+// Demonstrate the type system with concrete examples\n+const defaultInstance = new A();\n+console.log(typeof defaultInstance.a); // string\n+console.log(typeof defaultInstance.b); // number\n+console.log(typeof defaultInstance.c); // boolean\n+\n+const customInstance = new A<{ b: string[], c: Date }>({ \n+  a: \"custom string\", \n+  b: [\"array\", \"of\", \"strings\"],\n+  c: new Date() \n+});\n+console.log(customInstance.a); // custom string\n+console.log(customInstance.b); // [\"array\", \"of\", \"strings\"]\n+console.log(customInstance.c instanceof Date); // true\n```\n\n</blockquote></details>\n<details>\n<summary>experiments/multiple_inheritance.ts (2)</summary><blockquote>\n\n`31-31`: **Unused variable declaration.**\n\nThe `ccc` variable is declared but never used or defined. If this is just for demonstration purposes, consider adding a code comment explaining its purpose or removing it.\n\n\n```diff\n- declare const ccc: C;\n+ // Example of how to type a variable of merged class\n+ declare const ccc: C;\n```\n\n---\n\n`1-31`: **Consider adding prototype merging to the implementation.**\n\nThe current implementation only calls the constructors of both parent classes but doesn't merge their prototype methods and properties. For a complete multiple inheritance solution, you should also copy prototype methods.\n\n\nYou could enhance the `merge` function to also merge prototype methods:\n\n```typescript\nfunction merge<A extends ClassType, B extends ClassType>(\n  a: A,\n  b: B\n): {\n  new (def: ConstructorParameters<A>[0] & ConstructorParameters<B>[0]): A[\"prototype\"] & B[\"prototype\"];\n} {\n  // Create a new class\n  const mergedClass = class {\n    constructor(def: any) {\n      a.call(this, def);\n      b.call(this, def);\n    }\n  };\n  \n  // Copy prototype methods from both parent classes\n  Object.getOwnPropertyNames(a.prototype).forEach(name => {\n    if (name !== 'constructor') {\n      mergedClass.prototype[name] = a.prototype[name];\n    }\n  });\n  \n  Object.getOwnPropertyNames(b.prototype).forEach(name => {\n    if (name !== 'constructor') {\n      mergedClass.prototype[name] = b.prototype[name];\n    }\n  });\n  \n  return mergedClass;\n}\n```\n\nThis would ensure that instances of the merged class have access to methods defined in both parent classes.\n\n</blockquote></details>\n<details>\n<summary>experiments/mixins_v3.ts (1)</summary><blockquote>\n\n`279-279`: **Implement or remove the empty `ZodString` class.**\n\nThis class currently has no content and duplicates the interface. If it’s not needed, remove it. Otherwise, implement the desired logic or extend the `$ZodString` functionality:\n```diff\n-class ZodString<O = string, I = never> {}\n+class ZodString<O = string, I = never> extends $ZodString<O, I> {}\n```\n\n</blockquote></details>\n<details>\n<summary>.prettierrc.yaml (1)</summary><blockquote>\n\n`6-6`: **Confirm use of experimental ternaries.**  \nThe addition of `experimentalTernaries: true` signals an experimental feature. Ensure that your team is aware of its experimental nature and that there are plans for monitoring any related issues, especially since undocumented or novel settings might occasionally lead to unexpected behavior.\n\n</blockquote></details>\n<details>\n<summary>.github/pull_request_template.md (1)</summary><blockquote>\n\n`3-4`: **Typo in PR Template**  \nThere’s a minor typo in the template text. Consider updating “contribting” to “contributing” to ensure a polished presentation.  \n\n\n```diff\n-Thanks for contribting to OSS!\n+Thanks for contributing to OSS!\n```\n\n</blockquote></details>\n<details>\n<summary>.configs/rollup.config.js (1)</summary><blockquote>\n\n`1-25`: **Good Rollup configuration with a few improvement opportunities.**\n\nThis is a well-structured Rollup configuration for bundling TypeScript. A few suggestions:\n\n1. Consider uncomment or enable sourcemaps (currently commented on line 12), especially for development builds.\n2. Consider adding an `external` option if this configuration is intended for library builds rather than just experiments.\n\n```diff\n  output: {\n    file: \"./scratch/out_rollup.js\", // Output file\n    format: \"esm\", // ES module format to enable tree-shaking\n-   // sourcemap: true, // Generate sourcemaps for easier debugging\n+   sourcemap: true, // Generate sourcemaps for easier debugging\n  },\n```\n\n</blockquote></details>\n<details>\n<summary>.vscode/settings.json (1)</summary><blockquote>\n\n`21-21`: **Reconsider disabling ignore files for search.**\n\nSetting `search.useIgnoreFiles` to `false` will cause VS Code to search in all directories, including node_modules and other typically ignored directories. This could lead to noisy search results and performance issues.\n\n\n```diff\n-  \"search.useIgnoreFiles\": false,\n+  \"search.useIgnoreFiles\": true,\n```\n\n</blockquote></details>\n<details>\n<summary>.vscode/launch.json (1)</summary><blockquote>\n\n`22-52`: **TSX Debug Configuration Review**  \nThe TSX configuration correctly specifies `\"runtimeExecutable\": \"tsx\"` with tailored runtime arguments (`\"--conditions=@zod/source\"`). Ensure that the assumption of a local installation of TSX holds true across environments and that excluding paths (like `\"node_modules/**\"`) aligns with your debugging expectations for TSX files.\n\n</blockquote></details>\n<details>\n<summary>.configs/tsconfig.base.json (1)</summary><blockquote>\n\n`1-36`: **TypeScript Base Configuration Review**  \nThis new TS configuration file comprehensively enforces strict type-checking and modern module resolution via `\"NodeNext\"`. The choices for flags such as `\"strict\"`, `\"noImplicitAny\"`, and `\"noUnusedParameters\"` are excellent for ensuring code quality. One minor note: `\"noUnusedLocals\"` is set to `false`—if catching unused code is desired, consider enabling it. Also, review whether `\"removeComments\": false` is optimal for production builds versus development.\n\n</blockquote></details>\n<details>\n<summary>README_ZH.md (1)</summary><blockquote>\n\n`1248-1267`: **Recursive Type Schema Update Review**  \nThe recursive type definition for `Category` now utilizes `z.ZodType<Category>`, which conforms to the updated Zod API standards. While this approach is clear, note that you’re still defining the TypeScript interface separately from the Zod schema, leading to some duplication. If this pattern recurs throughout the code, you might consider a helper or abstraction to DRY it up.\n\n</blockquote></details>\n<details>\n<summary>ERROR_HANDLING.md (1)</summary><blockquote>\n\n`188-197`: **Locales in Error Handling Documentation**  \nThe new Locales section demonstrating how to import and set a locale-specific error map is a welcome enhancement for internationalization support. However, note the static analysis hint regarding link fragments (ensure that in your documentation the link fragment points to `#customizing-errors-with-zoderrormap` in lowercase as expected by markdownlint).\n\n</blockquote></details>\n<details>\n<summary>biome.jsonc (1)</summary><blockquote>\n\n`18-59`: **Consider enabling additional code quality rules for better type safety.**\n\nThe linter configuration has several type safety rules turned off, particularly `noExplicitAny` with the comment \"any is amazing\". While this approach provides flexibility during development, it may lead to type-related bugs that TypeScript would otherwise catch.\n\n\nConsider selectively enabling stricter type checking in non-experimental code paths. For production code, you might want to enable `noExplicitAny` and `noEmptyInterface` to encourage more type-safe patterns.\n\n</blockquote></details>\n<details>\n<summary>experiments/interfaces_v3.ts (1)</summary><blockquote>\n\n`4-11`: **Consider adding more descriptive type documentation.**\n\nThese utility types (`AnyZodType`, `Mix`, `Nullable`) seem to be foundational for the type system, but lack documentation comments explaining their purpose and usage patterns.\n\n\nAdd JSDoc comments to describe these types' intended usage:\n\n```diff\n+/**\n+ * Represents any Zod type with specified output and input types.\n+ */\ntype AnyZodType = core.$ZodType<{\n  \"~output\": any;\n  \"~input\": never;\n}>;\n+/**\n+ * Combines two Zod types, preserving capabilities of both.\n+ */\ntype Mix<A extends AnyZodType, B extends AnyZodType> = A & B;\n+/**\n+ * Wraps a type in a nullable container.\n+ */\ntype Nullable<T> = {\n  __nullable: T;\n};\n```\n\n</blockquote></details>\n<details>\n<summary>packages/core/package.json (1)</summary><blockquote>\n\n`128-128`: **Consider removing --dry-run from pub script before final merge**\n\nThe publish script includes `--dry-run` flag which prevents actual publishing. This is good for testing, but should be removed or made conditional for actual releases.\n\n\n```diff\n-  \"pub\": \"pnpm publish --publish-branch v4 --dry-run\"\n+  \"pub\": \"pnpm publish --publish-branch v4\"\n```\n\nOr create two separate scripts:\n\n```diff\n-  \"pub\": \"pnpm publish --publish-branch v4 --dry-run\"\n+  \"pub:dry\": \"pnpm publish --publish-branch v4 --dry-run\",\n+  \"pub\": \"pnpm publish --publish-branch v4\"\n```\n\n</blockquote></details>\n<details>\n<summary>experiments/extension.ts (4)</summary><blockquote>\n\n`1-153`: **Clean up commented code for better readability**\n\nThere is a substantial amount of commented-out code in this file (approximately 70% of the first 153 lines). While it's understandable to keep experimental implementations, this makes the file difficult to read and maintain.\n\n\nConsider:\n1. Moving alternative implementations to separate experimental files\n2. Adding clear section comments to explain why certain code is commented out\n3. Removing code that is no longer relevant to the current implementation\n\n---\n\n`154-193`: **Debug console.log should be removed before production**\n\nThere's a console.log statement at line 154 that appears to be for debugging purposes.\n\n\n```diff\n-console.log(`================`);\n```\n\n---\n\n`201-207`: **Define return type for min method**\n\nThe `min` method lacks an explicit return type, which would improve type safety and documentation.\n\n\n```diff\n-  min(min: number) {\n+  min(min: number): this {\n    const clone = this[\"~clone\"]();\n    clone.checks = [...clone.checks, { kind: \"min\", value: min } as any];\n    return clone;\n  }\n```\n\n---\n\n`210-225`: **Remove test code before final merge**\n\nLines 210-225 contain test/example code that should be moved to actual tests rather than being in the implementation file.\n\n\nMove this code to a dedicated test file or example file to keep the implementation clean.\n\n</blockquote></details>\n<details>\n<summary>experiments/replacer.ts (2)</summary><blockquote>\n\n`1-1`: **Consider removing `@ts-nocheck`.**  \nLeaving the entire file unchecked by TypeScript risks missing potential type or syntax issues that the compiler would normally catch.\n\n---\n\n`44-46`: **Clarify or remove commented-out code for `z.ZodFunction` replacements.**  \nLeaving commented-out lines for extended periods can make the codebase cluttered. If you plan to handle function types similarly, consider implementing it or adding a clear TODO note. Otherwise, remove these lines to maintain clarity.\n\n</blockquote></details>\n<details>\n<summary>experiments/extension_v2.ts (2)</summary><blockquote>\n\n`7-16`: **Assess the need for generic constraints on `InnerDynamicBase`.**  \nCurrently, `InnerDynamicBase` uses `properties: object` and then assigns them via `Object.assign`. This is flexible but may allow usage with incompatible objects. Consider adding stricter type constraints or clarifying usage in documentation.\n\n---\n\n`61-67`: **`$ZodString.parse` returns a hardcoded placeholder.**  \nThe method returns `\"asdf\"` regardless of input. If this is temporary scaffolding, mark it clearly with a TODO or implement the intended parsing logic. Otherwise, consider clarifying why a static string is correct behavior.\n\n</blockquote></details>\n<details>\n<summary>experiments/extension_v4.ts (3)</summary><blockquote>\n\n`63-89`: **Implement real parsing or remove placeholder return value in `$ZodType[\"~parse\"]`.**  \nThe method currently returns `\"sdf\" as any`, which masks real validation or parsing logic. If this is a placeholder, mark it or implement the actual logic for consistent usage.\n\n---\n\n`256-268`: **Check recursion in `validateUnion`.**  \nWhen the union check fails, it constructs new parse calls for each element to gather errors. If any of those calls have side effects or rely on shared context, it may lead to repeated overhead. If performance is a concern, consider caching or short-circuiting.\n\n---\n\n`319-320`: **Review overlapping interface definitions for `Base`.**  \nMultiple `interface Base` declarations can lead to an unintentional merge of properties, potentially causing confusion or unexpected behaviors. Combine them into a single definition, or rename them if they serve distinct purposes.\n\n</blockquote></details>\n<details>\n<summary>experiments/mixins.ts (2)</summary><blockquote>\n\n`1-9`: **Consider validating presence of the instance property in `checkSymbol`.**  \nCurrently, `checkSymbol` only checks whether `instance[sym] === true`. If `instance` is missing that property or if it's falsy for other reasons, this approach may yield false negatives. You may want to ensure robust instance detection with additional safety checks.\n\n---\n\n`64-83`: **Enhance Mixin for better extensibility.**  \n`ZodTypeMixin` is a powerful way to layer functionality, but consider exposing hooks or extension points that let future classes override or supplement optional-like behaviors. As is, the mixin is hard-coded to return `$ZodOptional` but doesn't handle advanced constraints or custom parse flows.\n\n</blockquote></details>\n<details>\n<summary>experiments/dynamic.ts (2)</summary><blockquote>\n\n`1-11`: **Revisit the `DynamicBase` inheritance approach.**  \nCombining `InnerDynamicBase` with `DynamicBase` is a neat trick, but it may result in unexpected TS type inference behaviors. Confirm that merging properties via `Object.assign` aligns with your desired inheritance model and type-safety guarantees.\n\n---\n\n`36-40`: **Encourage consistent type-checking within `$ZodType`.**  \n`$ZodType` is abstract and mandates a `parse` method, but no guard rails exist to ensure that subclasses implement domain-specific validation. Consider adding a protected utility or a type guard to standardize error handling.\n\n</blockquote></details>\n<details>\n<summary>experiments/interfaces.ts (3)</summary><blockquote>\n\n`16-23`: **Ensure robust error handling in `bindAll` function.**  \nCurrently, exceptions thrown in method bindings won’t be caught or logged, potentially obscuring relevant errors. Consider adding a safety mechanism or logging to handle failures gracefully.\n\n---\n\n`27-39`: **Clarify the purpose of special keys in `$ZodType`.**  \nProperties like `~output`, `~input`, and `~omit` are unconventional. Provide inline documentation or rename them to more descriptive names to improve code readability.\n\n---\n\n`41-62`: **Improve the placeholder logic in `$ZodType` function.**  \nThe method `\"~parse\"` throws a “not implemented” error. If this function is not intended to be fully implemented here, use a more descriptive placeholder or consider removing it until the actual parse logic is available.\n\n</blockquote></details>\n<details>\n<summary>experiments/interfaces_v2.ts (3)</summary><blockquote>\n\n`16-19`: **Enhance clarity in `$ZodVirtuals`.**  \nProperties `~output` and `~input` appear pivotal for typed parse operations. Provide doc comments explaining how these are intended to be used.\n\n---\n\n`41-45`: **Evaluate necessity of `as any` cast in `ZodTypeMethods`.**  \nCasting the entire object to `any` obscures type-level errors. If a type conflict arises, consider using a more precise type or generics rather than broad casting.\n\n---\n\n`60-67`: **Consider optional configuration parameters in the `string()` factory.**  \nCurrently, it returns a ZodString instance with hardcoded defaults. If future expansions are expected (e.g., specifying `coerce`), introducing an optional params object could enhance flexibility.\n\n</blockquote></details>\n<details>\n<summary>experiments/dynamic_v2.ts (2)</summary><blockquote>\n\n`13-17`: **Refine the naming in `StripInternals<T>`.**  \n`StripInternals` might be more descriptive if renamed to reflect its function (e.g., `RemoveInternalKeys`). Clarify its purpose to maintain readability.\n\n---\n\n`39-45`: **Establish consistent parse error handling in `$ZodType`.**  \n`abstract parse()` is left to subclasses, but no fallback mechanism exists. Either unify error handling in `$ZodType` or ensure each subclass thoroughly validates input to avoid inconsistent error reporting.\n\n</blockquote></details>\n<details>\n<summary>experiments/errors_v2.ts (6)</summary><blockquote>\n\n`4-4`: **Question the necessity of the `flatten` utility type.**\nThe `flatten<T>` alias is effectively an identity mapped type. If it’s not serving a deeper purpose (e.g., clearing internal markers or distributing generics), consider removing it to reduce complexity.\n\n---\n\n`6-17`: **Consider using an enum for `ZodIssueCode`.**\n`ZodIssueCode` is defined as a constant with string values and then exported as a type. Converting it to a TypeScript `enum` (or union literal type) could provide stronger type checking and easier referencing, though the current object-const approach may be sufficient if you rely on literal inference.\n\n---\n\n`20-27`: **Reevaluate naming of the “domain” field in `ZodIssueBase`.**\nThe optional `domain` property might be confused with external domain concepts. A more descriptive name (e.g., `issueDomain`, `category`) can improve clarity.\n\n---\n\n`50-65`: **Provide documented rationale for `$StringFormat` choices.**\nThe list of formats (e.g., \"email\", \"url\", \"uuid\") is extensive, which is good, but consider adding short explanations or references in code or docs to guide future maintainers about each format’s usage and constraints.\n\n---\n\n`67-102`: **Incorporate consistent messages or descriptive fields for each string check.**\n`ZodInvalidStringIssue` enumerations like `\"min_size\"`, `\"max_size\"`, and `\"regex\"` might benefit from a standardized field for user-facing error messages (or resource keys) to keep them consistent.\n\n---\n\n`103-148`: **Combine repeated check logic with generics or helper functions.**\n`ZodInvalidNumberIssue`, `ZodInvalidDateIssue`, and `ZodInvalidBigIntIssue` share a pattern of min/max and multiple-of checks. Factor out repetitive logic to reduce duplication and centralize error handling if possible.\n\n</blockquote></details>\n<details>\n<summary>experiments/dynamic_v3.ts (3)</summary><blockquote>\n\n`16-22`: **Add documentation for `$ZodTypeDef`.**\nThis interface includes crucial properties like `checks`, `description`, `errorMap`, and typed placeholders (`\"~output\"`, `\"~input\"`). Document each field for maintainers.\n\n---\n\n`36-40`: **Clearly define the purpose of `$ZodType.parse()`.**\n`abstract parse(): this[\"~output\"];` suggests an eventual parse function, but all derived classes must implement it. Encourage either an explicit error or a note for each derived class to implement.\n\n---\n\n`77-86`: **Consider generalized check running.**\n`\"$ZodType\"[\"~runChecks\"]` loops over `~checks` but the checks are commented out. If you plan to integrate them later, add a placeholder test or throw an unimplemented error to avoid silent failures if left unimplemented.\n\n</blockquote></details>\n<details>\n<summary>experiments/extension_v3.ts (2)</summary><blockquote>\n\n`63-89`: **Implement or remove commented-out `$ZodType` interface.**\nThe commented code references `~parse` and `~input`, which might conflict with the actual `ZodFail` pattern. Remove the stale code or incorporate it properly to avoid confusion.\n\n---\n\n`98-119`: **Adopt consistent naming for `$ZodString` generics.**\n`class $ZodString<O extends string = string, I = unknown>` is typed with “O” & “I,” but the constructor is also referencing `$ZSFString`. Clarify or rename to reduce confusion, e.g., `Output = string, Input = unknown`.\n\n</blockquote></details>\n<details>\n<summary>experiments/errors_old.ts (2)</summary><blockquote>\n\n`17-43`: **Consider removing or explaining large commented-out code for clarity.**\n\nYou have a fairly extensive block of commented code duplicating `ZodIssueCode` definitions. If it's no longer needed, removing it simplifies maintenance in the future and keeps the codebase clean. Otherwise, consider explaining why you're keeping it commented out.\n\n---\n\n`398-443`: **Ensure the error formatting logic covers all union sub-issues properly.**\n\nThe `format` method deeply processes nested union errors. If you introduce new union types or special logic (like `invalid_union_discriminator`), verify that each scenario is properly handled and included. Otherwise, mismatched or unprocessed sub-issues could lead to incomplete error reports.\n\n</blockquote></details>\n<details>\n<summary>experiments/intermediate.ts (2)</summary><blockquote>\n\n`62-86`: **Consider providing default or fallback type strings in `$ZodType` constructor.**\n\nYou assign `type` to `this.type` but do not provide a default, possibly leaving it undefined if the user calls `super({})` with no `type`. Clarify or ensure all usage sets the type field.\n\n---\n\n`220-239`: **Validate union elements carefully with `validateUnion`.**\n\nWhen looping over `this.elements`, each call to `[\"~parse\"]` might produce either a pass or a `ZodFail`. Double check you’re not inadvertently re-calling parse for a single element multiple times if partial or advanced checks are needed. For better performance, short-circuit and avoid repeated calls for error composition if not strictly required.\n\n</blockquote></details>\n<details>\n<summary>packages/bench/_temp.ts (1)</summary><blockquote>\n\n`3-4`: **Add negative test or error-handling scenario.**\n\nThe code demonstrates parsing a valid value, but consider adding an example or test that fails parsing to confirm error reporting and handle potential exceptions gracefully.\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-safeasync.ts (2)</summary><blockquote>\n\n`6-7`: **Consider using full method name for better readability**\n\nThe code uses `spa` as a shorthand for what appears to be `safeParseAsync`. While this works functionally, using abbreviations reduces code readability for developers not familiar with this shorthand.\n\n```diff\n-  async zod3() {\n-    for (const _ of DATA) await zod3.spa(_);\n+  async zod3() {\n+    for (const _ of DATA) await zod3.safeParseAsync(_);\n```\n\n---\n\n`9-10`: **Consider using full method name for better readability**\n\nSame issue as above - using the abbreviation `spa` reduces readability.\n\n```diff\n-  async zod4() {\n-    for (const _ of DATA) await zod4.spa(_);\n+  async zod4() {\n+    for (const _ of DATA) await zod4.safeParseAsync(_);\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ab-parse-uuid.js (2)</summary><blockquote>\n\n`6-6`: **Remove commented-out import statement**\n\nThe commented-out import for \"zod3\" appears to be leftover development code that should be removed in the final version.\n\n```diff\n-// import * as z3 from \"./node_modules/zod3/lib/index.js\";\n```\n\n---\n\n`10-12`: **Consider adding validation for returned data**\n\nYou're logging the result of parsing, but not validating that it's correct. Consider adding an assertion to ensure the parsed UUID is valid.\n\n```diff\nconst schema = z.uuid();\n-console.log(z.parse(schema, randomUUID()));\n+const uuid = randomUUID();\n+const parsed = z.parse(schema, uuid);\n+console.log(parsed);\n+// Validate that the parsed result matches the input\n+console.assert(parsed === uuid, \"Parsed UUID should match the input\");\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-async.ts (1)</summary><blockquote>\n\n`1-13`: **Well-structured benchmark for async object parsing.**\n\nThe benchmark effectively compares asynchronous parsing performance between zod3 and zod4 implementations. The code follows a clean pattern with proper imports and appropriate usage of the metabench utility.\n\n\nConsider adding minimal error handling for the async parse operations, even in benchmark scenarios:\n\n```diff\n  async zod3() {\n-    for (const _ of DATA) await zod3.parseAsync(_);\n+    for (const _ of DATA) {\n+      try {\n+        await zod3.parseAsync(_);\n+      } catch (e) {\n+        // Silently continue in benchmark context\n+      }\n+    }\n  },\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/string.ts (1)</summary><blockquote>\n\n`6-6`: **Consider more diverse string test data.**\n\nThe current data generation uses `${Math.random()}` which produces only decimal strings (e.g., \"0.12345\"). This limits the coverage of string validation testing.\n\n\nFor more comprehensive benchmarking, consider using a variety of string formats:\n\n```diff\n- const DATA = makeData(10000, () => `${Math.random()}`);\n+ const DATA = makeData(10000, () => {\n+   // Generate different types of strings: empty, alphanumeric, special chars, very long\n+   const types = [\n+     () => \"\",\n+     () => `${Math.random()}`,\n+     () => \"test_string_with_underscores\",\n+     () => \"!@#$%^&*()\",\n+     () => \"a\".repeat(1000)\n+   ];\n+   return types[Math.floor(Math.random() * types.length)]();\n+ });\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/datetime.ts (1)</summary><blockquote>\n\n`5-5`: **Limited datetime test data diversity.**\n\nThe current data generation creates 10,000 identical datetime strings (the current time). This doesn't fully test the datetime validation logic across different date formats and edge cases.\n\n\nFor more comprehensive benchmarking, consider generating a variety of datetime strings:\n\n```diff\n- const DATA = makeData(10000, () => new Date().toISOString());\n+ const DATA = makeData(10000, () => {\n+   // Generate diverse datetime strings: past dates, future dates, edge cases\n+   const now = new Date();\n+   const types = [\n+     () => now.toISOString(),\n+     () => new Date(0).toISOString(), // Unix epoch\n+     () => new Date(now.getFullYear() - 50, 0, 1).toISOString(), // 50 years ago\n+     () => new Date(now.getFullYear() + 50, 0, 1).toISOString(), // 50 years in future\n+     () => new Date(9999, 11, 31).toISOString(), // Far future\n+   ];\n+   return types[Math.floor(Math.random() * types.length)]();\n+ });\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/fast-parse-string.ts (1)</summary><blockquote>\n\n`14-19`: **Consider using a more descriptive variable name**\n\nThe variable `_` is typically used for unused variables, but here it's actively used in the function. Consider using a more descriptive name like `item` or `value`.\n\n\n```diff\n  fast() {\n-    for (const _ of DATA) schema.parse(_);\n+    for (const item of DATA) schema.parse(item);\n  },\n  noFast() {\n-    for (const _ of DATA) schema.parse(_, { skipFast: true });\n+    for (const item of DATA) schema.parse(item, { skipFast: true });\n  },\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/string-old.ts (1)</summary><blockquote>\n\n`1-17`: **Document the purpose of this alternative string benchmarking approach.**\n\nThis file seems to duplicate the string parsing benchmark in `paths.ts` but uses `metabench` instead of `zodbench`. The filename suggests this might be an older approach being kept for comparison.\n\nConsider adding a comment explaining why both benchmarking approaches are needed, or remove this file if it's truly deprecated.\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-creation.ts (1)</summary><blockquote>\n\n`3-6`: **Add documentation to explain the ZodFail class purpose.**\n\nThe `ZodFail` class appears to simulate validation failure objects, but its purpose and relationship to Zod's internal implementation isn't clear from the code.\n\nAdd a comment explaining the significance of this class in the context of Zod's error handling.\n\n</blockquote></details>\n<details>\n<summary>packages/bench/check-runner.ts (3)</summary><blockquote>\n\n`8-36`: **Clean up commented validation rules.**\n\nThe schema definition contains numerous commented-out validation rules without explanation.\n\nEither remove these commented lines for clarity or add an explanation about their purpose and how they should be used in different benchmarking scenarios.\n\n---\n\n`38-38`: **Remove or document debug console.log.**\n\nThis console.log statement appears to be for debugging purposes.\n\nConsider removing this debugging statement or adding a more descriptive message to clarify its purpose for other developers.\n\n---\n\n`40-47`: **Document the purpose of internal method benchmarking.**\n\nThis benchmark compares two internal methods (`_parse` and `_parse2`), but doesn't explain why these specific methods are being compared.\n\nAdd a comment explaining the difference between these internal methods and what performance characteristics you're measuring with this benchmark.\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-setup.ts (3)</summary><blockquote>\n\n`12-14`: **Remove unnecessary and incomplete Biome ignore comments.**\n\nThe Biome ignore comments are present but lack explanations, and they don't seem necessary since there's no inner declaration.\n\n```diff\n-// biome-ignore lint/style/noVar: <explanation>\n-// biome-ignore lint/correctness/noInnerDeclarations: <explanation>\n```\n\n---\n\n`14-20`: **Consider using an immutable data structure.**\n\nYou're using `var DATA` with `Object.freeze()` on each object, but the array itself can still be modified. Consider using `const DATA` for consistency, especially since you're freezing the individual objects.\n\n```diff\n-// biome-ignore lint/style/noVar: <explanation>\n-// biome-ignore lint/correctness/noInnerDeclarations: <explanation>\n-export var DATA: any[] = makeData(1000, () => {\n+export const DATA: readonly any[] = makeData(1000, () => {\n  return Object.freeze({\n    number: Math.random(),\n    string: `${Math.random()}`,\n    boolean: Math.random() > 0.5,\n  });\n});\n```\n\n---\n\n`22-35`: **Consider cleaning up commented benchmarking code.**\n\nSince the actual benchmarking seems to have been moved to other files that import this setup, these commented-out benchmarking lines are no longer needed and can be removed for clarity.\n\n```diff\n-// const bench = metabench(\"small: z.object().parse\", {\n-//   zod3() {\n-//     for (const d of DATA) {\n-//       zod3.parse(d);\n-//     }\n-//   },\n-//   zod4() {\n-//     for (const d of DATA) {\n-//       zod4.parse(d);\n-//     }\n-//   },\n-// });\n-\n-// await bench.run();\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/array.ts (1)</summary><blockquote>\n\n`13-17`: **Improve variable naming in benchmark functions.**\n\nUsing `_` as a variable name is typically reserved for unused variables. Since you're actually using these values, consider using more descriptive variable names.\n\n```diff\n  zod3() {\n-    for (const _ of DATA) zod3.parse(_);\n+    for (const item of DATA) zod3.parse(item);\n  },\n  zod4() {\n-    for (const _ of DATA) zod4.parse(_);\n+    for (const item of DATA) zod4.parse(item);\n  },\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ab-parse-record.js (3)</summary><blockquote>\n\n`1-5`: **Consider using TypeScript for type safety.**\n\nThis file uses JavaScript while other benchmark files use TypeScript. For consistency and type safety, consider converting this file to TypeScript.\n\n```diff\n-// packages/bench/ab-parse-record.js\n+// packages/bench/ab-parse-record.ts\n```\n\n---\n\n`16-26`: **Clean up or implement commented code.**\n\nThe benchmark includes commented-out methods (_parse2, _parse3). Either implement these for comparison or remove them to keep the code clean.\n\n```diff\nconst bench = metabench(\"AB test: objects\", {\n  _parse() {\n    for (const _ of DATA) z.parse(schema, _);\n  },\n-  // _parse2() {\n-  //   for (const _ of DATA) z.parse2(schema, _);\n-  // },\n-  // _parse3() {\n-  //   for (const _ of DATA) z.parse3(schema, _);\n-  // },\n});\n```\n\n---\n\n`18-18`: **Improve variable naming in benchmark function.**\n\nSimilar to other files, using `_` as a variable name is typically reserved for unused variables. Use a more descriptive name since you're actually using the value.\n\n```diff\n  _parse() {\n-    for (const _ of DATA) z.parse(schema, _);\n+    for (const item of DATA) z.parse(schema, item);\n  },\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object.ts (1)</summary><blockquote>\n\n`14-18`: **Consider ensuring data property order matches schema definition.**\n\nThe schema defines properties in the order `string`, `boolean`, `number` but the data generator creates them in the order `number`, `string`, `boolean`. Consider matching the order for better readability and maintainability.\n\n```diff\n  data() {\n    return Object.freeze({\n-      number: Math.random(),\n      string: `${Math.random()}`,\n      boolean: Math.random() > 0.5,\n+      number: Math.random(),\n    });\n  },\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ab-parse-checks.ts (1)</summary><blockquote>\n\n`26-28`: **Consider expanding benchmark to compare different parsing approaches**\n\nCurrently, the benchmark only includes a single method `_parse()`. Since this is an A/B test benchmark (based on the filename), consider adding a comparison method similar to what's done in `ab-parse-array.ts` where both `z.safeParse` and `z.safeParseB` are compared.\n\n\n```diff\nconst bench = metabench(\"AB test: multiple checks\", {\n  _parse() {\n    for (const _ of DATA) z.parse(schema, _);\n  },\n+  _parseWithSafeParse() {\n+    for (const _ of DATA) z.safeParse(schema, _);\n+  },\n});\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-moltar.ts (1)</summary><blockquote>\n\n`40-40`: **Consider optimizing large string for memory efficiency**\n\nThe very long string used in benchmarking could potentially affect memory allocation. While not critical for benchmarking, consider parameterizing the string length if memory becomes a bottleneck.\n\n</blockquote></details>\n<details>\n<summary>packages/bench/discriminated-union.ts (1)</summary><blockquote>\n\n`25-25`: **Fix typo in benchmark name**\n\nThere's a typo in \"z.disriminatedUnion()\" - should be \"z.discriminatedUnion()\".\n\n```diff\n-const bench = metabench(\"z.disriminatedUnion().parse\")\n+const bench = metabench(\"z.discriminatedUnion().parse\")\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ab-parse-string.ts (1)</summary><blockquote>\n\n`20-22`: **Commented code for future implementation**\n\nThere's commented code for a potential third parsing method `parseC`. Consider either implementing this method, adding a TODO comment explaining why it's commented out, or removing it if it's not planned.\n\n</blockquote></details>\n<details>\n<summary>experiments/composition.ts (2)</summary><blockquote>\n\n`1-28`: **Review of the `$ZodString` implementation**\n\nThe `$ZodString` class provides a solid implementation of string validation with coercion support. The parsing logic properly handles type checks and returns appropriate errors.\n\nA few observations:\n1. The `\"~toJsonSchema\"` method is defined but not implemented. \n2. The `typeName` is declared as an override but doesn't specify a default value in the constructor.\n\n\nConsider implementing the `\"~toJsonSchema\"` method or adding a TODO comment explaining its future implementation. Also, consider setting a default value for `typeName` in the constructor.\n\n```diff\nconstructor(def: core.$Def<$ZodString>) {\n  super(def);\n+  this.typeName = def.typeName ?? \"zod.core.string\";\n}\n\n\"~toJsonSchema\"() {\n+  // TODO: Implement JSON schema generation for string type\n+  return { type: \"string\" };\n}\n```\n\n---\n\n`41-47`: **Consider implementing ZodString's toJsonSchema method**\n\nSimilar to the base `$ZodString` class, the `ZodString` class has an empty `\"~toJsonSchema\"` method.\n\n\nConsider implementing the method or adding a TODO comment explaining its intended functionality:\n\n```diff\n\"~toJsonSchema\"() {\n+  return this[\"~core\"][\"~toJsonSchema\"]();\n}\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ab-parse-object.ts (2)</summary><blockquote>\n\n`1-7`: **Imports are appropriate but there's an unused commented import**\n\nThe imports for benchmarking utilities and Zod libraries seem appropriate. However, there's a commented-out import for '@zod/core' that might be needed in the future or was intentionally disabled.\n\n\nConsider removing the commented import if it's not needed or add a comment explaining why it's kept for future use.\n\n---\n\n`8-48`: **Good schema definition with potential for expansion**\n\nBoth schemas are well-defined with identical structure, which is appropriate for benchmarking. The commented fields (g-r) suggest plans for testing with larger objects.\n\n\n\nConsider adding a configuration option to dynamically generate schemas with variable field counts, which would allow for more comprehensive benchmarking across different object sizes:\n\n```typescript\nfunction createSchema(fieldCount: number, schemaFactory: any) {\n  const fields: Record<string, any> = {};\n  for (let i = 0; i < fieldCount; i++) {\n    const fieldName = String.fromCharCode(97 + i); // a, b, c, ...\n    fields[fieldName] = schemaFactory.string();\n  }\n  return schemaFactory.object(fields);\n}\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/fast-parse-object.ts (2)</summary><blockquote>\n\n`1-6`: **Doc import appears unused**\n\nThe `Doc` import from '../zod-core/src/doc.js' doesn't seem to be used in this file.\n\n\nConsider removing the unused import:\n\n```diff\n-import { Doc } from \"../zod-core/src/doc.js\";\nimport { makeData, randomString } from \"./benchUtil.js\";\nimport { metabench } from \"./metabench.js\";\n```\n\n---\n\n`22-35`: **Consider uncommenting or removing commented benchmarks**\n\nThere are commented-out benchmark cases that might be intended for future use or were removed intentionally.\n\n\nIf these benchmark cases are for future implementation, consider adding a TODO comment explaining the plan. If they're no longer needed, consider removing them entirely:\n\n```diff\nconst bench = metabench(\"AB test: objects\", {\n  parse() {\n    for (const _ of DATA) z.parse(schema, _);\n  },\n  fastparse() {\n    for (const _ of DATA) z.parseB(schema, _);\n  },\n-  // fastrun() {\n-  //   for (const _ of DATA) schema[\"_fastrun\"](_);\n-  // },\n-  // \"z.parse\"() {\n-  //   for (const _ of DATA) z.parse(schema, _);\n-  // },\n});\n```\n\n</blockquote></details>\n<details>\n<summary>.github/workflows/release.yml (1)</summary><blockquote>\n\n`22-22`: **Fix YAML formatting issues**\n\nThere are several lines with trailing spaces, which violates YAML best practices and might cause issues with some YAML parsers.\n\n\nRemove trailing spaces from lines 22, 29, 35, 56, and 91, and ensure the file ends with a newline:\n\n```diff\n- uses: actions/checkout@v4\n  with:\n    fetch-depth: 0\n-      \n+      \n```\n\n\nAlso applies to: 29-29, 35-35, 56-56, 91-91\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 YAMLlint (1.35.1)</summary>\n\n[error] 22-22: trailing spaces\n\n(trailing-spaces)\n\n</details>\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/benchUtil.ts (3)</summary><blockquote>\n\n`4-10`: **Consider removing type assertions for better type safety.**\n\nThe function uses `as any` type assertions which bypass TypeScript's type checking. This could lead to runtime errors if the libraries don't match the expected interfaces.\n\n```diff\n-    zod3: factory(zOld as any) as T,\n-    zod4: factory(zNew as any) as T,\n+    zod3: factory(zOld as unknown as typeof zNew) as T,\n+    zod4: factory(zNew) as T,\n```\n\n---\n\n`21-23`: **Make `randomPick` type-safe with generics.**\n\nThe current implementation uses `any` which loses type information. Using generics would provide better type safety while maintaining flexibility.\n\n```diff\n-export function randomPick(options: any[]): any {\n+export function randomPick<T>(options: T[]): T {\n  return options[Math.floor(Math.random() * options.length)];\n}\n```\n\n---\n\n`25-32`: **Improve type safety in `makeData` function.**\n\nThe function uses very broad types and runtime type checking. Consider using generics and more specific types for better compile-time safety.\n\n```diff\n-export function makeData(count: number, factory: object | (() => any)): any[] {\n+export function makeData<T>(count: number, factory: T | (() => T)): T[] {\n  return Array.from({ length: count }, () => {\n    // clone non primitive data\n    if (typeof factory === \"object\") return { ...factory } as T;\n    if (typeof factory === \"function\") return (factory as () => T)();\n    throw new Error(\"Invalid factory\");\n  });\n}\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/safe.ts (2)</summary><blockquote>\n\n`6-8`: **Remove commented-out `super()` call.**\n\nSince `ZodFail` doesn't extend any class, the commented-out `super()` call is unnecessary and should be removed.\n\n```diff\nconstructor(public value: string) {\n-  // super();\n}\n```\n\n---\n\n`47-66`: **Remove commented-out duplicate code.**\n\nThere's a large block of commented-out code that appears to be an older version of the benchmarks. Since these benchmarks are now implemented in a different structure, this commented code should be removed.\n\n```diff\n-// .add(\"union\", function () {\n-//   // const value = Math.random();\n-\n-//   if (typeof d !== \"string\") {\n-//     return new ZodFail(\"too big\");\n-//     // biome-ignore lint: bug in biome\n-//   } else {\n-//   }\n-// })\n-// .add(\"disc union\", (d) => {\n-//   if (typeof d !== \"string\") {\n-//     return makeFail(d);\n-//     // biome-ignore lint: bug in biome\n-//   } else {\n-//     return makeSuccess(d);\n-//   }\n-// })\n-// .add(\"baseline\", (d) => {\n-//   return typeof d !== \"string\";\n-// });\n```\n\n</blockquote></details>\n<details>\n<summary>experiments/generics.ts (2)</summary><blockquote>\n\n`6-8`: **Document the purpose of these interfaces.**\n\nThese interfaces are establishing the core type structure for Zod, but lack documentation explaining their design and purpose. Consider adding JSDoc comments to clarify their intended use.\n\n```diff\n+/**\n+ * Extends any object type, allowing for dynamic property access\n+ */\ninterface Dynamic<T extends object> extends T {}\n\n+/**\n+ * Base type for all Zod types, enforcing input/output virtual properties\n+ */\ninterface ZodBaseType<T extends $Virtuals<unknown, unknown>> extends Dynamic<T> {}\n\n+/**\n+ * String validator type with configurable input/output type parameters\n+ */\ninterface ZodString<T extends $Virtuals<string, unknown> = $Virtuals<string, unknown>> extends ZodBaseType<T> {}\n```\n\n---\n\n`9-10`: **Add type guard for demonstration code.**\n\nThe demonstration code accesses `_output` without checking if it exists. Consider adding a comment explaining this is demonstration code or add appropriate guards.\n\n```diff\ndeclare const arg: ZodString<{ _output: string; _input: string }>;\n-arg._output;\n+// Example usage:\n+const output: string = arg._output;\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/string_parse.ts (1)</summary><blockquote>\n\n`23-64`: **Consider enabling additional benchmark cases.**\n\nThe file has numerous commented-out benchmark cases that could provide more granular performance insights. Consider enabling some of these scenarios to get a better comparison between different method calls (`parse` vs `_parse` vs `_typeCheck`).\n\n</blockquote></details>\n<details>\n<summary>packages/bench/zodbench.ts (2)</summary><blockquote>\n\n`18-18`: **Avoid type casting to `any`.**\n\nType casting to `any` bypasses TypeScript's type checking, which can lead to runtime errors. Consider using a more specific type or refactoring the `makeSchema` function to have better type inference.\n\n\n```diff\n-const { zod3, zod4 } = makeSchema(params.schema as any);\n+const { zod3, zod4 } = makeSchema<T>(params.schema);\n```\n\n---\n\n`32-32`: **Define default batch size as a constant.**\n\nThe fallback batch size of 1000 is hardcoded in the function. For better maintainability, consider defining this as a named constant at the top of the file.\n\n\n```diff\n+const DEFAULT_BATCH_SIZE = 1000;\n+\n interface ZodBenchParams<T extends $ZodType, D> {\n   // ...\n\n-const DATA = Array.from({ length: params.batch || 1000 }, params.data);\n+const DATA = Array.from({ length: params.batch || DEFAULT_BATCH_SIZE }, params.data);\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/libs.ts (2)</summary><blockquote>\n\n`32-34`: **Remove or conditionally execute console.log statements.**\n\nThese console.log statements might affect benchmark results and will clutter the output. Consider removing them or wrapping them in a conditional statement for debugging purposes only.\n\n\n```diff\n-console.log(z.parse(schema, DATA[0]));\n-console.log(atschema(DATA[0]));\n-console.log(v.parse(vschema, DATA[0]));\n+// Uncomment for debugging\n+// console.log(z.parse(schema, DATA[0]));\n+// console.log(atschema(DATA[0]));\n+// console.log(v.parse(vschema, DATA[0]));\n```\n\n---\n\n`36-36`: **Update benchmark title to include all libraries.**\n\nThe benchmark title \"zod vs arktype\" doesn't include valibot, which is also being benchmarked. Update the title to reflect all three libraries.\n\n\n```diff\n-const bench = metabench(\"zod vs arktype\", {\n+const bench = metabench(\"zod vs arktype vs valibot\", {\n```\n\n</blockquote></details>\n<details>\n<summary>packages/bench/lazy-box.ts (3)</summary><blockquote>\n\n`6-14`: **Consider clarifying internal lazy state with type-safety.**  \nUsing `__value: undefined as T` may cause confusion if `T` is not nullable. Consider updating the type to `T | undefined` if you intend to reflect the possibility that `__value` might be uninitialized, or add runtime checks to guard against unexpected undefined values.  \n\n```diff\n- __value: undefined as T,\n+ __value: undefined as (T | undefined),\n```\n\n---\n\n`20-28`: **Validate the necessity of exposing the `__value` property.**  \nHere, the `_value` storage is captured in a closure, preventing direct external write-access to internal state (unlike `lazyWithInternalProp`, which uses an object property). This is typically safer, but be consistent in how you manage internal cache variables across your lazy loaders if you plan to unify them in the future.\n\n---\n\n`35-39`: **Confirm property descriptor options for the lazy override.**  \nUsing `Object.defineProperty(this, \"value\", { value })` overrides the getter permanently once accessed. If you need further control (e.g., enumerability, configurability), consider adding explicit options: `{ value, writable: false, enumerable: true, configurable: true }`.\n\n</blockquote></details>\n<details>\n<summary>packages/bench/property-access.ts (2)</summary><blockquote>\n\n`22-24`: **Ensure correctness when using an `any` cast in the get trap.**  \nAccessing `(target as any)[prop]` can mask type mismatches. Consider strongly typing `target` or using a safer approach to avoid accidental undefined or unexpected property accesses.\n\n---\n\n`55-82`: **Remove or restore commented benchmarks to maintain clarity.**  \nThe commented-out benchmark sections might confuse contributors. If they are no longer needed, remove them; otherwise, refactor them into active tests.  \n\n```diff\n-  // internal_prop() {\n-  //   a.value;\n-  // },\n-  // scope_prop() {\n-  //   b.value;\n-  // },\n-  // getter_override() {\n-  //   c.value;\n-  // },\n+  // Uncomment if needed to compare with lazy-box or keep removed to avoid confusion\n```\n\n</blockquote></details>\n<details>\n<summary>experiments/totems.ts (2)</summary><blockquote>\n\n`1-6`: **Document or rename the `~`-prefixed fields for clarity.**  \nWhile the `~` prefix might be an intentional design, it can be confusing to newcomers. Considering adding inline doc comments or more descriptive property names to improve maintainability.\n\n---\n\n`23-28`: **Consider clarifying the generic constraints of `$ZodType`.**  \nThis class defines advanced typed properties. Enforce or clarify constraints in child classes for safer usage, e.g., restricting `ZodT[\"~input\"]` to certain types if applicable.\n\n</blockquote></details>\n<details>\n<summary>packages/bench/instanceof.ts (2)</summary><blockquote>\n\n`4-11`: **Naming caution for `_~key~~`.**\nWhile this string key is valid JavaScript, consider whether it might cause confusion or unintended side effects. If there's no special reason for the `~`, a more conventional key name (e.g., `_customKey`) might be clearer.\n\n---\n\n`21-32`: **Potential type-narrowing for function arguments.**\nAll checker methods accept `x: any`. If feasible, narrower types or type guards could improve clarity and performance. Still, for a benchmark scenario, this is acceptable.\n\n</blockquote></details>\n<details>\n<summary>README.md (2)</summary><blockquote>\n\n`117-117`: **Fix the anchor link to match header casing.**\nThe link fragment is currently spelled with a capital \"ZodTransform\". Update it to all-lowercase to ensure validity.\n\n\nUse this diff:\n\n```diff\n-  - [ZodType with ZodTransform](#zodtype-with-ZodTransform)\n+  - [ZodType with ZodTransform](#zodtype-with-zodtransform)\n```\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 markdownlint-cli2 (0.17.2)</summary>\n\n117-117: Link fragments should be valid\nExpected: #zodtype-with-zodtransform; Actual: #zodtype-with-ZodTransform\n\n(MD051, link-fragments)\n\n</details>\n\n</details>\n\n---\n\n`769-769`: **Grammar fix recommendation for IPv4/IPv6.**\nSuggest clarifying the text:\n\n```diff\n- The `z.string().ip()` method by default validate IPv4 and IP 6.\n+ The `z.string().ip()` method, by default, validates both IPv4 and IPv6.\n```\n\n</blockquote></details>\n<details>\n<summary>experiments/totems_v2.ts (2)</summary><blockquote>\n\n`72-79`: **Class and interface share the same name `$ZodString`.**\n\nDeclaring both an interface and a class named `$ZodString` can be confusing. Consider using a distinct interface name or merging them if they represent the same entity.\n\n---\n\n`107-114`: **Rename the debug type alias `alksjdf`.**\n\nThe name `alksjdf` seems to be a placeholder. Giving it a more descriptive name will improve readability.\n\n</blockquote></details>\n<details>\n<summary>packages/core/src/api.ts (1)</summary><blockquote>\n\n`256-271`: **Commented-out `_ip` function code fragment.**\n\nThis code is fully commented out. If it’s deprecated, consider removing it to keep the codebase clean. Otherwise, clarify future plans or reintroduce it if needed.\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>📜 Review details</summary>\n\n**Configuration used: CodeRabbit UI**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>📥 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 859ad2495e3d24559d3c8e33a00cf56e2dbaa16a and 9e74e8bdbd873bb371a09319c583dfda3c5331ef.\n\n</details>\n\n<details>\n<summary>⛔ Files ignored due to path filters (26)</summary>\n\n* `logo/Logo Black.jpg` is excluded by `!**/*.jpg`\n* `logo/Logo Black.pdf` is excluded by `!**/*.pdf`\n* `logo/Logo Black.png` is excluded by `!**/*.png`\n* `logo/Logo Outer Glow.jpg` is excluded by `!**/*.jpg`\n* `logo/Logo Outer Glow.pdf` is excluded by `!**/*.pdf`\n* `logo/Logo Outer Glow.png` is excluded by `!**/*.png`\n* `logo/Logo White.jpg` is excluded by `!**/*.jpg`\n* `logo/Logo White.pdf` is excluded by `!**/*.pdf`\n* `logo/Logo White.png` is excluded by `!**/*.png`\n* `logo/Logo.jpg` is excluded by `!**/*.jpg`\n* `logo/Logo.pdf` is excluded by `!**/*.pdf`\n* `logo/Logo.png` is excluded by `!**/*.png`\n* `packages/docs/app/apple-icon.png` is excluded by `!**/*.png`\n* `packages/docs/app/icon.png` is excluded by `!**/*.png`\n* `packages/docs/app/logo.ico` is excluded by `!**/*.ico`\n* `packages/docs/pnpm-lock.yaml` is excluded by `!**/pnpm-lock.yaml`\n* `packages/docs/public/github-white.png` is excluded by `!**/*.png`\n* `packages/docs/public/logo/logo-black.jpg` is excluded by `!**/*.jpg`\n* `packages/docs/public/logo/logo-black.pdf` is excluded by `!**/*.pdf`\n* `packages/docs/public/logo/logo-black.png` is excluded by `!**/*.png`\n* `packages/docs/public/logo/logo-glow.jpg` is excluded by `!**/*.jpg`\n* `packages/docs/public/logo/logo-glow.pdf` is excluded by `!**/*.pdf`\n* `packages/docs/public/logo/logo-glow.png` is excluded by `!**/*.png`\n* `packages/docs/public/logo/logo-white.jpg` is excluded by `!**/*.jpg`\n* `packages/docs/public/logo/logo-white.pdf` is excluded by `!**/*.pdf`\n* `packages/docs/public/logo/logo-white.png` is excluded by `!**/*.png`\n\n</details>\n\n<details>\n<summary>📒 Files selected for processing (189)</summary>\n\n* `.changeset/README.md` (1 hunks)\n* `.changeset/config.json` (1 hunks)\n* `.configs/rollup.config.js` (1 hunks)\n* `.configs/tsconfig.base.json` (1 hunks)\n* `.dependency-cruiser.js` (0 hunks)\n* `.devcontainer/devcontainer.json` (1 hunks)\n* `.eslintrc.js` (0 hunks)\n* `.github/pull_request_template.md` (1 hunks)\n* `.github/workflows/release.yml` (3 hunks)\n* `.github/workflows/test.yml` (2 hunks)\n* `.gitignore` (1 hunks)\n* `.husky/pre-commit` (0 hunks)\n* `.husky/pre-push` (1 hunks)\n* `.npmrc` (1 hunks)\n* `.nvmrc` (1 hunks)\n* `.prettierrc.yaml` (1 hunks)\n* `.vscode/launch.json` (1 hunks)\n* `.vscode/settings.json` (1 hunks)\n* `CHANGELOG.md` (0 hunks)\n* `CONTRIBUTING.md` (2 hunks)\n* `ERROR_HANDLING.md` (2 hunks)\n* `LICENSE` (1 hunks)\n* `MIGRATION.md` (1 hunks)\n* `README.md` (18 hunks)\n* `README_ZH.md` (4 hunks)\n* `biome.jsonc` (1 hunks)\n* `configs/babel-jest.config.json` (0 hunks)\n* `configs/babel.config.js` (0 hunks)\n* `configs/jest.config.json` (0 hunks)\n* `configs/rollup.config.js` (0 hunks)\n* `configs/swc-jest.config.json` (0 hunks)\n* `configs/ts-jest.config.json` (0 hunks)\n* `configs/tsconfig.base.json` (0 hunks)\n* `configs/tsconfig.cjs.json` (0 hunks)\n* `configs/tsconfig.esm.json` (0 hunks)\n* `configs/tsconfig.test.json` (0 hunks)\n* `configs/tsconfig.types.json` (0 hunks)\n* `configs/vitest.config.ts` (0 hunks)\n* `deno-build.mjs` (0 hunks)\n* `deno/lib/ZodError.ts` (0 hunks)\n* `deno/lib/__tests__/Mocker.ts` (0 hunks)\n* `deno/lib/__tests__/all-errors.test.ts` (0 hunks)\n* `deno/lib/__tests__/anyunknown.test.ts` (0 hunks)\n* `deno/lib/__tests__/array.test.ts` (0 hunks)\n* `deno/lib/__tests__/async-parsing.test.ts` (0 hunks)\n* `deno/lib/__tests__/async-refinements.test.ts` (0 hunks)\n* `deno/lib/__tests__/base.test.ts` (0 hunks)\n* `deno/lib/__tests__/bigint.test.ts` (0 hunks)\n* `deno/lib/__tests__/branded.test.ts` (0 hunks)\n* `deno/lib/__tests__/complex.test.ts` (0 hunks)\n* `deno/lib/__tests__/crazySchema.ts` (0 hunks)\n* `deno/lib/__tests__/custom.test.ts` (0 hunks)\n* `deno/lib/__tests__/date.test.ts` (0 hunks)\n* `deno/lib/__tests__/deepmasking.test.ts` (0 hunks)\n* `deno/lib/__tests__/default.test.ts` (0 hunks)\n* `deno/lib/__tests__/description.test.ts` (0 hunks)\n* `deno/lib/__tests__/discriminated-unions.test.ts` (0 hunks)\n* `deno/lib/__tests__/enum.test.ts` (0 hunks)\n* `deno/lib/__tests__/error.test.ts` (0 hunks)\n* `deno/lib/__tests__/firstparty.test.ts` (0 hunks)\n* `deno/lib/__tests__/firstpartyschematypes.test.ts` (0 hunks)\n* `deno/lib/__tests__/function.test.ts` (0 hunks)\n* `deno/lib/__tests__/generics.test.ts` (0 hunks)\n* `deno/lib/__tests__/instanceof.test.ts` (0 hunks)\n* `deno/lib/__tests__/intersection.test.ts` (0 hunks)\n* `deno/lib/__tests__/literal.test.ts` (0 hunks)\n* `deno/lib/__tests__/map.test.ts` (0 hunks)\n* `deno/lib/__tests__/masking.test.ts` (0 hunks)\n* `deno/lib/__tests__/mocker.test.ts` (0 hunks)\n* `deno/lib/__tests__/nan.test.ts` (0 hunks)\n* `deno/lib/__tests__/nativeEnum.test.ts` (0 hunks)\n* `deno/lib/__tests__/nullable.test.ts` (0 hunks)\n* `deno/lib/__tests__/number.test.ts` (0 hunks)\n* `deno/lib/__tests__/object-augmentation.test.ts` (0 hunks)\n* `deno/lib/__tests__/object.test.ts` (0 hunks)\n* `deno/lib/__tests__/optional.test.ts` (0 hunks)\n* `deno/lib/__tests__/parseUtil.test.ts` (0 hunks)\n* `deno/lib/__tests__/parser.test.ts` (0 hunks)\n* `deno/lib/__tests__/partials.test.ts` (0 hunks)\n* `deno/lib/__tests__/pipeline.test.ts` (0 hunks)\n* `deno/lib/__tests__/preprocess.test.ts` (0 hunks)\n* `deno/lib/__tests__/primitive.test.ts` (0 hunks)\n* `deno/lib/__tests__/promise.test.ts` (0 hunks)\n* `deno/lib/__tests__/readonly.test.ts` (0 hunks)\n* `deno/lib/__tests__/record.test.ts` (0 hunks)\n* `deno/lib/__tests__/recursive.test.ts` (0 hunks)\n* `deno/lib/__tests__/refine.test.ts` (0 hunks)\n* `deno/lib/__tests__/safeparse.test.ts` (0 hunks)\n* `deno/lib/__tests__/set.test.ts` (0 hunks)\n* `deno/lib/__tests__/tuple.test.ts` (0 hunks)\n* `deno/lib/__tests__/unions.test.ts` (0 hunks)\n* `deno/lib/__tests__/validations.test.ts` (0 hunks)\n* `deno/lib/__tests__/void.test.ts` (0 hunks)\n* `deno/lib/benchmarks/datetime.ts` (0 hunks)\n* `deno/lib/benchmarks/discriminatedUnion.ts` (0 hunks)\n* `deno/lib/benchmarks/index.ts` (0 hunks)\n* `deno/lib/benchmarks/ipv4.ts` (0 hunks)\n* `deno/lib/benchmarks/object.ts` (0 hunks)\n* `deno/lib/benchmarks/primitives.ts` (0 hunks)\n* `deno/lib/benchmarks/realworld.ts` (0 hunks)\n* `deno/lib/benchmarks/string.ts` (0 hunks)\n* `deno/lib/benchmarks/union.ts` (0 hunks)\n* `deno/lib/errors.ts` (0 hunks)\n* `deno/lib/external.ts` (0 hunks)\n* `deno/lib/helpers/enumUtil.ts` (0 hunks)\n* `deno/lib/helpers/errorUtil.ts` (0 hunks)\n* `deno/lib/helpers/parseUtil.ts` (0 hunks)\n* `deno/lib/helpers/partialUtil.ts` (0 hunks)\n* `deno/lib/helpers/typeAliases.ts` (0 hunks)\n* `deno/lib/helpers/util.ts` (0 hunks)\n* `deno/lib/index.ts` (0 hunks)\n* `deno/lib/locales/en.ts` (0 hunks)\n* `deno/lib/mod.ts` (0 hunks)\n* `experiments/composition.ts` (1 hunks)\n* `experiments/dynamic.ts` (1 hunks)\n* `experiments/dynamic_v2.ts` (1 hunks)\n* `experiments/dynamic_v3.ts` (1 hunks)\n* `experiments/errors_old.ts` (1 hunks)\n* `experiments/errors_v2.ts` (1 hunks)\n* `experiments/extension.ts` (1 hunks)\n* `experiments/extension_v2.ts` (1 hunks)\n* `experiments/extension_v3.ts` (1 hunks)\n* `experiments/extension_v4.ts` (1 hunks)\n* `experiments/generics.ts` (1 hunks)\n* `experiments/implements.ts` (1 hunks)\n* `experiments/interfaces.ts` (1 hunks)\n* `experiments/interfaces_v2.ts` (1 hunks)\n* `experiments/interfaces_v3.ts` (1 hunks)\n* `experiments/intermediate.ts` (1 hunks)\n* `experiments/mixins.ts` (1 hunks)\n* `experiments/mixins_v2.ts` (1 hunks)\n* `experiments/mixins_v3.ts` (1 hunks)\n* `experiments/multiple_inheritance.ts` (1 hunks)\n* `experiments/oops.ts` (1 hunks)\n* `experiments/partial_generics.ts` (1 hunks)\n* `experiments/replacer.ts` (1 hunks)\n* `experiments/totems.ts` (1 hunks)\n* `experiments/totems_v2.ts` (1 hunks)\n* `index.d.ts` (0 hunks)\n* `jest.config.json` (0 hunks)\n* `lerna.json` (1 hunks)\n* `package.json` (1 hunks)\n* `packages/bench/_temp.ts` (1 hunks)\n* `packages/bench/ab-parse-array.ts` (1 hunks)\n* `packages/bench/ab-parse-checks.ts` (1 hunks)\n* `packages/bench/ab-parse-object.ts` (1 hunks)\n* `packages/bench/ab-parse-record.js` (1 hunks)\n* `packages/bench/ab-parse-string.ts` (1 hunks)\n* `packages/bench/ab-parse-uuid.js` (1 hunks)\n* `packages/bench/array.ts` (1 hunks)\n* `packages/bench/benchUtil.ts` (1 hunks)\n* `packages/bench/boolean.ts` (1 hunks)\n* `packages/bench/check-runner.ts` (1 hunks)\n* `packages/bench/datetime-regex.ts` (3 hunks)\n* `packages/bench/datetime.ts` (1 hunks)\n* `packages/bench/discriminated-union.ts` (1 hunks)\n* `packages/bench/fast-parse-object.ts` (1 hunks)\n* `packages/bench/fast-parse-string.ts` (1 hunks)\n* `packages/bench/index.ts` (1 hunks)\n* `packages/bench/instanceof.ts` (1 hunks)\n* `packages/bench/ipv4-regex.ts` (2 hunks)\n* `packages/bench/key-iteration.ts` (1 hunks)\n* `packages/bench/lazy-box.ts` (1 hunks)\n* `packages/bench/libs.ts` (1 hunks)\n* `packages/bench/metabench.ts` (1 hunks)\n* `packages/bench/number.ts` (1 hunks)\n* `packages/bench/object-async.ts` (1 hunks)\n* `packages/bench/object-creation.ts` (1 hunks)\n* `packages/bench/object-fail.ts` (1 hunks)\n* `packages/bench/object-moltar.ts` (1 hunks)\n* `packages/bench/object-safe.ts` (1 hunks)\n* `packages/bench/object-safeasync.ts` (1 hunks)\n* `packages/bench/object-setup.ts` (1 hunks)\n* `packages/bench/object.ts` (1 hunks)\n* `packages/bench/package.json` (1 hunks)\n* `packages/bench/paths.ts` (1 hunks)\n* `packages/bench/property-access.ts` (1 hunks)\n* `packages/bench/safe.ts` (1 hunks)\n* `packages/bench/string-old.ts` (1 hunks)\n* `packages/bench/string.ts` (1 hunks)\n* `packages/bench/string_instantiations.ts` (1 hunks)\n* `packages/bench/string_parse.ts` (1 hunks)\n* `packages/bench/tsconfig.bench.json` (1 hunks)\n* `packages/bench/union.ts` (1 hunks)\n* `packages/bench/zodbench.ts` (1 hunks)\n* `packages/core/LICENSE` (1 hunks)\n* `packages/core/jsr.json` (1 hunks)\n* `packages/core/package.json` (1 hunks)\n* `packages/core/src/api.ts` (1 hunks)\n\n</details>\n\n<details>\n<summary>💤 Files with no reviewable changes (93)</summary>\n\n* configs/ts-jest.config.json\n* deno/lib/__tests__/description.test.ts\n* deno/lib/__tests__/object-augmentation.test.ts\n* deno/lib/mod.ts\n* deno/lib/__tests__/nativeEnum.test.ts\n* deno/lib/__tests__/discriminated-unions.test.ts\n* configs/tsconfig.cjs.json\n* configs/babel.config.js\n* deno/lib/__tests__/instanceof.test.ts\n* configs/tsconfig.esm.json\n* deno/lib/__tests__/pipeline.test.ts\n* deno/lib/__tests__/void.test.ts\n* .husky/pre-commit\n* deno/lib/__tests__/parseUtil.test.ts\n* configs/vitest.config.ts\n* deno/lib/__tests__/anyunknown.test.ts\n* index.d.ts\n* configs/tsconfig.base.json\n* deno/lib/__tests__/array.test.ts\n* deno/lib/benchmarks/string.ts\n* configs/swc-jest.config.json\n* configs/tsconfig.types.json\n* deno/lib/index.ts\n* deno/lib/__tests__/safeparse.test.ts\n* deno/lib/__tests__/nan.test.ts\n* deno/lib/benchmarks/union.ts\n* configs/jest.config.json\n* deno/lib/__tests__/base.test.ts\n* deno/lib/__tests__/record.test.ts\n* deno/lib/locales/en.ts\n* deno/lib/benchmarks/ipv4.ts\n* deno/lib/__tests__/promise.test.ts\n* deno/lib/__tests__/mocker.test.ts\n* deno/lib/benchmarks/index.ts\n* deno/lib/__tests__/masking.test.ts\n* deno/lib/__tests__/Mocker.ts\n* deno/lib/__tests__/optional.test.ts\n* deno/lib/__tests__/default.test.ts\n* deno/lib/__tests__/error.test.ts\n* deno/lib/__tests__/custom.test.ts\n* deno/lib/__tests__/object.test.ts\n* deno/lib/__tests__/intersection.test.ts\n* configs/rollup.config.js\n* deno/lib/helpers/typeAliases.ts\n* deno/lib/__tests__/date.test.ts\n* deno/lib/__tests__/readonly.test.ts\n* deno/lib/benchmarks/object.ts\n* jest.config.json\n* deno/lib/__tests__/preprocess.test.ts\n* configs/babel-jest.config.json\n* deno/lib/benchmarks/discriminatedUnion.ts\n* deno/lib/__tests__/generics.test.ts\n* deno/lib/__tests__/async-parsing.test.ts\n* deno/lib/__tests__/firstparty.test.ts\n* deno/lib/__tests__/function.test.ts\n* deno/lib/__tests__/deepmasking.test.ts\n* .eslintrc.js\n* deno/lib/__tests__/all-errors.test.ts\n* deno/lib/__tests__/branded.test.ts\n* deno/lib/__tests__/set.test.ts\n* deno/lib/helpers/enumUtil.ts\n* deno/lib/__tests__/recursive.test.ts\n* .dependency-cruiser.js\n* deno/lib/__tests__/literal.test.ts\n* deno/lib/benchmarks/datetime.ts\n* deno-build.mjs\n* deno/lib/__tests__/firstpartyschematypes.test.ts\n* deno/lib/__tests__/number.test.ts\n* deno/lib/benchmarks/primitives.ts\n* deno/lib/helpers/util.ts\n* deno/lib/__tests__/tuple.test.ts\n* deno/lib/__tests__/primitive.test.ts\n* deno/lib/helpers/partialUtil.ts\n* deno/lib/__tests__/async-refinements.test.ts\n* deno/lib/errors.ts\n* deno/lib/__tests__/validations.test.ts\n* deno/lib/__tests__/crazySchema.ts\n* deno/lib/__tests__/unions.test.ts\n* deno/lib/__tests__/map.test.ts\n* deno/lib/benchmarks/realworld.ts\n* deno/lib/__tests__/complex.test.ts\n* deno/lib/__tests__/bigint.test.ts\n* deno/lib/__tests__/enum.test.ts\n* deno/lib/helpers/errorUtil.ts\n* deno/lib/external.ts\n* deno/lib/__tests__/partials.test.ts\n* configs/tsconfig.test.json\n* deno/lib/__tests__/parser.test.ts\n* deno/lib/__tests__/refine.test.ts\n* CHANGELOG.md\n* deno/lib/__tests__/nullable.test.ts\n* deno/lib/ZodError.ts\n* deno/lib/helpers/parseUtil.ts\n\n</details>\n\n<details>\n<summary>🧰 Additional context used</summary>\n\n<details>\n<summary>🧬 Code Graph Analysis (48)</summary>\n\n<details>\n<summary>packages/bench/datetime.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/paths.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/zodbench.ts (1)</summary>\n\n* `zodbench` (14-42)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/zodbench.ts (1)</summary>\n\n* `zodbench` (14-42)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-safeasync.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-fail.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ipv4-regex.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ab-parse-string.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ab-parse-record.js (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/array.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-async.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-creation.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ab-parse-array.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/boolean.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ab-parse-object.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-moltar.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-safe.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/union.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/multiple_inheritance.ts (1)</summary><blockquote>\n\n<details>\n<summary>experiments/extension_v2.ts (1)</summary>\n\n* `def` (42-48)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/fast-parse-object.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/check-runner.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/object-setup.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/datetime-regex.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/ab-parse-checks.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/safe.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `benchWithData` (36-63)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/generics.ts (4)</summary><blockquote>\n\n<details>\n<summary>experiments/partial_generics.ts (1)</summary>\n\n* `Dynamic` (10-10)\n\n</details>\n<details>\n<summary>experiments/interfaces.ts (3)</summary>\n\n* `T` (48-54)\n* `ZodString` (93-96)\n* `ZodString` (98-108)\n\n</details>\n<details>\n<summary>experiments/extension.ts (2)</summary>\n\n* `ZodString` (200-200)\n* `ZodString` (201-207)\n\n</details>\n<details>\n<summary>experiments/interfaces_v3.ts (2)</summary>\n\n* `ZodString` (22-22)\n* `ZodString` (23-26)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/partial_generics.ts (1)</summary><blockquote>\n\n<details>\n<summary>experiments/interfaces.ts (1)</summary>\n\n* `T` (48-54)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/composition.ts (4)</summary><blockquote>\n\n<details>\n<summary>experiments/interfaces.ts (8)</summary>\n\n* `$ZodString` (64-68)\n* `$ZodString` (70-77)\n* `$Def` (6-12)\n* `ZodType` (79-81)\n* `ZodType` (83-91)\n* `$ZodType` (27-39)\n* `ZodString` (93-96)\n* `ZodString` (98-108)\n\n</details>\n<details>\n<summary>experiments/mixins.ts (2)</summary>\n\n* `$ZodString` (20-25)\n* `ZodString` (93-97)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (1)</summary>\n\n* `ParseContext` (11-20)\n\n</details>\n<details>\n<summary>experiments/interfaces_v3.ts (2)</summary>\n\n* `ZodString` (22-22)\n* `ZodString` (23-26)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/key-iteration.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/string-old.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/mixins_v3.ts (4)</summary><blockquote>\n\n<details>\n<summary>experiments/intermediate.ts (6)</summary>\n\n* `Infer` (10-10)\n* `output` (9-9)\n* `ZodFail` (12-25)\n* `ParseResultSync` (27-27)\n* `ParseResultAsync` (28-28)\n* `ParseResult` (29-29)\n\n</details>\n<details>\n<summary>experiments/errors_old.ts (3)</summary>\n\n* `errors` (381-383)\n* `ZodIssue` (343-353)\n* `IssueData` (496-504)\n\n</details>\n<details>\n<summary>packages/core/src/zsf.ts (3)</summary>\n\n* `$ZSF` (5-12)\n* `$ZSFString` (14-19)\n* `$ZSFNumber` (23-29)\n\n</details>\n<details>\n<summary>experiments/interfaces_v3.ts (2)</summary>\n\n* `ZodString` (22-22)\n* `ZodString` (23-26)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/mixins.ts (3)</summary><blockquote>\n\n<details>\n<summary>packages/core/src/util.ts (1)</summary>\n\n* `Constructor` (844-844)\n\n</details>\n<details>\n<summary>experiments/interfaces.ts (8)</summary>\n\n* `$ZodType` (27-39)\n* `T` (48-54)\n* `$ZodString` (64-68)\n* `$ZodString` (70-77)\n* `ZodType` (79-81)\n* `ZodType` (83-91)\n* `ZodString` (93-96)\n* `ZodString` (98-108)\n\n</details>\n<details>\n<summary>experiments/interfaces_v3.ts (2)</summary>\n\n* `ZodString` (22-22)\n* `ZodString` (23-26)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/interfaces_v3.ts (6)</summary><blockquote>\n\n<details>\n<summary>experiments/extension_v2.ts (1)</summary>\n\n* `$ZodType` (23-23)\n\n</details>\n<details>\n<summary>experiments/interfaces.ts (6)</summary>\n\n* `$ZodType` (27-39)\n* `T` (48-54)\n* `ZodType` (79-81)\n* `ZodType` (83-91)\n* `ZodString` (93-96)\n* `ZodString` (98-108)\n\n</details>\n<details>\n<summary>packages/zod/src/schemas.ts (4)</summary>\n\n* `ZodType` (24-95)\n* `ZodType` (97-171)\n* `ZodString` (270-270)\n* `ZodString` (271-331)\n\n</details>\n<details>\n<summary>experiments/composition.ts (1)</summary>\n\n* `ZodString` (41-47)\n\n</details>\n<details>\n<summary>experiments/extension.ts (2)</summary>\n\n* `ZodString` (200-200)\n* `ZodString` (201-207)\n\n</details>\n<details>\n<summary>experiments/mixins.ts (1)</summary>\n\n* `ZodString` (93-97)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/discriminated-union.ts (4)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (3)</summary>\n\n* `makeSchema` (4-10)\n* `makeData` (25-32)\n* `randomPick` (21-23)\n\n</details>\n<details>\n<summary>packages/bench/string.ts (2)</summary>\n\n* `zod3` (8-10)\n* `zod4` (11-13)\n\n</details>\n<details>\n<summary>packages/bench/object-moltar.ts (2)</summary>\n\n* `zod3` (54-56)\n* `zod4` (57-59)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/fast-parse-string.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/property-access.ts (1)</summary><blockquote>\n\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/bench/number.ts (2)</summary><blockquote>\n\n<details>\n<summary>packages/bench/benchUtil.ts (1)</summary>\n\n* `makeData` (25-32)\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (1)</summary>\n\n* `metabench` (14-27)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/dynamic.ts (3)</summary><blockquote>\n\n<details>\n<summary>experiments/dynamic_v3.ts (2)</summary>\n\n* `InnerDynamicBase` (2-8)\n* `DynamicBase` (11-11)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (2)</summary>\n\n* `$ZodOptionalDef` (2849-2852)\n* `$ZodArrayDef` (1300-1303)\n\n</details>\n<details>\n<summary>experiments/interfaces_v3.ts (2)</summary>\n\n* `ZodString` (22-22)\n* `ZodString` (23-26)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/interfaces_v2.ts (11)</summary><blockquote>\n\n<details>\n<summary>experiments/extension_v2.ts (2)</summary>\n\n* `$ZodType` (23-23)\n* `$ZodString` (61-68)\n\n</details>\n<details>\n<summary>experiments/interfaces.ts (8)</summary>\n\n* `$ZodType` (27-39)\n* `T` (48-54)\n* `ZodType` (79-81)\n* `ZodType` (83-91)\n* `$ZodString` (64-68)\n* `$ZodString` (70-77)\n* `ZodString` (93-96)\n* `ZodString` (98-108)\n\n</details>\n<details>\n<summary>packages/zod/src/schemas.ts (5)</summary>\n\n* `ZodType` (24-95)\n* `ZodType` (97-171)\n* `ZodString` (270-270)\n* `ZodString` (271-331)\n* `string` (333-335)\n\n</details>\n<details>\n<summary>experiments/extension.ts (5)</summary>\n\n* `$ZodString` (24-49)\n* `ZodString` (200-200)\n* `ZodString` (201-207)\n* `input` (31-48)\n* `input` (91-93)\n\n</details>\n<details>\n<summary>experiments/mixins.ts (4)</summary>\n\n* `$ZodString` (20-25)\n* `ZodString` (93-97)\n* `parse` (22-24)\n* `parse` (42-44)\n\n</details>\n<details>\n<summary>experiments/interfaces_v3.ts (2)</summary>\n\n* `ZodString` (22-22)\n* `ZodString` (23-26)\n\n</details>\n<details>\n<summary>packages/zod/src/coerce.ts (2)</summary>\n\n* `ZodCoercedString` (4-4)\n* `string` (5-7)\n\n</details>\n<details>\n<summary>packages/zod/src/external.ts (1)</summary>\n\n* `input` (13-13)\n\n</details>\n<details>\n<summary>experiments/extension_v3.ts (5)</summary>\n\n* `input` (10-10)\n* `input` (71-74)\n* `input` (77-85)\n* `input` (104-119)\n* `input` (278-281)\n\n</details>\n<details>\n<summary>experiments/implements.ts (4)</summary>\n\n* `input` (13-13)\n* `input` (73-76)\n* `input` (78-86)\n* `input` (251-254)\n\n</details>\n<details>\n<summary>experiments/extension_v4.ts (2)</summary>\n\n* `input` (10-10)\n* `input` (71-74)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/extension_v4.ts (4)</summary><blockquote>\n\n<details>\n<summary>experiments/mixins_v3.ts (5)</summary>\n\n* `output` (12-12)\n* `ZodFail` (15-28)\n* `ParseResultSync` (30-30)\n* `ParseResultAsync` (31-31)\n* `ParseResult` (32-32)\n\n</details>\n<details>\n<summary>experiments/errors_old.ts (3)</summary>\n\n* `errors` (381-383)\n* `ZodIssue` (343-353)\n* `IssueData` (496-504)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (1)</summary>\n\n* `ParseContext` (11-20)\n\n</details>\n<details>\n<summary>experiments/interfaces_v3.ts (2)</summary>\n\n* `ZodString` (22-22)\n* `ZodString` (23-26)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/extension_v3.ts (5)</summary><blockquote>\n\n<details>\n<summary>experiments/errors_old.ts (2)</summary>\n\n* `errors` (381-383)\n* `ZodIssue` (343-353)\n\n</details>\n<details>\n<summary>experiments/errors_v2.ts (1)</summary>\n\n* `ZodIssue` (214-224)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (1)</summary>\n\n* `ParseContext` (11-20)\n\n</details>\n<details>\n<summary>packages/core/src/zsf.ts (2)</summary>\n\n* `$ZSF` (5-12)\n* `$ZSFString` (14-19)\n\n</details>\n<details>\n<summary>experiments/interfaces_v3.ts (2)</summary>\n\n* `ZodString` (22-22)\n* `ZodString` (23-26)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/dynamic_v2.ts (3)</summary><blockquote>\n\n<details>\n<summary>experiments/dynamic.ts (2)</summary>\n\n* `InnerDynamicBase` (2-8)\n* `DynamicBase` (11-11)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (2)</summary>\n\n* `$ZodOptionalDef` (2849-2852)\n* `$ZodArrayDef` (1300-1303)\n\n</details>\n<details>\n<summary>experiments/interfaces_v3.ts (2)</summary>\n\n* `ZodString` (22-22)\n* `ZodString` (23-26)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/errors_old.ts (8)</summary><blockquote>\n\n<details>\n<summary>packages/zod/src/external.ts (2)</summary>\n\n* `input` (13-13)\n* `output` (13-13)\n\n</details>\n<details>\n<summary>experiments/extension.ts (2)</summary>\n\n* `input` (31-48)\n* `input` (91-93)\n\n</details>\n<details>\n<summary>experiments/extension_v4.ts (3)</summary>\n\n* `input` (10-10)\n* `input` (71-74)\n* `output` (11-11)\n\n</details>\n<details>\n<summary>experiments/errors_v2.ts (5)</summary>\n\n* `ZodIssueCode` (6-17)\n* `ZodIssueCode` (18-18)\n* `ZodIssueBase` (20-27)\n* `ZodInvalidTypeIssue` (29-48)\n* `ZodIssue` (214-224)\n\n</details>\n<details>\n<summary>packages/core/src/util.ts (2)</summary>\n\n* `Primitive` (154-154)\n* `jsonStringifyReplacer` (221-224)\n\n</details>\n<details>\n<summary>experiments/intermediate.ts (1)</summary>\n\n* `output` (9-9)\n\n</details>\n<details>\n<summary>experiments/mixins_v3.ts (1)</summary>\n\n* `output` (12-12)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (1)</summary>\n\n* `ParseContext` (11-20)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/extension_v2.ts (4)</summary><blockquote>\n\n<details>\n<summary>experiments/dynamic.ts (2)</summary>\n\n* `InnerDynamicBase` (2-8)\n* `DynamicBase` (11-11)\n\n</details>\n<details>\n<summary>experiments/errors_old.ts (1)</summary>\n\n* `ZodErrorMap` (511-511)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (1)</summary>\n\n* `ParseContext` (11-20)\n\n</details>\n<details>\n<summary>experiments/mixins.ts (1)</summary>\n\n* `$ZodString` (20-25)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/implements.ts (4)</summary><blockquote>\n\n<details>\n<summary>packages/core/src/zsf.ts (7)</summary>\n\n* `$ZSF` (5-12)\n* `$ZSFString` (14-19)\n* `$ZSFNumber` (23-29)\n* `$ZSFUndefined` (39-41)\n* `$ZSFNull` (35-37)\n* `$ZSFUnion` (96-99)\n* `$ZSFArray` (62-66)\n\n</details>\n<details>\n<summary>experiments/interfaces.ts (5)</summary>\n\n* `ZodType` (79-81)\n* `ZodType` (83-91)\n* `T` (48-54)\n* `$ZodType` (27-39)\n* `ZodOptional` (110-114)\n\n</details>\n<details>\n<summary>experiments/errors_old.ts (3)</summary>\n\n* `errors` (381-383)\n* `ZodIssue` (343-353)\n* `IssueData` (496-504)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (1)</summary>\n\n* `ParseContext` (11-20)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/dynamic_v3.ts (6)</summary><blockquote>\n\n<details>\n<summary>experiments/dynamic.ts (2)</summary>\n\n* `InnerDynamicBase` (2-8)\n* `DynamicBase` (11-11)\n\n</details>\n<details>\n<summary>experiments/extension_v2.ts (7)</summary>\n\n* `InnerDynamicBase` (7-13)\n* `DynamicBase` (16-16)\n* `$ZodTypeDef` (18-22)\n* `$ZodType` (23-23)\n* `$ZodStringDef` (57-59)\n* `$ZodString` (61-68)\n* `def` (42-48)\n\n</details>\n<details>\n<summary>experiments/extension.ts (3)</summary>\n\n* `$ZodString` (24-49)\n* `ZodString` (200-200)\n* `ZodString` (201-207)\n\n</details>\n<details>\n<summary>experiments/mixins.ts (4)</summary>\n\n* `$ZodString` (20-25)\n* `$ZodOptional` (30-32)\n* `$ZodOptional` (33-45)\n* `ZodString` (93-97)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (3)</summary>\n\n* `$ZodOptionalDef` (2849-2852)\n* `$ZodNullableDef` (2894-2897)\n* `$ZodArrayDef` (1300-1303)\n\n</details>\n<details>\n<summary>experiments/interfaces_v3.ts (2)</summary>\n\n* `ZodString` (22-22)\n* `ZodString` (23-26)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/interfaces.ts (3)</summary><blockquote>\n\n<details>\n<summary>packages/core/src/util.ts (1)</summary>\n\n* `Omit` (83-83)\n\n</details>\n<details>\n<summary>experiments/errors_old.ts (1)</summary>\n\n* `ZodErrorMap` (511-511)\n\n</details>\n<details>\n<summary>experiments/interfaces_v2.ts (1)</summary>\n\n* `optional` (42-44)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>experiments/intermediate.ts (5)</summary><blockquote>\n\n<details>\n<summary>experiments/interfaces.ts (3)</summary>\n\n* `T` (48-54)\n* `$ZodType` (27-39)\n* `check` (55-59)\n\n</details>\n<details>\n<summary>experiments/mixins_v3.ts (5)</summary>\n\n* `output` (12-12)\n* `ZodFail` (15-28)\n* `ParseResultSync` (30-30)\n* `ParseResultAsync` (31-31)\n* `ParseResult` (32-32)\n\n</details>\n<details>\n<summary>experiments/errors_old.ts (3)</summary>\n\n* `errors` (381-383)\n* `ZodIssue` (343-353)\n* `IssueData` (496-504)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (1)</summary>\n\n* `ParseContext` (11-20)\n\n</details>\n<details>\n<summary>packages/core/src/zsf.ts (3)</summary>\n\n* `$ZSF` (5-12)\n* `$ZSFString` (14-19)\n* `$ZSFNumber` (23-29)\n\n</details>\n\n</blockquote></details>\n<details>\n<summary>packages/core/src/api.ts (3)</summary><blockquote>\n\n<details>\n<summary>packages/core/src/util.ts (4)</summary>\n\n* `SchemaClass` (146-146)\n* `StringFormatParams` (449-456)\n* `CheckStringFormatParams` (458-461)\n* `value` (229-236)\n\n</details>\n<details>\n<summary>packages/core/src/schemas.ts (72)</summary>\n\n* `$ZodString` (272-274)\n* `$ZodString` (276-295)\n* `$ZodEmail` (371-373)\n* `$ZodEmail` (375-381)\n* `$ZodGUID` (325-327)\n* `$ZodGUID` (329-332)\n* `$ZodUUID` (344-346)\n* `$ZodUUID` (348-365)\n* `$ZodURL` (388-390)\n* `$ZodURL` (392-409)\n* `$ZodEmoji` (416-418)\n* `$ZodEmoji` (420-426)\n* `$ZodNanoID` (433-435)\n* `$ZodNanoID` (437-443)\n* `$ZodCUID` (450-452)\n* `$ZodCUID` (454-457)\n* `$ZodCUID2` (464-466)\n* `$ZodCUID2` (468-474)\n* `$ZodULID` (481-483)\n* `$ZodULID` (485-488)\n* `$ZodXID` (495-497)\n* `$ZodXID` (499-502)\n* `$ZodKSUID` (509-511)\n* `$ZodKSUID` (513-519)\n* `$ZodIPv4` (613-615)\n* `$ZodIPv4` (617-625)\n* `$ZodIPv6` (636-638)\n* `$ZodIPv6` (640-662)\n* `$ZodBase64` (695-697)\n* `$ZodBase64` (699-711)\n* `$ZodE164` (746-748)\n* `$ZodE164` (750-753)\n* `$ZodJWT` (779-781)\n* `$ZodJWT` (783-795)\n* `$ZodISODateTime` (533-535)\n* `$ZodISODateTime` (537-543)\n* `$ZodISODate` (550-552)\n* `$ZodISODate` (554-560)\n* `$ZodISOTime` (574-576)\n* `$ZodISOTime` (578-584)\n* `$ZodISODuration` (591-593)\n* `$ZodISODuration` (595-601)\n* `$ZodNumber` (819-821)\n* `$ZodNumber` (823-855)\n* `$ZodNumberFormat` (867-869)\n* `$ZodNumberFormat` (871-877)\n* `$ZodBoolean` (899-901)\n* `$ZodBoolean` (903-925)\n* `$ZodBigInt` (948-950)\n* `$ZodBigInt` (952-971)\n* `$ZodBigIntFormat` (984-986)\n* `$ZodBigIntFormat` (988-994)\n* `$ZodSymbol` (1012-1014)\n* `$ZodSymbol` (1016-1030)\n* `$ZodUndefined` (1050-1052)\n* `$ZodUndefined` (1054-1073)\n* `$ZodNull` (1094-1096)\n* `$ZodNull` (1098-1114)\n* `$ZodAny` (1133-1135)\n* `$ZodAny` (1137-1141)\n* `$ZodUnknown` (1160-1162)\n* `$ZodUnknown` (1164-1171)\n* `$ZodNever` (1190-1192)\n* `$ZodNever` (1194-1206)\n* `$ZodVoid` (1225-1227)\n* `$ZodVoid` (1229-1243)\n* `$ZodDate` (1262-1264)\n* `$ZodDate` (1266-1290)\n* `$ZodNaN` (3210-3212)\n* `$ZodNaN` (3214-3229)\n* `$ZodType` (141-144)\n* `$ZodType` (146-246)\n\n</details>\n<details>\n<summary>packages/core/src/core.ts (3)</summary>\n\n* `output` (63-63)\n* `output` (64-64)\n* `input` (62-62)\n\n</details>\n\n</blockquote></details>\n\n</details><details>\n<summary>🪛 LanguageTool</summary>\n\n<details>\n<summary>ERROR_HANDLING.md</summary>\n\n[style] ~57-~57: As a shorter alternative for ‘able to’, consider using “can”.\nContext: ...hrow issues of any `ZodIssueCode`). You are able to pass in a `params` object here that is ...\n\n(BE_ABLE_TO)\n\n</details>\n<details>\n<summary>README.md</summary>\n\n[style] ~2418-~2418: Consider using a more polite wording.\nContext: ... NOT an instance of `ZodString`. If you want to use the built-in methods of `ZodStri...\n\n(IF_YOU_WANT)\n\n</details>\n\n</details>\n<details>\n<summary>🪛 markdownlint-cli2 (0.17.2)</summary>\n\n<details>\n<summary>ERROR_HANDLING.md</summary>\n\n57-57: Link fragments should be valid\nExpected: #customizing-errors-with-zoderrormap; Actual: #Customizing-errors-with-ZodErrorMap\n\n(MD051, link-fragments)\n\n</details>\n<details>\n<summary>README.md</summary>\n\n117-117: Link fragments should be valid\nExpected: #zodtype-with-zodtransform; Actual: #zodtype-with-ZodTransform\n\n(MD051, link-fragments)\n\n</details>\n\n</details>\n<details>\n<summary>🪛 YAMLlint (1.35.1)</summary>\n\n<details>\n<summary>.github/workflows/release.yml</summary>\n\n[error] 22-22: trailing spaces\n\n(trailing-spaces)\n\n---\n\n[error] 29-29: trailing spaces\n\n(trailing-spaces)\n\n---\n\n[error] 35-35: trailing spaces\n\n(trailing-spaces)\n\n---\n\n[error] 56-56: trailing spaces\n\n(trailing-spaces)\n\n---\n\n[error] 91-91: no new line character at the end of file\n\n(new-line-at-end-of-file)\n\n---\n\n[error] 91-91: trailing spaces\n\n(trailing-spaces)\n\n</details>\n\n</details>\n\n</details>\n\n<details>\n<summary>🔇 Additional comments (121)</summary><blockquote>\n\n<details>\n<summary>experiments/mixins_v2.ts (4)</summary>\n\n`1-9`: **Class hierarchy looks good, with proper type narrowing.**\n\nThe base class and child classes are well-structured with appropriate type narrowing from string to string literals.\n\n---\n\n`11-13`: **Clean mixin pattern with TypeScript's indexed access types.**\n\nGood use of `this[\"type\"]` to ensure the return type is bound to the implementing class's specific type.\n\n---\n\n`15-24`: **Example demonstrates correct type resolution.**\n\nThe interface extension works as expected, and the comments provide good context about why explicit type redeclaration is unnecessary.\n\n---\n\n`1-45`: **Experimental file contains multiple undefined references.**\n\nSince this is in the `experiments` directory, these issues might be expected. However, to make this experimental code compilable:\n\n1. Define the missing types: `Augmentation`, `Parent`, and `AugmentSchema`\n2. Resolve the duplicate declaration of `AugmentedChildA` \n3. Consider implementing or removing the commented code blocks\n\n\nWould you like me to provide implementations for the missing interfaces to make this experimental code compile?\n\n</details>\n<details>\n<summary>experiments/partial_generics.ts (2)</summary>\n\n`24-26`: **LGTM! Effective use of mapped and conditional types.**\n\nThe `MergeDef` type utility is well-designed, leveraging TypeScript's mapped and conditional types to create a type that merges two definitions with proper override behavior.\n\n---\n\n`44-46`: <details>\n<summary>✅ Verification successful</summary>\n\n**Verify if these assignments are intentionally showing type errors.**\n\nThese assignments appear to be demonstrating TypeScript's type checking behavior, but they're assigning objects with properties to types that shouldn't allow them. If this is intentional for educational purposes, consider adding explanatory comments.\n\n\n```diff\n-const b1: Empty = { name: \"colin\" };\n-const b2: EmptyRecord = { name: \"colin\" };\n-const b3: EmptyInterface = { name: \"colin\" };\n+// Demonstrating TypeScript's excess property checking behavior:\n+// These should be type errors but TypeScript allows them due to structural typing\n+const b1: Empty = { name: \"colin\" }; // Should error: type { name: string } is not assignable to type Empty\n+const b2: EmptyRecord = { name: \"colin\" }; // Should error: type { name: string } is not assignable to type EmptyRecord\n+const b3: EmptyInterface = { name: \"colin\" }; // Should error: type { name: string } is not assignable to type EmptyInterface\n```\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Check if TypeScript actually reports errors for these assignments\ncat > /tmp/type-check.ts << EOF\ntype Empty = { [key: string]: never };\ntype EmptyRecord = Record<never, never>;\ninterface EmptyInterface {}\n\n// These should produce errors if TypeScript is correctly enforcing the types\nconst b1: Empty = { name: \"colin\" };\nconst b2: EmptyRecord = { name: \"colin\" };\nconst b3: EmptyInterface = { name: \"colin\" };\nEOF\n\n# Run TypeScript compiler to check for errors\nnpx tsc /tmp/type-check.ts --noEmit --strict\necho \"Exit code: $?\"\n```\n\nLength of output: 714\n\n---\n\n\n\n</details>\n\n**TypeScript Excess Property Checks Verified**\n\nThe verification confirms that these assignments are intentionally triggering type errors under strict mode. The updated diff now includes clear, explanatory comments to indicate that the errors are expected for educational purposes:\n\n- **File:** experiments/partial_generics.ts (Lines: 44-46)\n- **Action:** Added comments to denote that each assignment intentionally produces a type error.  \n- **Diff snippet update:**\n  ```diff\n  +// Demonstrating TypeScript's excess property checking behavior:\n  +// These assignments intentionally produce type errors under strict mode:\n  +const b1: Empty = { name: \"colin\" }; // Error: property 'name' of type 'string' is not assignable to type 'never'\n  +const b2: EmptyRecord = { name: \"colin\" }; // Error: type '{ name: string }' is not assignable to type 'Record<never, never>'\n  +const b3: EmptyInterface = { name: \"colin\" }; // Error: Object literal may only specify known properties, and 'name' does not exist in type 'EmptyInterface'\n  ```\n\nPlease ensure these comments remain to clarify the rationale behind these intentional type errors.\n\n</details>\n<details>\n<summary>experiments/multiple_inheritance.ts (3)</summary>\n\n`1-6`: **Class implementation looks good.**\n\nThis is a simple class definition with appropriate typing and initialization.\n\n---\n\n`8-10`: **Property 'b' is declared but never initialized.**\n\nThe property 'b' is declared as a string but doesn't have an initializer in the constructor, which means it will be `undefined` when an instance of `B` is created. This could lead to runtime errors if code assumes `b` has a value.\n\n\nConsider adding a constructor to initialize this property:\n\n```diff\nclass B {\n  b: string;\n+ constructor() {\n+   this.b = \"b\";\n+ }\n}\n```\n\n---\n\n`27-29`: **Class 'C' property is not initialized.**\n\nThe property 'c' is declared as a string but isn't initialized in a constructor, which means it will be `undefined` when an instance of `C` is created.\n\n\nConsider adding a constructor to initialize this property:\n\n```diff\nclass C extends merge(A, B) {\n  c: string;\n+ constructor(def: any) {\n+   super(def);\n+   this.c = \"c\";\n+ }\n}\n```\n\n</details>\n<details>\n<summary>.nvmrc (1)</summary>\n\n`1-2`: **Ensure the Node.js version is intentional.**  \nThe file correctly specifies the Node.js version as “22”. Please verify that this version aligns with your project requirements as well as your CI and development environments.\n\n</details>\n<details>\n<summary>LICENSE (1)</summary>\n\n`3-3`: **Validate updated copyright notice.**  \nThe update from “2020” to “2025” is clear and maintains the legal integrity of the project. Ensure that any related documentation or build processes that might reference the copyright year are also updated accordingly.\n\n</details>\n<details>\n<summary>.husky/pre-push (1)</summary>\n\n`4-4`: **Migration to pnpm in pre-push hook confirmed.**  \nThe change to run `pnpm test` in the pre-push hook is consistent with the broader migration away from yarn. Please double-check that all associated CI/CD configurations and local development instructions reflect this change.\n\n</details>\n<details>\n<summary>lerna.json (1)</summary>\n\n`1-5`: **Review new Lerna configuration.**  \nThe new `lerna.json` sets the schema, defines `\"version\": \"0.0.0\"`, and specifies `\"npmClient\": \"pnpm\"`, which aligns with your project’s migration strategy. Confirm that the placeholder version meets your versioning strategy and that any additional settings needed for your monorepo setup are planned for future iterations if required.\n\n</details>\n<details>\n<summary>packages/bench/package.json (1)</summary>\n\n`1-14`: **Benchmark Package Configuration is Solid**  \nThe configuration for the `@zod/benchmarks` package is well-structured. Declaring it as a private module with the proper type and workspace dependency references ensures a streamlined setup for internal benchmarking.\n\n</details>\n<details>\n<summary>packages/core/jsr.json (1)</summary>\n\n`1-15`: **jsr.json Configuration Looks Correct**  \nThis JSON configuration for `@zod/core` clearly defines the package’s version, exports, and publishing rules. Ensure that the relative paths (e.g., `./src/index.ts` and locale file paths) remain in sync with your project structure as development progresses.\n\n</details>\n<details>\n<summary>.changeset/config.json (1)</summary>\n\n`1-12`: **Changeset Configuration Updated**  \nThe Changesets config is comprehensive, setting the schema, changelog method, and internal dependency update strategy appropriately. The `\"baseBranch\": \"main\"` setting aligns with your current branch strategy.\n\n</details>\n<details>\n<summary>MIGRATION.md (1)</summary>\n\n`59-59`: <details>\n<summary>❓ Verification inconclusive</summary>\n\n**Class rename from ZodEffects to ZodTransform.**\n\nThis change accurately reflects the new class name for Zod 4, which better describes its function for handling transformations. The update to the migration guide ensures consistency across documentation for users upgrading from different versions.\n\nMake sure to check for any other instances of \"ZodEffects\" in the documentation that might need similar updates.\n\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Check for other instances of ZodEffects that might need updating\ngrep -r \"ZodEffects\" --include=\"*.md\" --include=\"*.ts\" .\n```\n\nLength of output: 236\n\n---\n\n\n\n</details>\n\n**Action: Confirm Consistent Update of \"ZodEffects\" References**\n\nThe migration guide in **MIGRATION.md** has been updated to show the new \"ZodTransform\" usage. However, a grep search revealed additional occurrences:\n- **experiments/replacer.ts** contains two references to `z.ZodEffects` (line details not provided here).\n- **v4.md** includes the note “- Drops `ZodEffects`”, which appears intentional.\n\nPlease verify whether the references in **experiments/replacer.ts** should also be updated to \"ZodTransform\" or if they are meant to remain as-is for experimental purposes. This will ensure consistency across the codebase and documentation.\n\n</details>\n<details>\n<summary>.npmrc (1)</summary>\n\n`1-4`: **PNPM workspace configuration looks good.**\n\nThese settings establish a proper monorepo structure with workspace packages:\n- `link-workspace-packages=true` enables linking between local packages\n- `prefer-workspace-packages=true` prioritizes workspace packages over registry versions\n- `hoist-workspace-packages=false` prevents hoisting to root node_modules (reduces conflicts)\n- `save-workspace-protocol=false` disables workspace: protocol in package.json\n\nThis aligns with the PR's migration to pnpm as mentioned in the AI summary.\n\n</details>\n<details>\n<summary>.vscode/settings.json (1)</summary>\n\n`1-23`: **Good editor standardization with Biome as formatter.**\n\nThis configuration sets up a consistent development environment with:\n- Local TypeScript SDK with validation enabled\n- Biome as the default formatter and linter\n- Automatic formatting and code cleanup on save\n- Appropriate file exclusions for build artifacts\n\nThese settings will help maintain code quality and consistency across the team.\n\n</details>\n<details>\n<summary>.vscode/launch.json (1)</summary>\n\n`1-21`: **Node.js Debug Configuration Review**  \nThe Node configuration is well set up with `\"runtimeExecutable\": \"node\"` and includes a useful experimental flag (`\"--experimental-strip-types\"`) along with skipping internal Node.js modules. Verify that using `\"program\": \"${file}\"` meets your debugging workflow needs and that the commented alternative (the specific `\"play.ts\"`) is no longer required.\n\n</details>\n<details>\n<summary>.gitignore (1)</summary>\n\n`9-22`: **.gitignore Update Verification**  \nThe newly added entries (e.g., `scratch`, `out.png`, `logos`, `.zed`, `dist`, `.tshy`, `.tshy-build`, `packages/tsc-perf`, `tsconfig.vitest-temp.json`, and `*.tgz`) effectively broaden the list of ignored files and directories. Just confirm that the removal of the `.vscode` entry was intentional and that none of these new patterns accidentally exclude files that should be versioned.\n\n</details>\n<details>\n<summary>README_ZH.md (1)</summary>\n\n`1298-1305`: **JSON Schema Type Update Verification**  \nThe change from `z.ZodSchema<Json>` to `z.ZodType<Json>` in the JSON schema is consistent with the new public API. Please ensure that all documentation examples and downstream code referencing this schema are updated accordingly.\n\n</details>\n<details>\n<summary>ERROR_HANDLING.md (1)</summary>\n\n`43-58`: **Enhanced Error Code Definitions Review**  \nThe updated error codes—especially the addition of `ZodIssueCode.invalid_intersection_types` with the new `mergeErrorPath` field—improve the granularity of error feedback for intersection merges. This extra metadata should help pinpoint merging conflicts in complex object intersections. Verify that corresponding test cases cover these new error scenarios.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[style] ~57-~57: As a shorter alternative for ‘able to’, consider using “can”.\nContext: ...hrow issues of any `ZodIssueCode`). You are able to pass in a `params` object here that is ...\n\n(BE_ABLE_TO)\n\n</details>\n<details>\n<summary>🪛 markdownlint-cli2 (0.17.2)</summary>\n\n57-57: Link fragments should be valid\nExpected: #customizing-errors-with-zoderrormap; Actual: #Customizing-errors-with-ZodErrorMap\n\n(MD051, link-fragments)\n\n</details>\n\n</details>\n\n</details>\n<details>\n<summary>biome.jsonc (1)</summary>\n\n`61-76`: **LGTM! Comprehensive ignore list for generated files.**\n\nThe ignore list properly excludes build artifacts, generated files, and test directories, which helps keep linting focused on source files that should be checked.\n\n</details>\n<details>\n<summary>packages/core/package.json (1)</summary>\n\n`16-95`: **Comprehensive exports configuration supports multiple module formats**\n\nThe exports field is well-structured with both ESM and CommonJS support for all entry points. The \"@zod/source\" condition is a nice addition for tooling that can work directly with TypeScript source.\n\n</details>\n<details>\n<summary>experiments/extension.ts (1)</summary>\n\n`31-48`: <details>\n<summary>✅ Verification successful</summary>\n\n**Potential coercion behavior inconsistency in ~parse**\n\nThe `~parse` method coerces non-string inputs to strings when `this.coerce` is true, but still passes the validation check. This might lead to unexpected behavior if users expect validation to fail for non-string inputs with coercion enabled.\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Check how coercion is implemented in the main codebase\nrg -A 10 \"coerce.*String|String.*coerce\" --type ts packages/ src/\n```\n\nLength of output: 2689\n\n---\n\n\n\n</details>\n\n**Clarify coercion behavior in `~parse`**\n\nAfter verifying the coercion logic in the core API (e.g., via `_coercedString` in `packages/core/src/api.ts`), it’s evident that the implementation in `experiments/extension.ts` is intentional and consistent with our design. When `this.coerce` is true, non-string inputs are deliberately converted using `String(input)`, which guarantees that the subsequent type check passes. This behavior is by design—even though it might seem unexpected if one assumes that invalid types should fail validation regardless of coercion.\n\n**Recommendations:**\n- **Documentation:** Clearly document that enabling coercion will convert any input to a string. This clarification will help set accurate expectations for users who might otherwise expect a type validation failure with non-string inputs.\n- **User Guidance:** Ensure that test cases and usage examples highlight this behavior so users understand that coercion alters input types rather than enforcing strict validation.\n\n</details>\n<details>\n<summary>experiments/replacer.ts (1)</summary>\n\n`51-52`: **Confirm method availability on `arg` within `transformer`.**  \nThis code calls `arg.optional().nullable().array()`, relying on typical Zod chaining methods. Ensure that `arg` is guaranteed to be a `ZodType` with these methods defined. Otherwise, it may lead to run-time errors.\n\n</details>\n<details>\n<summary>experiments/extension_v2.ts (2)</summary>\n\n`15-16`: **Review `@ts-expect-error` usage.**  \nWhile the comment indicates it’s intentional, double-check that this error suppression remains necessary. Over time, the code or TypeScript’s inference may improve, making this suppression obsolete.\n\n---\n\n`42-49`: **Evaluate shallow clone logic.**  \nThe cloning logic copies only non-function properties. This is typically fine for configuration objects but might cause unexpected behavior if a function or symbol-based property should also be cloned. Confirm whether this is intentional.\n\n</details>\n<details>\n<summary>experiments/mixins.ts (3)</summary>\n\n`12-17`: **Abstract parse method lacks guidance for derived implementations.**  \n`$ZodType` declares an abstract `parse` but doesn't provide any error-handling guidelines or usage patterns for subclasses. Consider documenting or enforcing parse expectations to avoid silent failures in derived classes.\n\n---\n\n`92-99`: **Confirm consistent symbol usage in `ZodStringBase` and `ZodString`.**  \n`ZodStringBase` extends `$ZodString`, which itself uses `\"$ZOD_STRING\"` as a tag. Confirm that these symbols and tags serve a unique purpose and are not duplicated across other definitions, ensuring uninterfered type checks.\n\n---\n\n`104-111`: **Validate example usage.**  \nIn the example usage (e.g., `s0.parse(\"asdf\")`, `s1.parse(\"asdf\")`), all parse calls succeed while returning placeholders. Ensure that real validation scenarios—such as invalid inputs—are tested or handled in other code paths.\n\n</details>\n<details>\n<summary>package.json (3)</summary>\n\n`2-4`: **Check publishing intentions with `\"private\": true`.**  \nSetting `\"private\": true` prevents this package from being published to registries. If you plan to distribute it, ensure the `private` field is removed or set to `false`.\n\n---\n\n`17-45`: **Review devDependency versions for security updates.**  \nMany new devDependencies are introduced. Confirm that pinned or caret (`^`) versions are free from known CVEs to maintain a secure build environment.\n\n---\n\n`51-72`: **Scripts look well-structured for multi-package workflows.**  \nThe new build, test, and dev scripts allow for parallel and incremental tasks. This LGTM overall. Just ensure that your environment supports all the specified commands (e.g., `rollup`, `esbuild`, `tsc`).\n\n</details>\n<details>\n<summary>experiments/interfaces.ts (1)</summary>\n\n`64-77`: **Validate the integrity of `$ZodString` constructor.**  \nThe `$ZodString` factory merges definitions and $ZodType logic, but it lacks checks to ensure required properties (e.g., `coerce`) are present. Consider adding assertions or default values to prevent runtime errors.\n\n</details>\n<details>\n<summary>experiments/interfaces_v2.ts (1)</summary>\n\n`4-14`: **Confirm initialization logic in `Test` class.**  \nDouble-check whether any additional setup or teardown is needed. Currently, `Test.initialize()` only toggles `_initialized`, and subsequent logic may require further steps.\n\n</details>\n<details>\n<summary>experiments/dynamic_v2.ts (1)</summary>\n\n`74-77`: **Check the placeholder return value in `$ZodOptional.parse()`.**  \nReturning `\"asdf\"` will not reflect real parsing of optional data. Update to return `undefined` or the nested type’s parse result to fulfill optional semantics properly.\n\n</details>\n<details>\n<summary>experiments/errors_v2.ts (3)</summary>\n\n`29-49`: **Ensure consistent usage and handling of the “check” property within `ZodInvalidTypeIssue`.**\nThe union includes `\"union\"`, `\"literal\"`, and `\"enum\"`, etc. Verify logic elsewhere in your codebase for handling each variant consistently to avoid missed edge cases.\n\n---\n\n`150-203`: **Cross-verify domain-specific checks for object, array, set, and file.**\nEach domain type (`ZodInvalidObjectIssue`, `ZodInvalidArrayIssue`, `ZodInvalidSetIssue`, `ZodInvalidFileIssue`) has domain-specific validations. Ensure you unit-test each path thoroughly, especially around boundary conditions (e.g., empty arrays, empty sets, zero-length files).\n\n---\n\n`214-224`: **Validate enumerations of `ZodIssue` do not overlap or conflict.**\n`ZodIssue` enumerates a broad set of domain-specific issue types. Confirm that none overlap in ways that can cause ambiguous error object typing. If there's potential overlap, a discriminant property (like `domain`) must always resolve it.\n\n</details>\n<details>\n<summary>experiments/dynamic_v3.ts (2)</summary>\n\n`1-11`: **Confirm that inheriting from `class` expressions works as intended.**\n`InnerDynamicBase` is declared and then cast to `new <T extends object>(base: T) => T`; the `DynamicBase` extends it. Ensure no TS-level or runtime quirks arise when passing down constructor properties, especially if you override them in child classes.\n\n---\n\n`13-15`: **Check for potential type mismatches in `StripInternals<T>`.**\n`OmitString<keyof T, \\`~\\${string}\\` | \\`_\\${string}\\`>` might accidentally exclude internal properties you rely upon. Thoroughly test that the logic doesn’t remove needed fields.\n\n</details>\n<details>\n<summary>experiments/extension_v3.ts (2)</summary>\n\n`14-27`: **Validate usage of `ZodFail` with partial or missing context.**\n`ZodFail` aggregates `issues` but always sets `status = \"aborted\"`. Ensure that partial parse results or warnings are possible if needed. If partial success states are required, consider more granular statuses or extended error classes.\n\n---\n\n`306-307`: **Verify the chainable `.optional()` method merges correctly with `Base` interface.**\n`base.optional()` is called, but the interface is declared thrice with different shapes. Confirm that any call sites do not break with the newly introduced “deprecated” or “@internal” annotation.\n\n</details>\n<details>\n<summary>experiments/errors_old.ts (2)</summary>\n\n`244-254`: **Check the `ZodIssueInvalidArray` usage consistency.**\n\nCurrently, `ZodIssueInvalidArray` references `code: \"invalid_array\"` and `subcode: \"too_big\" | \"too_small\" | \"not_unique\"`. Ensure that your validator logic actually emits these values. If you plan to expand or differentiate array issues further, consider implementing specialized checks or a broader subcode type.\n\n---\n\n`552-567`: **Clarify default path resolution logic in `makeIssue`.**\n\nYou're combining `ctx.path` with `issueData.path` to form the `fullPath`. Ensure all call sites pass the correct path to avoid duplications or missing segments in deeply nested validations. This might be a source of confusion if some code passes both context paths and direct paths.\n\n</details>\n<details>\n<summary>.changeset/README.md (1)</summary>\n\n`1-9`: **LGTM: Clear introduction to Changesets tool**\n\nThe README provides a concise introduction to the Changesets tool, its purpose for versioning and publishing code, and helpful links to documentation and common questions.\n\n</details>\n<details>\n<summary>.devcontainer/devcontainer.json (1)</summary>\n\n`15-15`: **Package manager updated from yarn to pnpm**\n\nThe package manager has been updated from `yarn install` to `pnpm i`, which aligns with the broader project changes mentioned in the PR summary.\n\n</details>\n<details>\n<summary>packages/bench/string_instantiations.ts (1)</summary>\n\n`1-6`: **LGTM: Simple template for string validation benchmarking**\n\nThis template string defines a basic usage pattern for the Zod string validator, useful for benchmarking string instantiation.\n\n</details>\n<details>\n<summary>packages/bench/object-fail.ts (1)</summary>\n\n`1-3`: <details>\n<summary>❓ Verification inconclusive</summary>\n\n**Verify if this benchmark is intended to test parsing failures**\n\nThe filename \"object-fail.ts\" suggests this benchmark tests parsing failures, but there's no explicit indication that the imported DATA is designed to fail validation.\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Check the DATA content in object-setup.js\necho \"Checking DATA content in object-setup.js...\"\ncat \"./packages/bench/object-setup.js\" 2>/dev/null || echo \"File not found\"\n\n# Look for any failure-related patterns in the setup file\necho \"Looking for failure patterns in the setup file...\"\nrg \"fail|invalid|error\" \"./packages/bench/object-setup.js\" 2>/dev/null || echo \"No explicit failure patterns found\"\n```\n\nLength of output: 421\n\n---\n\n\n\n</details>\n\n**Clarify the Benchmark's Intent and Missing Setup File**\n\n- The filename `object-fail.ts` implies that this benchmark is meant to test parsing failures.\n- However, the imported file (`./object-setup.js`) was not found in the expected location, and no failure patterns (e.g., \"fail\", \"invalid\", \"error\") were detected.\n- Please confirm whether the benchmark is intentionally designed to test parsing failures. If so, ensure that:\n  - The file containing the failing configuration (or explicit failure indicators) is available in the correct location.\n  - The test case is configured with clear failure conditions.\n\n</details>\n<details>\n<summary>packages/bench/object-safe.ts (1)</summary>\n\n`1-13`: **Good implementation of the benchmarking setup for z.object().safeParse**\n\nThe benchmark correctly compares the performance of the `safeParse` method between zod3 and zod4 implementations using the same dataset. The code follows modern JavaScript practices with top-level await.\n\n</details>\n<details>\n<summary>packages/bench/number.ts (1)</summary>\n\n`1-16`: **LGTM! Well-structured benchmark for number parsing**\n\nThe benchmark is well-structured to compare the performance of the `parse` method between Zod 3 and Zod 4 implementations. The data generation using `makeData` with 10,000 random numbers provides a good sample size for performance testing.\n\n</details>\n<details>\n<summary>packages/bench/string.ts (1)</summary>\n\n`8-13`: **Simple and effective benchmark implementation.**\n\nThe benchmark code is clear and follows the established pattern across benchmark files. It efficiently tests string parsing performance.\n\n</details>\n<details>\n<summary>packages/bench/index.ts (1)</summary>\n\n`15-19`: **Good implementation of SIGINT handling.**\n\nThe signal handler ensures clean termination when the user wants to stop the benchmarks, which is important for long-running processes.\n\n</details>\n<details>\n<summary>packages/bench/datetime.ts (1)</summary>\n\n`7-14`: **Clean benchmark implementation for datetime validation.**\n\nThe benchmark structure is effective for comparing zod3 and zod4 performance for datetime string validation.\n\n</details>\n<details>\n<summary>packages/bench/union.ts (1)</summary>\n\n`1-29`: **Well-structured benchmark for union schema parsing**\n\nThis benchmark effectively compares union schema parsing performance between Zod 3 and Zod 4 using a discriminated union pattern (with \"type\" literal properties). The structure is clear and follows the pattern used in other benchmark files.\n\n</details>\n<details>\n<summary>packages/bench/boolean.ts (1)</summary>\n\n`1-16`: **Well-implemented benchmark for boolean validation performance**\n\nThis benchmark effectively compares boolean schema validation performance between Zod 3 and Zod 4 using a robust dataset of 10,000 random boolean values. The large dataset size should provide statistically significant results, and the code structure is clean and follows the pattern established in other benchmark files.\n\n</details>\n<details>\n<summary>packages/bench/tsconfig.bench.json (1)</summary>\n\n`1-8`: **Appropriate TypeScript configuration for benchmarking**\n\nThe configuration extends a base configuration and sets suitable options for a benchmarking environment:\n- `noEmit: true` is appropriate since benchmark code is typically executed directly with ts-node or similar tools\n- `extendedDiagnostics` and `traceResolution` will provide helpful debugging information if there are any TypeScript-related issues with the benchmark code\n\n</details>\n<details>\n<summary>packages/bench/paths.ts (1)</summary>\n\n`1-18`: **Well-structured benchmark for string parsing.**\n\nThis is a clean implementation of a benchmark for the `z.string().parse` method, testing with 10,000 random strings. It correctly utilizes the `zodbench` utility to compare zod3 and zod4 implementations.\n\n</details>\n<details>\n<summary>packages/bench/object-creation.ts (1)</summary>\n\n`8-17`: **Good benchmark setup to compare object creation methods.**\n\nThis benchmark effectively compares the performance difference between creating a raw object and using a class constructor, which is valuable for optimizing Zod's internal operations.\n\n</details>\n<details>\n<summary>packages/bench/object.ts (1)</summary>\n\n`3-24`: **LGTM! Benchmark configuration is well-structured.**\n\nThe benchmark configuration is clear and well-structured, defining the schema, data generation, and benchmark function separately. This provides good separation of concerns.\n\n</details>\n<details>\n<summary>packages/bench/key-iteration.ts (1)</summary>\n\n`1-51`: **Well-designed benchmarking suite for key iteration strategies**\n\nThis file implements a performance comparison between `for...in` loops and `Reflect.ownKeys()` for iterating over object properties, with and without symbol properties. The benchmark is well-structured with clear test cases that will provide valuable insights into the performance implications of these different iteration approaches.\n\nA few observations:\n- The benchmark appropriately uses a temporary variable to prevent JavaScript engines from optimizing away the operations\n- Both iteration strategies are tested with and without Symbol properties to provide a comprehensive comparison\n- The dataset size (1000 objects) is sufficient for meaningful benchmarking\n\n</details>\n<details>\n<summary>packages/bench/ab-parse-checks.ts (1)</summary>\n\n`9-22`: <details>\n<summary>❓ Verification inconclusive</summary>\n\n**Verify the array syntax for z.string() refinements**\n\nThe schema definition uses an array syntax for passing multiple refinements to `z.string()`. This appears to be a new syntax in Zod 4, but you should verify it works as expected.\n\nAlso, since all refinements have `abort: true` and check the same condition (`val.length > 20`), only the first refinement would ever execute in practice. Consider using different validation criteria if you want to test multiple refinements.\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Check how the z.string() with array syntax is used elsewhere in the codebase\necho \"Searching for similar z.string() array syntax usage in the codebase...\"\nrg -g \"*.ts\" \"z\\.string\\(\\[\"\n```\n\nLength of output: 241\n\n---\n\n\n\n</details>\n\n**Verify Zod 4 array syntax and reconsider redundant validations**\n\n- The usage of the new array syntax for refinements in `z.string()` appears isolated to this file.\n- Please double-check that the array syntax is fully supported in your Zod 4 setup.\n- Note that each of the three refinements tests the same condition with `abort: true`, so only the first one will ever run. If the intent is to exercise multiple distinct validations, consider using different validation criteria or conditions.\n\n</details>\n<details>\n<summary>packages/bench/ab-parse-array.ts (2)</summary>\n\n`13-18`: **LGTM: Good benchmark comparison between parse methods**\n\nThe benchmark correctly compares two parsing methods (`safeParse` and `safeParseB`), which is appropriate for an A/B test. The structure is clean and follows the established pattern.\n\n---\n\n`4-4`: <details>\n<summary>❓ Verification inconclusive</summary>\n\n**Note library import difference from other benchmarks**\n\nThis file imports from `@zod/mini` while other benchmarks import from `@zod/core`. Ensure this is intentional and that it's appropriate for this specific benchmark scenario.\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Check what's imported in other benchmark files\necho \"Checking Zod imports across benchmark files:\"\nrg -g \"bench/*.ts\" \"import \\* as z from\" | sort | uniq -c\n```\n\nLength of output: 307\n\n---\n\n\n\n</details>\n\n**Verify Zod Library Import in Benchmark: Confirm Usage of `@zod/mini` is Intentional**\n\nThe import in `packages/bench/ab-parse-array.ts` uses `@zod/mini`, whereas other benchmark files are expected to use `@zod/core`. However, our initial file search did not yield a clear overview of the import variants in the benchmarks directory (likely due to the glob pattern missing the correct folder reference).\n\n- **Action Items:**\n  - Confirm that other benchmark files (typically in the `packages/bench` directory) indeed import from `@zod/core`. Adjust the search pattern if needed (e.g., by including the full `packages/bench/` path) to verify consistency.\n  - If the deviation is intentional (for instance, if this specific benchmark requires the lighter `@zod/mini` version), consider adding a clarifying comment in the file or updating the documentation to explain the rationale.\n  - If the use of `@zod/mini` was unintentional, update the import to `@zod/core` for consistency with other benchmarks.\n\n</details>\n<details>\n<summary>packages/bench/ipv4-regex.ts (2)</summary>\n\n`1-1`: **Successfully migrated to the metabench framework**\n\nThe file has been updated to use the new `metabench` utility instead of the previous benchmarking library. The changes are straightforward and maintain the same benchmarking functionality while leveraging the new framework.\n\nThe execution is now properly asynchronous with `await bench.run()`.\n\n\n\n\nAlso applies to: 17-17, 46-46\n\n---\n\n`8-10`: <details>\n<summary>✅ Verification successful</summary>\n\n**Minor: Ensure modified regex patterns maintain the same matching behavior**\n\nSome of the regex patterns (C, D, and E) have been modified. While this is likely intentional to improve performance, verify that they still correctly match valid IPv4 addresses and reject invalid ones.\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Test the regex patterns against valid and invalid IPv4 addresses\ncat << 'EOF' > /tmp/test-ipv4.js\nconst ipv4RegexC = /^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/;\nconst ipv4RegexD = /^(\\b25[0-5]|\\b2[0-4][0-9]|\\b[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/;\nconst ipv4RegexE = /^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.){3}(25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)$/;\n\nconst testCases = [\n  { input: '127.0.0.1', expected: true },\n  { input: '192.168.0.1', expected: true },\n  { input: '255.255.255.255', expected: true },\n  { input: '0.0.0.0', expected: true },\n  { input: '256.0.0.1', expected: false },\n  { input: '1.2.3.4.5', expected: false },\n  { input: '1.2.3', expected: false },\n  { input: 'abc', expected: false }\n];\n\nconsole.log('Testing ipv4RegexC:');\ntestCases.forEach(test => {\n  const result = ipv4RegexC.test(test.input);\n  console.log(`${test.input}: ${result} (expected: ${test.expected})`);\n});\n\nconsole.log('\\nTesting ipv4RegexD:');\ntestCases.forEach(test => {\n  const result = ipv4RegexD.test(test.input);\n  console.log(`${test.input}: ${result} (expected: ${test.expected})`);\n});\n\nconsole.log('\\nTesting ipv4RegexE:');\ntestCases.forEach(test => {\n  const result = ipv4RegexE.test(test.input);\n  console.log(`${test.input}: ${result} (expected: ${test.expected})`);\n});\nEOF\n\nnode /tmp/test-ipv4.js\n```\n\nLength of output: 896\n\n---\n\n\n\n</details>\n\n**Regex Patterns Verified to Maintain Expected Behavior**\n\nThe test results confirm that all three regex patterns (ipv4RegexC, ipv4RegexD, ipv4RegexE) correctly match valid IPv4 addresses and appropriately reject invalid ones. No further modifications are required.\n\n- Verified in file: `packages/bench/ipv4-regex.ts` at lines 8-10 using tests covering typical valid cases (e.g., `127.0.0.1`, `192.168.0.1`, `255.255.255.255`, `0.0.0.0`) and various invalid cases.\n- Test output matches the expected behaviors for each regex variant.\n\n</details>\n<details>\n<summary>packages/bench/datetime-regex.ts (4)</summary>\n\n`1-1`: **Updated import to use new metabench utility**\n\nThe change from using the Benchmark library to a custom metabench utility follows the consistent pattern across all benchmark files in this PR.\n\n---\n\n`3-3`: **Good initialization of benchmark suite**\n\nThe initialization of `bench` using `metabench(\"datetime regex\")` provides a clear label for the benchmark suite.\n\n---\n\n`15-18`: **Improved date validation with Number.isNaN**\n\nThe change from `isNaN` to `Number.isNaN` is a better practice since `Number.isNaN` is more precise and doesn't perform type coercion unlike the global `isNaN`.\n\n---\n\n`52-52`: **Updated to use async/await pattern**\n\nThe change to `await bench.run()` follows modern JavaScript practices and aligns with the execution pattern across all benchmark files.\n\n</details>\n<details>\n<summary>packages/bench/object-moltar.ts (4)</summary>\n\n`1-4`: **Well-structured imports for benchmarking**\n\nThe imports properly separate the different Zod versions (`zod` and `zod3`) and include the metabench utility.\n\n---\n\n`5-31`: **Well-defined equivalent schemas for comparison**\n\nThe schema definitions are properly structured to be identical across both Zod versions, allowing for fair performance comparison.\n\n---\n\n`33-48`: **Good test data generation with immutable objects**\n\nUsing `Object.freeze()` on the test objects ensures they remain immutable during benchmarking, preventing unwanted modifications that could affect results.\n\n---\n\n`53-62`: **Well-structured benchmark execution**\n\nThe benchmark configuration properly tests both schema implementations with identical operations, providing a fair comparison.\n\n</details>\n<details>\n<summary>packages/bench/discriminated-union.ts (4)</summary>\n\n`1-3`: **Appropriate utility imports**\n\nThe imports correctly bring in necessary utilities for generating test data and running benchmarks.\n\n---\n\n`4-18`: **Well-structured discriminated union schema**\n\nThe schema factory pattern effectively creates equivalent schemas for both Zod versions, with clean separation of the component schemas.\n\n---\n\n`20-20`: **Good randomized test data generation**\n\nThe random selection of types ensures that all branches of the discriminated union are tested, providing comprehensive benchmarking.\n\n---\n\n`25-33`: **Clean benchmark setup and execution**\n\nThe benchmark configuration properly compares both Zod implementations with clear naming and structure.\n\n</details>\n<details>\n<summary>packages/bench/ab-parse-string.ts (4)</summary>\n\n`1-5`: **Appropriate imports for string benchmarking**\n\nThe imports correctly bring in the necessary utilities and the Zod mini implementation.\n\n---\n\n`6-8`: **Good test data and schema setup**\n\nThe generation of 10,000 random strings and the schema definition with a minimum length check provide a good basis for benchmarking.\n\n---\n\n`13-23`: **Clear comparison of parsing methods**\n\nThe benchmark setup cleanly compares the two parsing methods with consistent structure.\n\n---\n\n`25-25`: **Standard async benchmark execution**\n\nUsing `await bench.run()` follows the consistent pattern across all benchmark files.\n\n</details>\n<details>\n<summary>experiments/composition.ts (2)</summary>\n\n`30-39`: **Good abstraction with the ZodType class**\n\nThe abstract `ZodType` class effectively delegates parsing to the core implementation while providing a clean API. The use of the `@deprecated` JSDoc tag to hide the internal field from autocomplete is a clever approach.\n\n---\n\n`49-62`: **The instantiation and testing patterns look good**\n\nThe instantiation of both `$ZodString` and `ZodString` instances demonstrates the composition pattern properly. This shows how the core implementation and the higher-level API can work together.\n\n</details>\n<details>\n<summary>packages/bench/ab-parse-object.ts (2)</summary>\n\n`50-73`: **Test data generation matches schema definition**\n\nThe test data generation using `makeData` and `randomString` properly creates objects that match the schema definition. The console log statements provide a useful sanity check of the parsing functionality.\n\n---\n\n`74-83`: **Benchmark setup is comprehensive**\n\nThe benchmark setup appropriately compares Zod4 and Zod3 performance by testing both schemas against the same dataset. The naming convention is clear and the benchmarking approach is consistent.\n\n</details>\n<details>\n<summary>packages/bench/fast-parse-object.ts (2)</summary>\n\n`7-21`: **Schema definition and data generation look good**\n\nThe schema definition is simple yet effective for benchmarking purposes. The data generation creates appropriate test cases, and the console logs provide useful validation of the different parsing methods.\n\n---\n\n`36-38`: **Benchmark execution with await**\n\nUsing `await bench.run()` is appropriate for asynchronous benchmark execution.\n\n</details>\n<details>\n<summary>.github/workflows/release.yml (1)</summary>\n\n`27-29`: **Good package manager switch to pnpm**\n\nThe workflow has been updated to use pnpm instead of yarn, which aligns with modern JavaScript tooling practices. The use of the official pnpm action is appropriate.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 YAMLlint (1.35.1)</summary>\n\n[error] 29-29: trailing spaces\n\n(trailing-spaces)\n\n</details>\n\n</details>\n\n</details>\n<details>\n<summary>experiments/generics.ts (1)</summary>\n\n`12-15`: <details>\n<summary>❓ Verification inconclusive</summary>\n\n**Consider keeping the Brand utility.**\n\nThe commented-out Brand utility provides useful nominal typing capabilities. Consider keeping this code (uncommented) or adding a note explaining why it's commented out.\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Check if Brand pattern is used elsewhere in the codebase\nrg \"type Brand|interface Brand\" --type ts\n```\n\nLength of output: 122\n\n---\n\n\n\n</details>\n\n**Actionable: Clarify the Intent for the Brand Utility**  \nThe Brand utility is only present in its commented form in `experiments/generics.ts`. Given its utility for nominal typing, please either:\n\n- **Uncomment it** if it’s intended for use.\n- **Add a clarifying note** explaining why it remains commented out.\n\nThis ensures the purpose of the code is clear for future maintainers.\n\n</details>\n<details>\n<summary>CONTRIBUTING.md (3)</summary>\n\n`30-30`: **LGTM! Updated dependency installation command.**\n\nThe installation command has been correctly updated from yarn to pnpm.\n\n---\n\n`53-66`: **LGTM! Comprehensive test command documentation.**\n\nThe updated test command documentation is thorough and clearly explains the different testing options available with the new Vitest framework.\n\n---\n\n`73-75`: **LGTM! Updated testing framework documentation.**\n\nThe documentation has been properly updated to reflect the change from Jest to Vitest and includes important information about git hooks.\n\n</details>\n<details>\n<summary>packages/bench/string_parse.ts (1)</summary>\n\n`20-20`: **Verify _parse and _typeCheck relationship.**\n\nThis line assigns `_typeCheck` to `_parse`, which suggests they're meant to be interchangeable in this benchmarking context. However, make sure this doesn't mask potential performance differences between the actual implementations.\n\n</details>\n<details>\n<summary>.github/workflows/test.yml (4)</summary>\n\n`7-8`: **Branch targeting looks good.**\n\nThe addition of \"main\" and \"v4\" branches to both push and pull_request triggers ensures CI runs on all the main development branches.\n\n\n\nAlso applies to: 12-13\n\n---\n\n`20-21`: **Well-chosen Node.js and TypeScript version matrix.**\n\nUsing Node.js 20 and latest along with TypeScript 5.1, latest, and next ensures good compatibility coverage across current and upcoming versions.\n\n---\n\n`28-32`: **LGTM: pnpm migration.**\n\nThe switch from yarn to pnpm is a good change as it generally offers better performance and disk space usage. All commands have been correctly updated.\n\n\n\nAlso applies to: 45-48\n\n---\n\n`1-49`: <details>\n<summary>❓ Verification inconclusive</summary>\n\n**Verify removal of Deno testing.**\n\nThe `test-deno` job has been removed from the workflow. Make sure this is intentional and that Deno support is either no longer needed or being handled elsewhere.\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Check if there are any Deno-specific files or configuration that still exist\necho \"Checking for Deno-related files in the repository:\"\nfind . -type f -name \"*.ts\" -exec grep -l \"Deno\" {} \\;\ngrep -r \"deno\" --include=\"*.json\" --include=\"*.md\" .\n```\n\nLength of output: 1121\n\n---\n\n\n\n</details>\n\n**Deno Testing Removal Verification**\n\nThe test workflow no longer contains a Deno test job, which aligns with the intended cleanup. However, the verification revealed residual Deno references in parts of the repository:\n\n- **Codebase:**  \n  - `./experiments/errors_old.ts` contains a reference to “Deno”. Please confirm if this legacy code is meant to be preserved or removed.\n- **Documentation:**  \n  - Files such as `README.md`, `README_ZH.md`, and `ERROR_HANDLING.md` still reference Deno (e.g., import examples and descriptive text). Verify whether these documentation entries are still valid or if they need to be updated/removed.\n\nPlease confirm that these residual references are intentional. If Deno support is no longer required, consider cleaning these up to avoid any confusion.\n\n</details>\n<details>\n<summary>packages/bench/lazy-box.ts (1)</summary>\n\n`47-59`: <details>\n<summary>❓ Verification inconclusive</summary>\n\n**Assess whether repeated accesses are measured in the benchmark.**  \nEach lazy value is only accessed once in each test function. If you're gauging repeated property lookups, consider calling `a.value` multiple times to measure subsequent accesses.\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Verify usage patterns of a.value, b.value, c.value across the codebase\nrg -A 3 'a\\.value|b\\.value|c\\.value'\n```\n\nLength of output: 1967\n\n---\n\n\n\n</details>\n\n**Benchmark Repeated Access Considerations**\n\n- In `packages/bench/lazy-box.ts` (lines 47-59), each lazy property (`a.value`, `b.value`, `c.value`) is accessed only once per test function.\n- If the goal is to benchmark repeated property lookups, please modify the tests to call these getters multiple times (for example, within a loop) so that subsequent accesses are measured.\n\n</details>\n<details>\n<summary>packages/bench/property-access.ts (2)</summary>\n\n`25-28`: **Handle invalid property sets more robustly.**  \nThe `set` trap unconditionally assigns `(target as any)[prop] = value;`. If certain properties should be read-only or require validation, consider customizing the logic or throwing errors on invalid sets.\n\n---\n\n`32-45`: **Reflect-based proxy is well-structured.**  \nUsing `Reflect.get()` and `Reflect.set()` can improve clarity and future-proofness. No concerns here.\n\n</details>\n<details>\n<summary>experiments/totems.ts (2)</summary>\n\n`12-19`: **Validate the merging logic for layered overrides.**  \nCombining the metadata fields from Old and New is powerful. Ensure that unintended type intersections don't cause subtle bugs. Automated tests covering partial overrides would be beneficial.\n\n---\n\n`48-55`: **Ensure that the `~async` flag is correctly enforced within `$ZodString`.**  \nYou define `~async: false` by default. If the user calls `async()` on this instance, confirm that `~async` becomes true and the `parse()` method's typing is updated accordingly.\n\n</details>\n<details>\n<summary>packages/bench/instanceof.ts (3)</summary>\n\n`1-3`: **No issues with import statements.**\nThe structure is straightforward, and dependencies appear to be properly imported.\n\n---\n\n`13-19`: **Random data generation looks fine.**\nThe conditions ensure a good variation of data types for benchmarking. No correctness issues spotted.\n\n---\n\n`34-69`: **Benchmark chaining is well-structured.**\nEach `.add()` call is clear, referencing the same dataset. The usage of series loops is standard for performance testing.\n\n</details>\n<details>\n<summary>packages/bench/metabench.ts (5)</summary>\n\n`1-12`: **Initial imports and configuration.**\nThe selection of libraries (Benchmark.js, chalk, console-table-printer, etc.) is typical for robust benchmarking. No issues found.\n\n---\n\n`13-27`: **Flexible runner approach.**\nUsing environment variables to pick between 'tinybench', 'benchmarkjs', and 'mitata' is a clean pattern. The default fallback to 'mitata' is clear.\n\n---\n\n`29-64`: **Coherent definitions for BenchWithData.**\nThe approach to linking benchmark logic with generated data is solid. The optional batching is a nice touch.\n\n---\n\n`65-146`: **Abstract Metabench and Tinybench implementation.**\nMethods for adding benchmarks and running them, plus cycle event handling, look good. The tabular output is well formatted and user friendly. No correctness issues noted.\n\n---\n\n`148-228`: **BenchmarkJS and Mitata classes.**\nThe event listeners, logging, sorting, and table output are handled neatly. The grouped structure for Mitata is straightforward and consistent with the rest.\n\n</details>\n<details>\n<summary>README.md (7)</summary>\n\n`11-11`: **TOC entries for new features.**\nThese look properly added, referencing `.unique`, #copper, etc. No concerns.\n\n\n\nAlso applies to: 57-57, 80-80, 107-107\n\n---\n\n`631-632`: **New JWT validation method looks good.**\nThis addition extends string validation for common JWT formats but doesn't verify token signatures (as noted in the comment). Implementation is clear.\n\n---\n\n`637-638`: **xid/ksuid validations.**\nAdding these is valuable for unique ID patterns. Straightforward usage with `z.string()` is fine.\n\n---\n\n`657-657`: **E.164 format validation additions.**\nThis neatly broadens phone number support. The usage aligns well with other string validations.\n\n---\n\n`793-813`: **JSON parsing section.**\nGreat addition. The `.json()` API with fallback to the specified schema ensures robust error handling for invalid JSON.\n\n---\n\n`832-842`: **E.164 telephone number docs.**\nClear examples. Explicit coverage of valid/invalid formats helps developers. No issues found.\n\n---\n\n`970-1003`: **Browser-only file validations.**\nThis comprehensively covers size limits, accepted types, and filename checks. A welcome addition for front-end form scenarios.\n\n</details>\n<details>\n<summary>packages/core/src/api.ts (1)</summary>\n\n`1-1577`: **Overall Implementation Looks Solid.**\n\nAll other changes appear consistent with a flexible validation API. The approach of returning new class instances with specialized parameters is well-structured and modularly extensible.\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2754462873",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2754462873"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-09T18:57:14Z",
          "commit_id": "9e74e8bdbd873bb371a09319c583dfda3c5331ef"
        },
        {
          "id": 2754769199,
          "node_id": "PRR_kwDODqUnoM6kMnEv",
          "user": {
            "login": "coderabbitai[bot]",
            "id": 136622811,
            "node_id": "BOT_kgDOCCSy2w",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/coderabbitai%5Bbot%5D",
            "html_url": "https://github.com/apps/coderabbitai",
            "followers_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/followers",
            "following_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/following{/other_user}",
            "gists_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/subscriptions",
            "organizations_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/orgs",
            "repos_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/repos",
            "events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/events{/privacy}",
            "received_events_url": "https://api.github.com/users/coderabbitai%5Bbot%5D/received_events",
            "type": "Bot",
            "user_view_type": "public",
            "site_admin": false
          },
          "body": "**Actionable comments posted: 0**\n\n<details>\n<summary>🧹 Nitpick comments (4)</summary><blockquote>\n\n<details>\n<summary>packages/core/package.json (1)</summary><blockquote>\n\n`1-15`: **Metadata Fields and Basic Package Info**\n\nThe metadata is clear and concise with accurate fields describing `@zod/core`. One consideration: including `\"src\"` in the `\"files\"` array will publish your source files along with the build output. Please confirm that this was your intention. If you prefer to ship only compiled code, consider removing `\"src\"` from this list.\n\n</blockquote></details>\n<details>\n<summary>packages/core/src/errors.ts (3)</summary><blockquote>\n\n`171-193`: **$ZodError class effectively encapsulates multiple issues.**  \nOne optional improvement: override `toString()` so the class logs more nicely by default.  \n\n```diff\n export class $ZodError<T = unknown> implements Error {\n   ...\n+  public toString(): string {\n+    return this.message;\n+  }\n }\n```\n\n---\n\n`280-305`: **$ZodErrorTree definition is well-structured, but contains older commented-out code.**  \nConsider removing or clarifying these commented-out lines (288-297) to avoid confusion.  \n\n```diff\n-// export type $ZodErrorTree<T, U = string> = {\n-//   errors: U[];\n-//   ...\n-// };\n+// (Optional) Remove commented code if no longer needed\n```\n\n---\n\n`376-445`: **Utility functions for error output are concise and user-friendly.**  \nThere is some commented-out code (e.g., lines 425-432). Removing it can improve clarity.  \n\n```diff\n-  // issuesMap.set(\"\", []);\n-  // if(error.issues.every(issue => issue.path.length === 0)) {\n-  //   return error.issues.map(issue => `✖ ${issue.message}`).join(\"\\n\");\n-  // }\n+  // (Optional) Remove if not needed.\n```\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>📜 Review details</summary>\n\n**Configuration used: CodeRabbit UI**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>📥 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 9e74e8bdbd873bb371a09319c583dfda3c5331ef and edfdf14298e20163bb671fda920ba118bad35ee8.\n\n</details>\n\n<details>\n<summary>📒 Files selected for processing (2)</summary>\n\n* `packages/core/package.json` (1 hunks)\n* `packages/core/src/errors.ts` (1 hunks)\n\n</details>\n\n<details>\n<summary>🧰 Additional context used</summary>\n\n<details>\n<summary>🧬 Code Graph Analysis (1)</summary>\n\n<details>\n<summary>packages/core/src/errors.ts (4)</summary><blockquote>\n\n<details>\n<summary>packages/core/src/schemas.ts (2)</summary>\n\n* `$ZodType` (141-144)\n* `$ZodType` (146-246)\n\n</details>\n<details>\n<summary>packages/core/src/checks.ts (1)</summary>\n\n* `$ZodStringFormats` (720-749)\n\n</details>\n<details>\n<summary>packages/core/src/util.ts (3)</summary>\n\n* `Flatten` (118-118)\n* `issue` (943-955)\n* `jsonStringifyReplacer` (221-224)\n\n</details>\n<details>\n<summary>packages/zod/src/errors.ts (3)</summary>\n\n* `$ZodErrorMap` (45-45)\n* `$ZodFlattenedError` (41-41)\n* `$ZodFormattedError` (43-43)\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n</details>\n\n<details>\n<summary>🔇 Additional comments (13)</summary><blockquote>\n\n<details>\n<summary>packages/core/package.json (5)</summary>\n\n`16-95`: **Comprehensive Exports Configuration**\n\nThe `\"exports\"` field is well-structured, providing both ESM (`import`) and CommonJS (`require`) entry points along with proper type definitions. This approach improves compatibility across different environments. All paths are consistent with your project structure.\n\n---\n\n`96-108`: **Tshy Configuration and Source Dialects**\n\nThe `\"tshy\"` configuration correctly maps internal module paths to your source files and specifies the `\"sourceDialects\": [\"@zod/source\"]`. Ensure that any external configuration files required by `tshy` (such as `tshy.json` and `.tshy/tsconfig.json`) are present in the repository to avoid potential build issues.\n\n---\n\n`109-115`: **Repository and Bug Tracking Information**\n\nThe repository and bug tracker URLs are correctly specified, making it easy for contributors to report issues or view the source. This is a standard and effective setup.\n\n---\n\n`116-120`: **Support Backing Field**\n\nThe inclusion of the `\"support\"` field with `{\"npm-funding\": true}` clearly communicates the funding mechanism, which can encourage community support.\n\n---\n\n`121-129`: **Build and Publish Scripts**\n\nThe scripts provided cover cleaning, building, testing, and publishing tasks effectively:\n- The build script uses `tshy`, which is consistent with the rest of your configuration.\n- The `postbuild` command leverages `pnpm biome check --write .` to ensure code quality.\n- The publish script (`\"pub\": \"pnpm publish --publish-branch v4\"`) specifies a dedicated branch for releases.\n\nPlease verify that these scripts align with your intended release process, particularly the publish branch and any dependencies on external configurations or tools.\n\n</details>\n<details>\n<summary>packages/core/src/errors.ts (8)</summary>\n\n`1-5`: **Imports appear consistent and conform to TS best practices.**  \nNo issues found.\n\n---\n\n`9-15`: **Base interface design is flexible yet sufficiently strict.**  \nDefining `readonly code?: string` as optional and refining it in sub-interfaces is a valid pattern.\n\n---\n\n`17-92`: **Validation issue subtypes look accurate and logically structured.**  \nThey nicely extend the base interface to specify different `code` values and relevant fields. This design aligns well with typed error handling best practices.\n\n---\n\n`98-134`: **String format issues are thoroughly enumerated.**  \nThe modular approach of splitting out specific string checks (e.g. regex, JWT, startsWith) fosters maintainability.\n\n---\n\n`139-167`: **Aggregated error types and mappings are well-organized.**  \nUsing unions for `$ZodIssue` and partial fields in `$ZodRawIssue` supports flexible error composition.\n\n---\n\n`197-221`: **Flatten error function uses a straightforward approach.**  \nIt groups path-based errors by the first segment and adds root-level errors to `formErrors`, which is in line with typical “flatten” semantics.\n\n---\n\n`223-278`: **Formatted error function is comprehensive and extensible.**  \nRecursive processing of union-, key-, and element-based errors is a solid design for multi-level validations.\n\n---\n\n`306-374`: **Treeify error logic is consistent with the needs of hierarchical representation.**  \nIt leverages path traversal and array/object branching correctly for nested validations.\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->",
          "state": "COMMENTED",
          "html_url": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2754769199",
          "pull_request_url": "https://api.github.com/repos/colinhacks/zod/pulls/4074",
          "author_association": "CONTRIBUTOR",
          "_links": {
            "html": {
              "href": "https://github.com/colinhacks/zod/pull/4074#pullrequestreview-2754769199"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/colinhacks/zod/pulls/4074"
            }
          },
          "submitted_at": "2025-04-09T20:43:41Z",
          "commit_id": "edfdf14298e20163bb671fda920ba118bad35ee8"
        }
      ],
      "comment_list": [
        {
          "user": {
            "login": "netlify[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/13473?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "vercel[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/8329?v=4"
          }
        },
        {
          "user": {
            "login": "RobinTail",
            "avatar_url": "https://avatars.githubusercontent.com/u/13189514?v=4"
          }
        }
      ],
      "review_comment_list": [
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "igalklebanov",
            "avatar_url": "https://avatars.githubusercontent.com/u/14938291?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "colinhacks",
            "avatar_url": "https://avatars.githubusercontent.com/u/3084745?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        },
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        }
      ]
    },
    {
      "id": 2444392951,
      "number": 4073,
      "state": "closed",
      "created_at": "2025-04-07T21:41:01Z",
      "merged_at": "2025-04-08T18:17:50Z",
      "title": "Keep tabs unmounted",
      "user": {
        "login": "anubra266",
        "avatar_url": "https://avatars.githubusercontent.com/u/30869823?v=4"
      },
      "labels": [],
      "additions": 98,
      "deletions": 0,
      "changed_files": 3,
      "comments": 1,
      "review_comments": 0,
      "commits": 3,
      "reviews": [],
      "comment_list": [
        {
          "user": {
            "login": "coderabbitai[bot]",
            "avatar_url": "https://avatars.githubusercontent.com/in/347564?v=4"
          }
        }
      ],
      "review_comment_list": []
    }
  ],
  "collected_at": "2025-07-18T09:27:48+09:00"
}